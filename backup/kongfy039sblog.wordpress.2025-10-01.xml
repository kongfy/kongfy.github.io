<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Kongfy&#039;s Blog</title>
	<link>http://blog.kongfy.com</link>
	<description>good good code, day day up!</description>
	<pubDate>Wed, 01 Oct 2025 04:30:35 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.kongfy.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.kongfy.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[kongfy]]></wp:author_login><wp:author_email><![CDATA[njukongfy@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[kongfy]]></wp:author_display_name><wp:author_first_name><![CDATA[Fanyu]]></wp:author_first_name><wp:author_last_name><![CDATA[Kong]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>51</wp:term_id>
		<wp:category_nicename><![CDATA[c-cpp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[C/C++]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[ios-development]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[iOS开发]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[linux]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Linux]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[python-2]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Python]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>44</wp:term_id>
		<wp:category_nicename><![CDATA[cloud-computing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[云计算]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>62</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[关系型数据库]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>53</wp:term_id>
		<wp:category_nicename><![CDATA[distributed-system]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[分布式系统]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[operating-system]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[操作系统]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[machine-learning]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[机器学习]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[杂七杂八]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[algorithm]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[算法]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>47</wp:term_id>
		<wp:category_nicename><![CDATA[network]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[网络]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[thinking]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[胡思乱想]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[apue]]></wp:tag_slug>
		<wp:tag_name><![CDATA[APUE]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>42</wp:term_id>
		<wp:tag_slug><![CDATA[binary-search]]></wp:tag_slug>
		<wp:tag_name><![CDATA[binary search]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[C++]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>54</wp:term_id>
		<wp:tag_slug><![CDATA[consensus]]></wp:tag_slug>
		<wp:tag_name><![CDATA[consensus]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>61</wp:term_id>
		<wp:tag_slug><![CDATA[data-structure]]></wp:tag_slug>
		<wp:tag_name><![CDATA[data structure]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>65</wp:term_id>
		<wp:tag_slug><![CDATA[failure-detector]]></wp:tag_slug>
		<wp:tag_name><![CDATA[failure detector]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>64</wp:term_id>
		<wp:tag_slug><![CDATA[flp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[FLP]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[git]]></wp:tag_slug>
		<wp:tag_name><![CDATA[git]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[ios]]></wp:tag_slug>
		<wp:tag_name><![CDATA[iOS]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>49</wp:term_id>
		<wp:tag_slug><![CDATA[ip]]></wp:tag_slug>
		<wp:tag_name><![CDATA[IP]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[k-means]]></wp:tag_slug>
		<wp:tag_name><![CDATA[K-means]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[leetcode]]></wp:tag_slug>
		<wp:tag_name><![CDATA[leetcode]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>50</wp:term_id>
		<wp:tag_slug><![CDATA[linux]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Linux]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>60</wp:term_id>
		<wp:tag_slug><![CDATA[lock-free]]></wp:tag_slug>
		<wp:tag_name><![CDATA[lock free]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[lvm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[LVM]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>57</wp:term_id>
		<wp:tag_slug><![CDATA[memory-barrier]]></wp:tag_slug>
		<wp:tag_name><![CDATA[memory barrier]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[nanos]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Nanos]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>45</wp:term_id>
		<wp:tag_slug><![CDATA[neutron]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Neutron]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>63</wp:term_id>
		<wp:tag_slug><![CDATA[oceanbase]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Oceanbase]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[openstack]]></wp:tag_slug>
		<wp:tag_name><![CDATA[OpenStack]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>56</wp:term_id>
		<wp:tag_slug><![CDATA[paxos]]></wp:tag_slug>
		<wp:tag_name><![CDATA[paxos]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[pca]]></wp:tag_slug>
		<wp:tag_name><![CDATA[PCA]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>2</wp:term_id>
		<wp:tag_slug><![CDATA[python]]></wp:tag_slug>
		<wp:tag_name><![CDATA[python]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>55</wp:term_id>
		<wp:tag_slug><![CDATA[raft]]></wp:tag_slug>
		<wp:tag_name><![CDATA[raft]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>46</wp:term_id>
		<wp:tag_slug><![CDATA[scipy]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SciPy]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[srm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SRM]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[svd]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SVD]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[svm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SVM]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[swift]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Swift]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>48</wp:term_id>
		<wp:tag_slug><![CDATA[tcp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[TCP]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>41</wp:term_id>
		<wp:tag_slug><![CDATA[topcoder]]></wp:tag_slug>
		<wp:tag_name><![CDATA[TopCoder]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[twisted]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Twisted]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[vnc]]></wp:tag_slug>
		<wp:tag_name><![CDATA[VNC]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[%e4%ba%a4%e5%8f%89%e9%aa%8c%e8%af%81]]></wp:tag_slug>
		<wp:tag_name><![CDATA[交叉验证]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%86%85%e6%a0%b8%e5%90%8c%e6%ad%a5]]></wp:tag_slug>
		<wp:tag_name><![CDATA[内核同步]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:tag_slug>
		<wp:tag_name><![CDATA[动态规划]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>52</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8d%9a%e5%bc%88%e8%ae%ba]]></wp:tag_slug>
		<wp:tag_name><![CDATA[博弈论]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>58</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%a4%9a%e6%a0%b8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[多核]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>59</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%a4%9a%e7%ba%bf%e7%a8%8b]]></wp:tag_slug>
		<wp:tag_name><![CDATA[多线程]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b]]></wp:tag_slug>
		<wp:tag_name><![CDATA[异常检测]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>37</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af]]></wp:tag_slug>
		<wp:tag_name><![CDATA[强连通分支]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[操作系统]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%9c%80%e5%b0%8f%e5%89%b2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[最小割]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%9c%ba%e5%99%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[机器]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[梯度下降]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[神经网络]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[算法]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92]]></wp:tag_slug>
		<wp:tag_name><![CDATA[线性回归]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%81%9a%e7%b1%bb]]></wp:tag_slug>
		<wp:tag_name><![CDATA[聚类]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>38</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%b0%83%e5%ba%a6]]></wp:tag_slug>
		<wp:tag_name><![CDATA[调度]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92]]></wp:tag_slug>
		<wp:tag_name><![CDATA[逻辑回归]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[apue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[APUE]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[binary-search]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[binary search]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[C++]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c-cpp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[C/C++]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[consensus]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[consensus]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[61]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[data-structure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[data structure]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[65]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[failure-detector]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[failure detector]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[64]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[flp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[FLP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[git]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ios]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[iOS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ios-development]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[iOS开发]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ip]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[IP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[k-means]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[K-means]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[leetcode]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[leetcode]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[60]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lock-free]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[lock free]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lvm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[LVM]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[57]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[memory-barrier]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[memory barrier]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nanos]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Nanos]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[neutron]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Neutron]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[63]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[oceanbase]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Oceanbase]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[openstack]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[OpenStack]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[paxos]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[paxos]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pca]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PCA]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Python]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[raft]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[raft]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[scipy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SciPy]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[social-network]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[social network]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[srm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SRM]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[svd]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SVD]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[svm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SVM]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[swift]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Swift]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tcp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[TCP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[topcoder]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[TopCoder]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[twisted]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Twisted]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vnc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[VNC]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cloud-computing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[云计算]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%ba%a4%e5%8f%89%e9%aa%8c%e8%af%81]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[交叉验证]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[62]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[关系型数据库]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%86%85%e6%a0%b8%e5%90%8c%e6%ad%a5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[内核同步]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[distributed-system]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[分布式系统]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[动态规划]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%9a%e5%bc%88%e8%ae%ba]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[博弈论]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[58]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a4%9a%e6%a0%b8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[多核]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[59]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a4%9a%e7%ba%bf%e7%a8%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[多线程]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[异常检测]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[强连通分支]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[操作系统]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[operating-system]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[操作系统]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%80%e5%b0%8f%e5%89%b2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[最小割]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%ba%e5%99%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[机器]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[machine-learning]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[机器学习]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[杂七杂八]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[梯度下降]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[神经网络]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[算法]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[algorithm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[算法]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[线性回归]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[network]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[网络]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%81%9a%e7%b1%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[聚类]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[thinking]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[胡思乱想]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b0%83%e5%ba%a6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[调度]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[逻辑回归]]></wp:term_name>
	</wp:term>
	<wp:term><wp:term_id>43</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[social-network]]></wp:term_slug><wp:term_name><![CDATA[social network]]></wp:term_name>
</wp:term>

	

<image>
	<url>http://blog.kongfy.com/wp-content/uploads/2015/12/favicon.gif</url>
	<title>Kongfy&#039;s Blog</title>
	<link>http://blog.kongfy.com</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">69044415</site>
	<item>
		<title>baidu</title>
		<link>http://blog.kongfy.com/2012/09/%e7%a0%81%e5%86%9c%e4%b8%a4%e6%9c%88%e8%ae%b0/img_0087/</link>
		<pubDate>Tue, 04 Mar 2014 15:18:14 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/IMG_0087.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2014-03-04 23:18:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-04 15:18:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0087]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>17</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/IMG_0087.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:598;s:4:"file";s:20:"2014/03/IMG_0087.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"IMG_0087-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 4.5% (376.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:20:"IMG_0087-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 4.8% (1.0&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:20:"IMG_0087-624x466.jpg";s:5:"width";i:624;s:6:"height";i:466;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 5.3% (4.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";d:2.79999999999999982236431605997495353221893310546875;s:6:"credit";s:0:"";s:6:"camera";s:8:"iPhone 4";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1341775916;s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.85";s:3:"iso";s:3:"200";s:13:"shutter_speed";s:17:"0.066666666666667";s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 5.4% (23.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/IMG_0087.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VNC连接</title>
		<link>http://blog.kongfy.com/2013/02/%e9%80%9a%e8%bf%87vnc%e8%bf%9e%e6%8e%a5linux%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2/attachment/1707697096/</link>
		<pubDate>Sun, 09 Mar 2014 04:55:45 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2013/02/1707697096.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2014-03-09 12:55:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-09 04:55:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1707697096]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>25</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2013/02/1707697096.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/1707697096.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:336;s:6:"height";i:314;s:4:"file";s:22:"2013/02/1707697096.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:22:"1707697096-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 23.1% (4.0&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:22:"1707697096-300x280.png";s:5:"width";i:300;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 18.9% (8.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 36.3% (12.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>471457303</title>
		<link>http://blog.kongfy.com/2013/02/%e9%80%9a%e8%bf%87vnc%e8%bf%9e%e6%8e%a5linux%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2/attachment/471457303/</link>
		<pubDate>Sun, 09 Mar 2014 04:58:53 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2013/02/471457303.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2014-03-09 12:58:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-09 04:58:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[471457303]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>25</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2013/02/471457303.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/471457303.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:790;s:4:"file";s:21:"2013/02/471457303.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"471457303-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 16.4% (3.7&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:21:"471457303-300x231.png";s:5:"width";i:300;s:6:"height";i:231;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 17.2% (11.5&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:21:"471457303-624x481.png";s:5:"width";i:624;s:6:"height";i:481;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 17.8% (44.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:55:"Reduced by 33.8% (161.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gitweb</title>
		<link>http://blog.kongfy.com/2013/03/%e6%9e%b6%e8%ae%be%e7%ae%80%e5%8d%95git%e6%9c%8d%e5%8a%a1%e5%99%a8/attachment/2387854333/</link>
		<pubDate>Sun, 09 Mar 2014 06:46:11 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2013/03/2387854333.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2014-03-09 14:46:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-09 06:46:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2387854333]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2013/03/2387854333.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/2387854333.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1909;s:6:"height";i:924;s:4:"file";s:22:"2013/03/2387854333.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:22:"2387854333-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 31.2% (708.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:22:"2387854333-300x145.jpg";s:5:"width";i:300;s:6:"height";i:145;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 24.3% (899.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:23:"2387854333-1024x495.jpg";s:5:"width";i:1024;s:6:"height";i:495;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 24.6% (6.2&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:22:"2387854333-624x302.jpg";s:5:"width";i:624;s:6:"height";i:302;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 23.0% (2.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 33.4% (23.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenStack Architecture</title>
		<link>http://blog.kongfy.com/2014/03/openstack-havana%ef%bc%88ubuntu-13-10%ef%bc%89%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0/f263d492-d28b-468d-87bb-c1a5860e0fcc/</link>
		<pubDate>Tue, 18 Mar 2014 12:32:22 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/F263D492-D28B-468D-87BB-C1A5860E0FCC.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[OpenStack基本结构概况]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2014-03-18 20:32:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-18 12:32:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[f263d492-d28b-468d-87bb-c1a5860e0fcc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>46</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/F263D492-D28B-468D-87BB-C1A5860E0FCC.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/F263D492-D28B-468D-87BB-C1A5860E0FCC.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:859;s:6:"height";i:782;s:4:"file";s:48:"2014/03/F263D492-D28B-468D-87BB-C1A5860E0FCC.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"F263D492-D28B-468D-87BB-C1A5860E0FCC-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.3% (512.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"F263D492-D28B-468D-87BB-C1A5860E0FCC-300x273.jpg";s:5:"width";i:300;s:6:"height";i:273;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.6% (1.3&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"F263D492-D28B-468D-87BB-C1A5860E0FCC-624x568.jpg";s:5:"width";i:624;s:6:"height";i:568;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.4% (4.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 19.0% (11.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>boot sequence</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e8%bf%87%e7%a8%8b-how-computers-boot-up/55e52855-da54-4925-98dd-e45a9f000583/</link>
		<pubDate>Sun, 23 Mar 2014 12:45:18 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/55E52855-DA54-4925-98DD-E45A9F000583.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[计算机启动过程]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2014-03-23 20:45:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-23 12:45:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[55e52855-da54-4925-98dd-e45a9f000583]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>110</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/55E52855-DA54-4925-98DD-E45A9F000583.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:674;s:6:"height";i:242;s:4:"file";s:48:"2014/03/55E52855-DA54-4925-98DD-E45A9F000583.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"55E52855-DA54-4925-98DD-E45A9F000583-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.5% (676.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"55E52855-DA54-4925-98DD-E45A9F000583-300x107.jpg";s:5:"width";i:300;s:6:"height";i:107;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.0% (880.0&nbsp;B) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"55E52855-DA54-4925-98DD-E45A9F000583-624x224.jpg";s:5:"width";i:624;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.9% (2.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.0% (5.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/55E52855-DA54-4925-98DD-E45A9F000583.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MBR</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e8%bf%87%e7%a8%8b-how-computers-boot-up/6c14b5ae-6e9c-421f-8278-88720e722cf4/</link>
		<pubDate>Sun, 23 Mar 2014 15:57:31 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/6C14B5AE-6E9C-421F-8278-88720E722CF4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[主引导记录（MBR）]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2014-03-23 23:57:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-23 15:57:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6c14b5ae-6e9c-421f-8278-88720e722cf4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>110</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/6C14B5AE-6E9C-421F-8278-88720E722CF4.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/6C14B5AE-6E9C-421F-8278-88720E722CF4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:616;s:6:"height";i:235;s:4:"file";s:48:"2014/03/6C14B5AE-6E9C-421F-8278-88720E722CF4.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"6C14B5AE-6E9C-421F-8278-88720E722CF4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.3% (589.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"6C14B5AE-6E9C-421F-8278-88720E722CF4-300x114.jpg";s:5:"width";i:300;s:6:"height";i:114;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.6% (773.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.1% (4.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>memory reginos</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e8%bf%87%e7%a8%8b-how-computers-boot-up/79cf14ef-a63e-4b19-9e51-7416099d1dfb/</link>
		<pubDate>Sun, 23 Mar 2014 16:01:49 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/79CF14EF-A63E-4B19-9E51-7416099D1DFB.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[启动时的重要内存区域]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2014-03-24 00:01:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-23 16:01:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[79cf14ef-a63e-4b19-9e51-7416099d1dfb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>110</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/79CF14EF-A63E-4B19-9E51-7416099D1DFB.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/79CF14EF-A63E-4B19-9E51-7416099D1DFB.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:337;s:6:"height";i:547;s:4:"file";s:48:"2014/03/79CF14EF-A63E-4B19-9E51-7416099D1DFB.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"79CF14EF-A63E-4B19-9E51-7416099D1DFB-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.1% (481.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"79CF14EF-A63E-4B19-9E51-7416099D1DFB-184x300.jpg";s:5:"width";i:184;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.2% (1.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.3% (6.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>motherboard</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e4%b8%bb%e6%9d%bf%e8%8a%af%e7%89%87%e9%9b%86%e5%92%8c%e5%ad%98%e5%82%a8%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84-motherboard-chipsets-and-the-memory-map/6d264ddd-cb93-47a6-995e-b18f84aa12fc/</link>
		<pubDate>Thu, 27 Mar 2014 12:44:01 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/6D264DDD-CB93-47A6-995E-B18F84AA12FC.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[主板示意图，北桥和南桥构成了芯片集]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2014-03-27 20:44:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-27 12:44:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6d264ddd-cb93-47a6-995e-b18f84aa12fc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>140</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/6D264DDD-CB93-47A6-995E-B18F84AA12FC.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/6D264DDD-CB93-47A6-995E-B18F84AA12FC.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:668;s:6:"height";i:468;s:4:"file";s:48:"2014/03/6D264DDD-CB93-47A6-995E-B18F84AA12FC.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"6D264DDD-CB93-47A6-995E-B18F84AA12FC-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 5.8% (404.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"6D264DDD-CB93-47A6-995E-B18F84AA12FC-300x210.jpg";s:5:"width";i:300;s:6:"height";i:210;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.1% (1.0&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"6D264DDD-CB93-47A6-995E-B18F84AA12FC-624x437.jpg";s:5:"width";i:624;s:6:"height";i:437;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.1% (4.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.7% (8.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>memory layout</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e4%b8%bb%e6%9d%bf%e8%8a%af%e7%89%87%e9%9b%86%e5%92%8c%e5%ad%98%e5%82%a8%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84-motherboard-chipsets-and-the-memory-map/1bd64ba1-2a96-4289-b293-9587881fe0af/</link>
		<pubDate>Thu, 27 Mar 2014 12:46:28 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/03/1BD64BA1-2A96-4289-B293-9587881FE0AF.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Intel体系中前4GB存储空间的布局情况]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2014-03-27 20:46:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-27 12:46:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1bd64ba1-2a96-4289-b293-9587881fe0af]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>140</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/03/1BD64BA1-2A96-4289-B293-9587881FE0AF.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/1BD64BA1-2A96-4289-B293-9587881FE0AF.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:285;s:6:"height";i:604;s:4:"file";s:48:"2014/03/1BD64BA1-2A96-4289-B293-9587881FE0AF.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"1BD64BA1-2A96-4289-B293-9587881FE0AF-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.1% (473.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"1BD64BA1-2A96-4289-B293-9587881FE0AF-141x300.jpg";s:5:"width";i:141;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.8% (821.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.6% (4.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GDTR</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/gdtr/</link>
		<pubDate>Sat, 03 May 2014 13:16:04 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/Gdtr.png</guid>
		<description></description>
		<content:encoded><![CDATA[GDT描述符]]></content:encoded>
		<excerpt:encoded><![CDATA[GDT描述符]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2014-05-03 21:16:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-03 13:16:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdtr]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/Gdtr.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/Gdtr.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:465;s:6:"height";i:204;s:4:"file";s:16:"2014/05/Gdtr.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:16:"Gdtr-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 27.1% (2.5&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:16:"Gdtr-300x131.png";s:5:"width";i:300;s:6:"height";i:131;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 22.2% (2.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 24.6% (2.1&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GDT Entry</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/gdt_entry/</link>
		<pubDate>Sat, 03 May 2014 13:32:01 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/GDT_Entry.png</guid>
		<description></description>
		<content:encoded><![CDATA[段描述符]]></content:encoded>
		<excerpt:encoded><![CDATA[段描述符]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[2014-05-03 21:32:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-03 13:32:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdt_entry]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/GDT_Entry.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/GDT_Entry.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:192;s:4:"file";s:21:"2014/05/GDT_Entry.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"GDT_Entry-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 55.0% (7.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:21:"GDT_Entry-300x112.png";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 59.0% (12.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 52.4% (10.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bootloader.tar</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/bootloader-tar/</link>
		<pubDate>Sat, 03 May 2014 14:34:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/bootloader.tar.gz</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2014-05-03 22:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-03 14:34:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bootloader-tar]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/bootloader.tar.gz]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/bootloader.tar.gz]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>段选择子</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/selector/</link>
		<pubDate>Sun, 04 May 2014 08:25:22 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/selector.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[段选择子]]></content:encoded>
		<excerpt:encoded><![CDATA[段选择子]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2014-05-04 16:25:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-04 08:25:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[selector]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/selector.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/selector.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:712;s:6:"height";i:183;s:4:"file";s:20:"2014/05/selector.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"selector-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 42.1% (834.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:19:"selector-300x77.jpg";s:5:"width";i:300;s:6:"height";i:77;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 17.7% (741.0&nbsp;B) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:20:"selector-624x160.jpg";s:5:"width";i:624;s:6:"height";i:160;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 20.9% (2.0&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 22.6% (3.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flags &amp; Access Byte</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/gdt_bits/</link>
		<pubDate>Sat, 17 May 2014 03:44:03 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/Gdt_bits.png</guid>
		<description></description>
		<content:encoded><![CDATA[Flags & Access Byte]]></content:encoded>
		<excerpt:encoded><![CDATA[Flags & Access Byte]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2014-05-17 11:44:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-17 03:44:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdt_bits]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>166</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/Gdt_bits.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/Gdt_bits.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:427;s:6:"height";i:115;s:4:"file";s:20:"2014/05/Gdt_bits.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"Gdt_bits-150x115.png";s:5:"width";i:150;s:6:"height";i:115;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 19.1% (534.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:19:"Gdt_bits-300x80.png";s:5:"width";i:300;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 27.0% (2.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 22.2% (1.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Flags & Access Byte]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PIC</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-2-%e5%86%85%e6%a0%b8%e5%88%9d%e5%a7%8b%e5%8c%96/22fig09/</link>
		<pubDate>Sat, 17 May 2014 14:21:37 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/22fig09.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[硬件设备通过8259s将中断传递到CPU]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2014-05-17 22:21:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-17 14:21:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[22fig09]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>204</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/22fig09.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/22fig09.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:500;s:6:"height";i:337;s:4:"file";s:19:"2014/05/22fig09.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"22fig09-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.3% (1.1&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:19:"22fig09-300x202.jpg";s:5:"width";i:300;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 13.0% (2.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 16.2% (4.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>8259s</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-2-%e5%86%85%e6%a0%b8%e5%88%9d%e5%a7%8b%e5%8c%96/irq_cascade/</link>
		<pubDate>Sat, 17 May 2014 14:25:10 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/irq_cascade.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[slave芯片的输出连接到master芯片的IRQ 2]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2014-05-17 22:25:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-17 14:25:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[irq_cascade]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>204</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/irq_cascade.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/irq_cascade.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:402;s:6:"height";i:470;s:4:"file";s:23:"2014/05/irq_cascade.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"irq_cascade-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:23:"irq_cascade-256x300.gif";s:5:"width";i:256;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:51:"Reduced by 0.1% (5.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 16.5% (911.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>idt</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-2-%e5%86%85%e6%a0%b8%e5%88%9d%e5%a7%8b%e5%8c%96/idt/</link>
		<pubDate>Mon, 19 May 2014 13:01:20 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/idt.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[计算中断描述符地址]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2014-05-19 21:01:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-19 13:01:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[idt]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>204</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/idt.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/idt.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:423;s:6:"height";i:364;s:4:"file";s:15:"2014/05/idt.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:15:"idt-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:15:"idt-300x258.gif";s:5:"width";i:300;s:6:"height";i:258;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:51:"Reduced by 0.1% (6.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>intr_source</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-2-%e5%86%85%e6%a0%b8%e5%88%9d%e5%a7%8b%e5%8c%96/intr_source/</link>
		<pubDate>Mon, 19 May 2014 15:06:56 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/05/intr_source.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[CPU和中断]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2014-05-19 23:06:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-19 15:06:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intr_source]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>204</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/05/intr_source.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/intr_source.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:426;s:6:"height";i:367;s:4:"file";s:23:"2014/05/intr_source.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"intr_source-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.3% (626.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:23:"intr_source-300x258.jpg";s:5:"width";i:300;s:6:"height";i:258;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.5% (1.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 17.6% (4.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Swift</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/rdn_538cc786563e1/</link>
		<pubDate>Tue, 03 Jun 2014 08:58:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/rdn_538cc786563e1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[WWDC2014推出Swift编程语言]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 16:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 08:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rdn_538cc786563e1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/rdn_538cc786563e1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/rdn_538cc786563e1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:682;s:4:"file";s:29:"2014/06/rdn_538cc786563e1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:29:"rdn_538cc786563e1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.1% (307.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:29:"rdn_538cc786563e1-300x199.jpg";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 4.4% (387.0&nbsp;B) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:29:"rdn_538cc786563e1-624x415.jpg";s:5:"width";i:624;s:6:"height";i:415;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 5.9% (1.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Swift效率</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/wwdc-31/</link>
		<pubDate>Tue, 03 Jun 2014 10:30:31 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/wwdc-31.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Swift运行效率]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 18:30:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 10:30:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wwdc-31]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/wwdc-31.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/wwdc-31.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:580;s:6:"height";i:327;s:4:"file";s:19:"2014/06/wwdc-31.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"wwdc-31-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.5% (470.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:19:"wwdc-31-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.9% (634.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:52:"Reduced by 0.2% (31.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Xcode6</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/8dce2f8b-8bc5-4b2e-9b5d-168a9efeefe8/</link>
		<pubDate>Tue, 03 Jun 2014 10:43:35 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[安装Xcode 6 beta]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 18:43:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 10:43:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[8dce2f8b-8bc5-4b2e-9b5d-168a9efeefe8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:611;s:6:"height";i:388;s:4:"file";s:48:"2014/06/8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.0% (502.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8-300x190.jpg";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.7% (897.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.7% (4.1&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用Swift创建项目</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/8aa06695-5ed4-43d5-a5ec-d7f0da81cc66/</link>
		<pubDate>Tue, 03 Jun 2014 10:53:54 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[使用Swift创建项目]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 18:53:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 10:53:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[8aa06695-5ed4-43d5-a5ec-d7f0da81cc66]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:730;s:6:"height";i:430;s:4:"file";s:48:"2014/06/8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.0% (746.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66-300x176.jpg";s:5:"width";i:300;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.7% (1.3&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66-624x367.jpg";s:5:"width";i:624;s:6:"height";i:367;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 15.3% (4.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 17.7% (8.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UIView文档</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/5aed08bc-3c28-4afc-b735-bd695d1f8426/</link>
		<pubDate>Tue, 03 Jun 2014 10:57:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/5AED08BC-3C28-4AFC-B735-BD695D1F8426.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[UIView文档中的Swift部分]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 18:57:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 10:57:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[5aed08bc-3c28-4afc-b735-bd695d1f8426]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/5AED08BC-3C28-4AFC-B735-BD695D1F8426.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/5AED08BC-3C28-4AFC-B735-BD695D1F8426.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1400;s:6:"height";i:757;s:4:"file";s:48:"2014/06/5AED08BC-3C28-4AFC-B735-BD695D1F8426.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"5AED08BC-3C28-4AFC-B735-BD695D1F8426-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.9% (611.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"5AED08BC-3C28-4AFC-B735-BD695D1F8426-300x162.jpg";s:5:"width";i:300;s:6:"height";i:162;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.7% (1.1&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"5AED08BC-3C28-4AFC-B735-BD695D1F8426-1024x553.jpg";s:5:"width";i:1024;s:6:"height";i:553;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.8% (10.2&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"5AED08BC-3C28-4AFC-B735-BD695D1F8426-624x337.jpg";s:5:"width";i:624;s:6:"height";i:337;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.8% (4.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 14.3% (29.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>objective-c</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/538d0f1cdec3c/</link>
		<pubDate>Tue, 03 Jun 2014 14:38:17 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/538d0f1cdec3c.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[长江后浪推前浪，前浪死在沙滩上]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 22:38:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 14:38:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[538d0f1cdec3c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/538d0f1cdec3c.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/538d0f1cdec3c.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:416;s:6:"height";i:362;s:4:"file";s:25:"2014/06/538d0f1cdec3c.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:25:"538d0f1cdec3c-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.2% (548.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:25:"538d0f1cdec3c-300x261.jpg";s:5:"width";i:300;s:6:"height";i:261;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 5.6% (1.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:52:"Reduced by 5.7% (2.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>带有随机指针的链表</title>
		<link>http://blog.kongfy.com/2014/06/copy-list-with-random-pointer/%e5%b8%a6%e6%9c%89%e9%9a%8f%e6%9c%ba%e6%8c%87%e9%92%88%e7%9a%84%e9%93%be%e8%a1%a8/</link>
		<pubDate>Sat, 07 Jun 2014 05:22:39 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[带有随机指针的链表]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 13:22:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-07 05:22:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b8%a6%e6%9c%89%e9%9a%8f%e6%9c%ba%e6%8c%87%e9%92%88%e7%9a%84%e9%93%be%e8%a1%a8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/0.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:300;s:6:"height";i:125;s:4:"file";s:13:"2014/06/0.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:5:{s:4:"file";s:13:"0-150x125.png";s:5:"width";i:150;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 18.7% (606.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 26.1% (2.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Step 1</title>
		<link>http://blog.kongfy.com/2014/06/copy-list-with-random-pointer/attachment/1/</link>
		<pubDate>Sat, 07 Jun 2014 05:23:50 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Step 1]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 13:23:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-07 05:23:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:607;s:6:"height";i:149;s:4:"file";s:13:"2014/06/1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:13:"1-150x149.png";s:5:"width";i:150;s:6:"height";i:149;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 15.6% (455.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:12:"1-300x73.png";s:5:"width";i:300;s:6:"height";i:73;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 26.7% (1.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 34.6% (4.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Step 2</title>
		<link>http://blog.kongfy.com/2014/06/copy-list-with-random-pointer/attachment/2/</link>
		<pubDate>Sat, 07 Jun 2014 05:25:02 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Step 2]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 13:25:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-07 05:25:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:607;s:6:"height";i:150;s:4:"file";s:13:"2014/06/2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:13:"2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 19.9% (744.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:12:"2-300x74.png";s:5:"width";i:300;s:6:"height";i:74;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 31.3% (2.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 33.3% (5.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Step3</title>
		<link>http://blog.kongfy.com/2014/06/copy-list-with-random-pointer/attachment/3/</link>
		<pubDate>Sat, 07 Jun 2014 05:25:34 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Step3]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 13:25:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-07 05:25:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:608;s:6:"height";i:127;s:4:"file";s:13:"2014/06/3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:13:"3-150x127.png";s:5:"width";i:150;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.5% (165.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:12:"3-300x62.png";s:5:"width";i:300;s:6:"height";i:62;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 30.6% (1.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 32.2% (4.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>histogram</title>
		<link>http://blog.kongfy.com/2014/06/largest-rectangle-in-histogram/histogram/</link>
		<pubDate>Sat, 07 Jun 2014 15:56:59 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/histogram.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 23:56:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-07 15:56:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[histogram]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>335</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/histogram.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/histogram.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:188;s:6:"height";i:204;s:4:"file";s:21:"2014/06/histogram.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"histogram-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 32.0% (2.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:51:"Reduced by 0.6% (4.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>histogram_area</title>
		<link>http://blog.kongfy.com/2014/06/largest-rectangle-in-histogram/histogram_area/</link>
		<pubDate>Sat, 07 Jun 2014 15:57:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/histogram_area.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 23:57:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-07 15:57:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[histogram_area]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>335</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/histogram_area.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/histogram_area.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:188;s:6:"height";i:204;s:4:"file";s:26:"2014/06/histogram_area.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:5:{s:4:"file";s:26:"histogram_area-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 34.2% (4.9&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 9.1% (141.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FlatManager</title>
		<link>http://blog.kongfy.com/2014/06/openstack%e5%a5%87%e8%91%a9%e9%85%8d%e7%bd%ae%ef%bc%9aflat-network-with-external-dhcp/generic-bridge-config-2/</link>
		<pubDate>Sun, 22 Jun 2014 13:42:15 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/06/generic-bridge-config-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Flat网络模型]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date><![CDATA[2014-06-22 21:42:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 13:42:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generic-bridge-config-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/06/generic-bridge-config-2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/generic-bridge-config-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:255;s:6:"height";i:296;s:4:"file";s:35:"2014/06/generic-bridge-config-2.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:5:{s:4:"file";s:35:"generic-bridge-config-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 37.0% (3.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:54:"Reduced by 10.3% (614.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>10k</title>
		<link>http://blog.kongfy.com/10k/</link>
		<pubDate>Sun, 27 Jul 2014 02:37:54 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/07/10k.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date><![CDATA[2014-07-27 10:37:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-27 02:37:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[10k]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/07/10k.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/10k.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:15:"2014/07/10k.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:15:"10k-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 28.9% (595.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:15:"10k-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 21.0% (1.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 3.0% (313.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EXC_BAD_ACCESS</title>
		<link>http://blog.kongfy.com/2014/08/exc_bad_access-uiscrollview-crash-on-ios7/b3eea236-8c70-4ced-bfa6-6fecd7c1dda5/</link>
		<pubDate>Sat, 23 Aug 2014 02:49:52 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/08/B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date><![CDATA[2014-08-23 10:49:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-23 02:49:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[b3eea236-8c70-4ced-bfa6-6fecd7c1dda5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>387</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/08/B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:650;s:6:"height";i:136;s:4:"file";s:48:"2014/08/B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5-150x136.jpg";s:5:"width";i:150;s:6:"height";i:136;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 14.5% (438.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:47:"B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5-300x62.jpg";s:5:"width";i:300;s:6:"height";i:62;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.7% (341.0&nbsp;B) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5-624x130.jpg";s:5:"width";i:624;s:6:"height";i:130;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.7% (1.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 10.6% (2.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>objc_msgSend</title>
		<link>http://blog.kongfy.com/2014/08/exc_bad_access-uiscrollview-crash-on-ios7/a1f21bb4-2a5e-4386-848c-492a0653a8fa/</link>
		<pubDate>Sat, 23 Aug 2014 03:01:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/08/A1F21BB4-2A5E-4386-848C-492A0653A8FA.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2014-08-23 11:01:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-23 03:01:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a1f21bb4-2a5e-4386-848c-492a0653a8fa]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>387</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/08/A1F21BB4-2A5E-4386-848C-492A0653A8FA.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/A1F21BB4-2A5E-4386-848C-492A0653A8FA.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:291;s:6:"height";i:80;s:4:"file";s:48:"2014/08/A1F21BB4-2A5E-4386-848C-492A0653A8FA.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:5:{s:4:"file";s:47:"A1F21BB4-2A5E-4386-848C-492A0653A8FA-150x80.jpg";s:5:"width";i:150;s:6:"height";i:80;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.4% (507.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:52:"Reduced by 8.7% (1.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zombie</title>
		<link>http://blog.kongfy.com/2014/08/exc_bad_access-uiscrollview-crash-on-ios7/7517bbb0-8a1a-4d00-b8ff-e3fefca15276/</link>
		<pubDate>Sat, 23 Aug 2014 03:17:22 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/08/7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date><![CDATA[2014-08-23 11:17:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-23 03:17:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[7517bbb0-8a1a-4d00-b8ff-e3fefca15276]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>387</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/08/7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:700;s:6:"height";i:475;s:4:"file";s:48:"2014/08/7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.4% (582.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276-300x203.jpg";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.2% (1.1&nbsp;kB) - Previously Optimized";}s:14:"post-thumbnail";a:5:{s:4:"file";s:48:"7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276-624x423.jpg";s:5:"width";i:624;s:6:"height";i:423;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.7% (5.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:20:"ewww_image_optimizer";s:53:"Reduced by 13.4% (9.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>machine learning</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/ce58ce85-71a0-493c-acca-4ebeae917603/</link>
		<pubDate>Sat, 08 Nov 2014 02:44:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/CE58CE85-71A0-493C-ACCA-4EBEAE917603.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Coursera上machine learning课程的图标]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date><![CDATA[2014-11-08 10:44:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-08 02:44:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ce58ce85-71a0-493c-acca-4ebeae917603]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/CE58CE85-71A0-493C-ACCA-4EBEAE917603.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:500;s:6:"height";i:640;s:4:"file";s:48:"2014/11/CE58CE85-71A0-493C-ACCA-4EBEAE917603.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"CE58CE85-71A0-493C-ACCA-4EBEAE917603-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.0% (471.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"CE58CE85-71A0-493C-ACCA-4EBEAE917603-234x300.jpg";s:5:"width";i:234;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.7% (907.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 7.9% (3.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/CE58CE85-71A0-493C-ACCA-4EBEAE917603.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[machine learning]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linear Regression</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/c090daa6-96c6-4517-a650-f4d4eba4a045/</link>
		<pubDate>Sun, 09 Nov 2014 03:25:03 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/C090DAA6-96C6-4517-A650-F4D4EBA4A045.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Linear Regression]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 11:25:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 03:25:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c090daa6-96c6-4517-a650-f4d4eba4a045]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/C090DAA6-96C6-4517-A650-F4D4EBA4A045.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/C090DAA6-96C6-4517-A650-F4D4EBA4A045.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:632;s:6:"height";i:474;s:4:"file";s:48:"2014/11/C090DAA6-96C6-4517-A650-F4D4EBA4A045.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"C090DAA6-96C6-4517-A650-F4D4EBA4A045-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 11.5% (493.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"C090DAA6-96C6-4517-A650-F4D4EBA4A045-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.0% (1.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.5% (5.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Polynomial features</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/d32d48bb-8141-4051-a1db-4465c9054a91/</link>
		<pubDate>Sun, 09 Nov 2014 03:31:20 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/D32D48BB-8141-4051-A1DB-4465C9054A91.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Polynomial features]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 11:31:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 03:31:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[d32d48bb-8141-4051-a1db-4465c9054a91]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/D32D48BB-8141-4051-A1DB-4465C9054A91.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/D32D48BB-8141-4051-A1DB-4465C9054A91.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:629;s:6:"height";i:471;s:4:"file";s:48:"2014/11/D32D48BB-8141-4051-A1DB-4465C9054A91.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"D32D48BB-8141-4051-A1DB-4465C9054A91-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.2% (454.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"D32D48BB-8141-4051-A1DB-4465C9054A91-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 11.6% (942.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 15.9% (5.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gradient descent</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/1a7706dd-2e06-4371-924b-dcd1d4ebb381/</link>
		<pubDate>Sun, 09 Nov 2014 05:24:44 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/1A7706DD-2E06-4371-924B-DCD1D4EBB381.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gradient descent]]></excerpt:encoded>
		<wp:post_id>512</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 13:24:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 05:24:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1a7706dd-2e06-4371-924b-dcd1d4ebb381]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/1A7706DD-2E06-4371-924B-DCD1D4EBB381.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/1A7706DD-2E06-4371-924B-DCD1D4EBB381.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1067;s:6:"height";i:556;s:4:"file";s:48:"2014/11/1A7706DD-2E06-4371-924B-DCD1D4EBB381.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"1A7706DD-2E06-4371-924B-DCD1D4EBB381-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 4.7% (378.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"1A7706DD-2E06-4371-924B-DCD1D4EBB381-300x156.jpg";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 4.9% (605.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"1A7706DD-2E06-4371-924B-DCD1D4EBB381-1024x533.jpg";s:5:"width";i:1024;s:6:"height";i:533;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.3% (7.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 6.7% (10.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gradient descent in linear regression</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/e4d41a4c-f48e-47ef-b9ae-27b29cca51c8/</link>
		<pubDate>Sun, 09 Nov 2014 05:32:08 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gradient descent in linear regression]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 13:32:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 05:32:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[e4d41a4c-f48e-47ef-b9ae-27b29cca51c8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:620;s:6:"height";i:462;s:4:"file";s:48:"2014/11/E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.2% (404.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8-300x223.jpg";s:5:"width";i:300;s:6:"height";i:223;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 3.9% (549.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 5.8% (4.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CF26D801-A17F-4CF8-892C-7A128BDEAD10</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/cf26d801-a17f-4cf8-892c-7a128bdead10/</link>
		<pubDate>Sun, 09 Nov 2014 06:02:32 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/CF26D801-A17F-4CF8-892C-7A128BDEAD10.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Feature scaling]]></excerpt:encoded>
		<wp:post_id>517</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 14:02:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 06:02:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cf26d801-a17f-4cf8-892c-7a128bdead10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/CF26D801-A17F-4CF8-892C-7A128BDEAD10.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/CF26D801-A17F-4CF8-892C-7A128BDEAD10.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1209;s:6:"height";i:574;s:4:"file";s:48:"2014/11/CF26D801-A17F-4CF8-892C-7A128BDEAD10.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"CF26D801-A17F-4CF8-892C-7A128BDEAD10-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.2% (624.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"CF26D801-A17F-4CF8-892C-7A128BDEAD10-300x142.jpg";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.9% (1.3&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"CF26D801-A17F-4CF8-892C-7A128BDEAD10-1024x486.jpg";s:5:"width";i:1024;s:6:"height";i:486;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 11.3% (10.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 12.6% (17.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Feature scaling]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sigmoid function</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/5b807b59-5930-47c7-8341-27d524abba1b/</link>
		<pubDate>Sun, 09 Nov 2014 06:28:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/5B807B59-5930-47C7-8341-27D524ABBA1B.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Sigmoid function]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 14:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 06:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[5b807b59-5930-47c7-8341-27d524abba1b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/5B807B59-5930-47C7-8341-27D524ABBA1B.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/5B807B59-5930-47C7-8341-27D524ABBA1B.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:569;s:6:"height";i:396;s:4:"file";s:48:"2014/11/5B807B59-5930-47C7-8341-27D524ABBA1B.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"5B807B59-5930-47C7-8341-27D524ABBA1B-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 17.5% (854.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"5B807B59-5930-47C7-8341-27D524ABBA1B-300x208.jpg";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 15.8% (1.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 15.7% (4.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Logistic regression</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/291f8223-4629-4d43-bde3-cef9e3e786d3/</link>
		<pubDate>Sun, 09 Nov 2014 07:04:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/291F8223-4629-4D43-BDE3-CEF9E3E786D3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Logistic regression]]></excerpt:encoded>
		<wp:post_id>533</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 15:04:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 07:04:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[291f8223-4629-4d43-bde3-cef9e3e786d3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/291F8223-4629-4D43-BDE3-CEF9E3E786D3.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/291F8223-4629-4D43-BDE3-CEF9E3E786D3.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:629;s:6:"height";i:472;s:4:"file";s:48:"2014/11/291F8223-4629-4D43-BDE3-CEF9E3E786D3.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"291F8223-4629-4D43-BDE3-CEF9E3E786D3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.9% (681.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"291F8223-4629-4D43-BDE3-CEF9E3E786D3-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.7% (1.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.4% (6.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One-vs-all</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/c36e2bad-b94e-4736-a88b-713e41523470/</link>
		<pubDate>Sun, 09 Nov 2014 08:04:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/C36E2BAD-B94E-4736-A88B-713E41523470.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[One-vs-all]]></excerpt:encoded>
		<wp:post_id>539</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 16:04:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 08:04:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c36e2bad-b94e-4736-a88b-713e41523470]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/C36E2BAD-B94E-4736-A88B-713E41523470.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/C36E2BAD-B94E-4736-A88B-713E41523470.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1227;s:6:"height";i:710;s:4:"file";s:48:"2014/11/C36E2BAD-B94E-4736-A88B-713E41523470.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"C36E2BAD-B94E-4736-A88B-713E41523470-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 5.8% (453.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"C36E2BAD-B94E-4736-A88B-713E41523470-300x173.jpg";s:5:"width";i:300;s:6:"height";i:173;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.8% (1.4&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"C36E2BAD-B94E-4736-A88B-713E41523470-1024x592.jpg";s:5:"width";i:1024;s:6:"height";i:592;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 11.7% (10.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 13.2% (18.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bias vs Variance</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/c24570fc-0a66-4f28-bad5-c70bb71f24d0/</link>
		<pubDate>Sun, 09 Nov 2014 09:56:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/C24570FC-0A66-4F28-BAD5-C70BB71F24D0.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Bias vs Variance]]></excerpt:encoded>
		<wp:post_id>547</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 17:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 09:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c24570fc-0a66-4f28-bad5-c70bb71f24d0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/C24570FC-0A66-4F28-BAD5-C70BB71F24D0.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/C24570FC-0A66-4F28-BAD5-C70BB71F24D0.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:622;s:6:"height";i:404;s:4:"file";s:48:"2014/11/C24570FC-0A66-4F28-BAD5-C70BB71F24D0.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"C24570FC-0A66-4F28-BAD5-C70BB71F24D0-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.1% (762.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"C24570FC-0A66-4F28-BAD5-C70BB71F24D0-300x194.jpg";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.3% (1.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 11.9% (6.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neuron model</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/c8dc0939-2233-469b-86b5-dd7779d6bcbf/</link>
		<pubDate>Sun, 09 Nov 2014 12:59:14 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/C8DC0939-2233-469B-86B5-DD7779D6BCBF.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Neuron model]]></excerpt:encoded>
		<wp:post_id>559</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 20:59:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 12:59:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c8dc0939-2233-469b-86b5-dd7779d6bcbf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/C8DC0939-2233-469B-86B5-DD7779D6BCBF.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1201;s:6:"height";i:474;s:4:"file";s:48:"2014/11/C8DC0939-2233-469B-86B5-DD7779D6BCBF.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"C8DC0939-2233-469B-86B5-DD7779D6BCBF-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.1% (555.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"C8DC0939-2233-469B-86B5-DD7779D6BCBF-300x118.jpg";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.5% (924.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"C8DC0939-2233-469B-86B5-DD7779D6BCBF-1024x404.jpg";s:5:"width";i:1024;s:6:"height";i:404;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.0% (7.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 12.6% (11.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/C8DC0939-2233-469B-86B5-DD7779D6BCBF.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neural network</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/6657a266-df61-4f08-937d-6b08528d94a7/</link>
		<pubDate>Sun, 09 Nov 2014 13:10:56 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/6657A266-DF61-4F08-937D-6B08528D94A7.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Neural network]]></excerpt:encoded>
		<wp:post_id>561</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 21:10:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 13:10:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6657a266-df61-4f08-937d-6b08528d94a7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/6657A266-DF61-4F08-937D-6B08528D94A7.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/6657A266-DF61-4F08-937D-6B08528D94A7.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1080;s:6:"height";i:676;s:4:"file";s:48:"2014/11/6657A266-DF61-4F08-937D-6B08528D94A7.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"6657A266-DF61-4F08-937D-6B08528D94A7-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.6% (663.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"6657A266-DF61-4F08-937D-6B08528D94A7-300x187.jpg";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.6% (1.4&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"6657A266-DF61-4F08-937D-6B08528D94A7-1024x640.jpg";s:5:"width";i:1024;s:6:"height";i:640;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 12.0% (11.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 11.8% (15.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DigitalOcean</title>
		<link>http://blog.kongfy.com/2014/11/%e5%b9%bf%e5%91%8a%e6%85%8e%e5%85%a5/logo-digitalocean-1ef0424a297748e3bf744992c123db7b/</link>
		<pubDate>Sun, 09 Nov 2014 14:42:41 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/logo-digitalocean-1ef0424a297748e3bf744992c123db7b.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[DigitalOcean]]></excerpt:encoded>
		<wp:post_id>571</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 22:42:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 14:42:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[logo-digitalocean-1ef0424a297748e3bf744992c123db7b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>569</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/logo-digitalocean-1ef0424a297748e3bf744992c123db7b.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/logo-digitalocean-1ef0424a297748e3bf744992c123db7b.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:600;s:6:"height";i:200;s:4:"file";s:62:"2014/11/logo-digitalocean-1ef0424a297748e3bf744992c123db7b.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:62:"logo-digitalocean-1ef0424a297748e3bf744992c123db7b-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.4% (735.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:62:"logo-digitalocean-1ef0424a297748e3bf744992c123db7b-300x100.jpg";s:5:"width";i:300;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.4% (644.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 4.1% (653.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Backpropagation</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/53c728d0-9321-4acd-8d6f-920fcb720ad8/</link>
		<pubDate>Sun, 09 Nov 2014 16:26:50 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/53C728D0-9321-4ACD-8D6F-920FCB720AD8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Backpropagation]]></excerpt:encoded>
		<wp:post_id>586</wp:post_id>
		<wp:post_date><![CDATA[2014-11-10 00:26:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 16:26:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[53c728d0-9321-4acd-8d6f-920fcb720ad8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/53C728D0-9321-4ACD-8D6F-920FCB720AD8.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/53C728D0-9321-4ACD-8D6F-920FCB720AD8.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1211;s:6:"height";i:693;s:4:"file";s:48:"2014/11/53C728D0-9321-4ACD-8D6F-920FCB720AD8.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"53C728D0-9321-4ACD-8D6F-920FCB720AD8-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.7% (776.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"53C728D0-9321-4ACD-8D6F-920FCB720AD8-300x171.jpg";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.0% (1.6&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"53C728D0-9321-4ACD-8D6F-920FCB720AD8-1024x585.jpg";s:5:"width";i:1024;s:6:"height";i:585;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 12.0% (14.0&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 13.2% (22.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>numbers</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/9888d333-93c6-4833-a31d-7c6dd63eddcf/</link>
		<pubDate>Sun, 09 Nov 2014 16:58:43 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/9888D333-93C6-4833-A31D-7C6DD63EDDCF.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[numbers]]></excerpt:encoded>
		<wp:post_id>592</wp:post_id>
		<wp:post_date><![CDATA[2014-11-10 00:58:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 16:58:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[9888d333-93c6-4833-a31d-7c6dd63eddcf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/9888D333-93C6-4833-A31D-7C6DD63EDDCF.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/9888D333-93C6-4833-A31D-7C6DD63EDDCF.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:420;s:6:"height";i:420;s:4:"file";s:48:"2014/11/9888D333-93C6-4833-A31D-7C6DD63EDDCF.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"9888D333-93C6-4833-A31D-7C6DD63EDDCF-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.9% (1.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"9888D333-93C6-4833-A31D-7C6DD63EDDCF-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 13.5% (4.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 13.7% (9.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neural network model</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/823006ae-89bd-477b-835f-daa7b8d9ec14/</link>
		<pubDate>Sun, 09 Nov 2014 17:00:03 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/823006AE-89BD-477B-835F-DAA7B8D9EC14.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Neural network model]]></excerpt:encoded>
		<wp:post_id>594</wp:post_id>
		<wp:post_date><![CDATA[2014-11-10 01:00:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 17:00:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[823006ae-89bd-477b-835f-daa7b8d9ec14]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/823006AE-89BD-477B-835F-DAA7B8D9EC14.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/823006AE-89BD-477B-835F-DAA7B8D9EC14.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:535;s:6:"height";i:321;s:4:"file";s:48:"2014/11/823006AE-89BD-477B-835F-DAA7B8D9EC14.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"823006AE-89BD-477B-835F-DAA7B8D9EC14-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.6% (566.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"823006AE-89BD-477B-835F-DAA7B8D9EC14-300x179.jpg";s:5:"width";i:300;s:6:"height";i:179;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.3% (1.0&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 9.6% (3.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hidden layer</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/99ba29d7-b7ae-4628-a926-ade03298ffcc/</link>
		<pubDate>Sun, 09 Nov 2014 17:01:34 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/99BA29D7-B7AE-4628-A926-ADE03298FFCC.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Hidden layer]]></excerpt:encoded>
		<wp:post_id>595</wp:post_id>
		<wp:post_date><![CDATA[2014-11-10 01:01:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 17:01:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[99ba29d7-b7ae-4628-a926-ade03298ffcc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/99BA29D7-B7AE-4628-A926-ADE03298FFCC.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/99BA29D7-B7AE-4628-A926-ADE03298FFCC.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:420;s:6:"height";i:420;s:4:"file";s:48:"2014/11/99BA29D7-B7AE-4628-A926-ADE03298FFCC.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"99BA29D7-B7AE-4628-A926-ADE03298FFCC-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.6% (1.2&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"99BA29D7-B7AE-4628-A926-ADE03298FFCC-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.3% (2.9&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 10.0% (6.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data protection</title>
		<link>http://blog.kongfy.com/2014/11/linux%e5%86%85%e6%a0%b8%e5%90%8c%e6%ad%a5/data-protection/</link>
		<pubDate>Thu, 13 Nov 2014 07:53:03 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/data-protection.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Data protection]]></excerpt:encoded>
		<wp:post_id>616</wp:post_id>
		<wp:post_date><![CDATA[2014-11-13 15:53:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-13 07:53:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[data-protection]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>613</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/data-protection.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/data-protection.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:448;s:6:"height";i:316;s:4:"file";s:27:"2014/11/data-protection.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:27:"data-protection-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.7% (494.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:27:"data-protection-300x211.jpg";s:5:"width";i:300;s:6:"height";i:211;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.8% (748.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 7.1% (877.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Support Vector Machine</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/svm_max_sep_hyperplane_with_margin/</link>
		<pubDate>Tue, 18 Nov 2014 11:51:22 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/Svm_max_sep_hyperplane_with_margin.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Support Vector Machine]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 19:51:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 11:51:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[svm_max_sep_hyperplane_with_margin]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/Svm_max_sep_hyperplane_with_margin-e1417223870925.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Svm_max_sep_hyperplane_with_margin-e1417223870925.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:464;s:6:"height";i:500;s:4:"file";s:61:"2014/11/Svm_max_sep_hyperplane_with_margin-e1417223870925.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:46:"Svm_max_sep_hyperplane_with_margin-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 35.0% (2.0&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:46:"Svm_max_sep_hyperplane_with_margin-278x300.png";s:5:"width";i:278;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 33.7% (4.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 35.6% (11.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:9:"full-orig";a:3:{s:5:"width";i:800;s:6:"height";i:862;s:4:"file";s:38:"Svm_max_sep_hyperplane_with_margin.png";}s:18:"full-1417223870925";a:3:{s:5:"width";i:600;s:6:"height";i:647;s:4:"file";s:53:"Svm_max_sep_hyperplane_with_margin-e1417223622441.png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Larger margin</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/69f86ee6-78b5-4620-a038-29d1a22d507d/</link>
		<pubDate>Tue, 18 Nov 2014 13:22:58 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/69F86EE6-78B5-4620-A038-29D1A22D507D.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Larger margin]]></excerpt:encoded>
		<wp:post_id>666</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 21:22:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 13:22:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[69f86ee6-78b5-4620-a038-29d1a22d507d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/69F86EE6-78B5-4620-A038-29D1A22D507D.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/69F86EE6-78B5-4620-A038-29D1A22D507D.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1208;s:6:"height";i:379;s:4:"file";s:48:"2014/11/69F86EE6-78B5-4620-A038-29D1A22D507D.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"69F86EE6-78B5-4620-A038-29D1A22D507D-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.8% (662.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:47:"69F86EE6-78B5-4620-A038-29D1A22D507D-300x94.jpg";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.2% (1.1&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"69F86EE6-78B5-4620-A038-29D1A22D507D-1024x321.jpg";s:5:"width";i:1024;s:6:"height";i:321;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.7% (7.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 11.3% (12.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hinge Loss</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/945126a2-3160-49b1-b4c2-5c9cb6eaa0c9/</link>
		<pubDate>Tue, 18 Nov 2014 13:49:45 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/945126A2-3160-49B1-B4C2-5C9CB6EAA0C9.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Hinge Loss]]></excerpt:encoded>
		<wp:post_id>670</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 21:49:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 13:49:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[945126a2-3160-49b1-b4c2-5c9cb6eaa0c9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/945126A2-3160-49B1-B4C2-5C9CB6EAA0C9.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/945126A2-3160-49B1-B4C2-5C9CB6EAA0C9.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1083;s:6:"height";i:273;s:4:"file";s:48:"2014/11/945126A2-3160-49B1-B4C2-5C9CB6EAA0C9.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"945126A2-3160-49B1-B4C2-5C9CB6EAA0C9-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.2% (459.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:47:"945126A2-3160-49B1-B4C2-5C9CB6EAA0C9-300x75.jpg";s:5:"width";i:300;s:6:"height";i:75;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.1% (494.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"945126A2-3160-49B1-B4C2-5C9CB6EAA0C9-1024x258.jpg";s:5:"width";i:1024;s:6:"height";i:258;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 14.2% (3.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 14.1% (5.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linearity v.s. dimensionality ￼</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/77b83be4-c6a6-4302-aead-ca9b85b3af27/</link>
		<pubDate>Tue, 18 Nov 2014 14:35:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Linearity v.s. dimensionality]]></excerpt:encoded>
		<wp:post_id>674</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 22:35:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 14:35:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[77b83be4-c6a6-4302-aead-ca9b85b3af27]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1038;s:6:"height";i:505;s:4:"file";s:48:"2014/11/77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.0% (468.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27-300x145.jpg";s:5:"width";i:300;s:6:"height";i:145;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.4% (642.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27-1024x498.jpg";s:5:"width";i:1024;s:6:"height";i:498;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.6% (4.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.6% (6.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SVM parameters</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/61fbc408-0cba-441a-917b-361d374ce8b9/</link>
		<pubDate>Tue, 18 Nov 2014 15:07:26 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/61FBC408-0CBA-441A-917B-361D374CE8B9.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[SVM parameters]]></excerpt:encoded>
		<wp:post_id>681</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 23:07:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 15:07:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[61fbc408-0cba-441a-917b-361d374ce8b9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/61FBC408-0CBA-441A-917B-361D374CE8B9.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/61FBC408-0CBA-441A-917B-361D374CE8B9.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1199;s:6:"height";i:662;s:4:"file";s:48:"2014/11/61FBC408-0CBA-441A-917B-361D374CE8B9.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"61FBC408-0CBA-441A-917B-361D374CE8B9-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.7% (772.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"61FBC408-0CBA-441A-917B-361D374CE8B9-300x165.jpg";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.1% (1.6&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"61FBC408-0CBA-441A-917B-361D374CE8B9-1024x565.jpg";s:5:"width";i:1024;s:6:"height";i:565;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 14.1% (12.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 15.7% (19.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Model selection</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/13e72658-771d-489a-9233-17fa9120ae8e/</link>
		<pubDate>Tue, 18 Nov 2014 15:15:39 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/13E72658-771D-489A-9233-17FA9120AE8E.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Model selection]]></excerpt:encoded>
		<wp:post_id>684</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 23:15:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 15:15:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[13e72658-771d-489a-9233-17fa9120ae8e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/13E72658-771D-489A-9233-17FA9120AE8E.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/13E72658-771D-489A-9233-17FA9120AE8E.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1257;s:6:"height";i:621;s:4:"file";s:48:"2014/11/13E72658-771D-489A-9233-17FA9120AE8E.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"13E72658-771D-489A-9233-17FA9120AE8E-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.9% (851.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"13E72658-771D-489A-9233-17FA9120AE8E-300x148.jpg";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.8% (1.8&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"13E72658-771D-489A-9233-17FA9120AE8E-1024x505.jpg";s:5:"width";i:1024;s:6:"height";i:505;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.4% (17.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 14.5% (27.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SVM vs Decision Tree</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/b4e78099-7ade-4c93-86da-537e411f870a/</link>
		<pubDate>Tue, 18 Nov 2014 15:19:02 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/B4E78099-7ADE-4C93-86DA-537E411F870A.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[SVM vs Decision Tree]]></excerpt:encoded>
		<wp:post_id>685</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 23:19:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 15:19:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[b4e78099-7ade-4c93-86da-537e411f870a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/B4E78099-7ADE-4C93-86DA-537E411F870A.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/B4E78099-7ADE-4C93-86DA-537E411F870A.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1152;s:6:"height";i:699;s:4:"file";s:48:"2014/11/B4E78099-7ADE-4C93-86DA-537E411F870A.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"B4E78099-7ADE-4C93-86DA-537E411F870A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.0% (911.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"B4E78099-7ADE-4C93-86DA-537E411F870A-300x182.jpg";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.7% (2.4&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"B4E78099-7ADE-4C93-86DA-537E411F870A-1024x621.jpg";s:5:"width";i:1024;s:6:"height";i:621;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 14.8% (19.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 14.8% (26.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linear Kernel</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/0a148944-9317-4bda-bcb4-591148f131be/</link>
		<pubDate>Tue, 18 Nov 2014 15:36:06 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/0A148944-9317-4BDA-BCB4-591148F131BE.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Linear Kernel]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 23:36:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 15:36:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0a148944-9317-4bda-bcb4-591148f131be]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/0A148944-9317-4BDA-BCB4-591148F131BE.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/0A148944-9317-4BDA-BCB4-591148F131BE.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:630;s:6:"height";i:475;s:4:"file";s:48:"2014/11/0A148944-9317-4BDA-BCB4-591148F131BE.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"0A148944-9317-4BDA-BCB4-591148F131BE-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.4% (504.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"0A148944-9317-4BDA-BCB4-591148F131BE-300x226.jpg";s:5:"width";i:300;s:6:"height";i:226;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.0% (1.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 13.2% (5.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gaussian kernel</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/82396b3f-c2f1-4f64-9da3-cab0c9bf250c/</link>
		<pubDate>Tue, 18 Nov 2014 15:37:40 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gaussian kernel]]></excerpt:encoded>
		<wp:post_id>690</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 23:37:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 15:37:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[82396b3f-c2f1-4f64-9da3-cab0c9bf250c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>648</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:630;s:6:"height";i:474;s:4:"file";s:48:"2014/11/82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.1% (1.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.6% (3.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 11.8% (20.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>K-means</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means/38f1df05cf64ab7434f4fc11760f14e6fda51155/</link>
		<pubDate>Tue, 25 Nov 2014 14:42:32 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/38f1df05cf64ab7434f4fc11760f14e6fda51155.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[K-means]]></excerpt:encoded>
		<wp:post_id>714</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 22:42:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 14:42:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[38f1df05cf64ab7434f4fc11760f14e6fda51155]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>712</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/38f1df05cf64ab7434f4fc11760f14e6fda51155.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/38f1df05cf64ab7434f4fc11760f14e6fda51155.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:561;s:6:"height";i:420;s:4:"file";s:53:"2014/11/38f1df05cf64ab7434f4fc11760f14e6fda51155.jpeg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:53:"38f1df05cf64ab7434f4fc11760f14e6fda51155-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.4% (713.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:53:"38f1df05cf64ab7434f4fc11760f14e6fda51155-300x224.jpeg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 6.8% (1.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 8.0% (5.1&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>K-means algorithm</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means/d4457ea5-dc99-445a-bf5a-b08eb07fb542/</link>
		<pubDate>Tue, 25 Nov 2014 15:05:55 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/D4457EA5-DC99-445A-BF5A-B08EB07FB542.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[K-means algorithm]]></excerpt:encoded>
		<wp:post_id>718</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 23:05:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 15:05:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[d4457ea5-dc99-445a-bf5a-b08eb07fb542]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>712</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/D4457EA5-DC99-445A-BF5A-B08EB07FB542.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/D4457EA5-DC99-445A-BF5A-B08EB07FB542.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1250;s:6:"height";i:662;s:4:"file";s:48:"2014/11/D4457EA5-DC99-445A-BF5A-B08EB07FB542.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"D4457EA5-DC99-445A-BF5A-B08EB07FB542-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.5% (850.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"D4457EA5-DC99-445A-BF5A-B08EB07FB542-300x158.jpg";s:5:"width";i:300;s:6:"height";i:158;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.7% (1.6&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"D4457EA5-DC99-445A-BF5A-B08EB07FB542-1024x542.jpg";s:5:"width";i:1024;s:6:"height";i:542;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.3% (12.7&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"D4457EA5-DC99-445A-BF5A-B08EB07FB542-700x370.jpg";s:5:"width";i:700;s:6:"height";i:370;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.4% (7.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 14.1% (21.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Elbow method</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means/b80ddc6d-623e-47ae-8c77-0565009a0e36/</link>
		<pubDate>Tue, 25 Nov 2014 15:20:26 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/B80DDC6D-623E-47AE-8C77-0565009A0E36.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Elbow method]]></excerpt:encoded>
		<wp:post_id>721</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 23:20:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 15:20:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[b80ddc6d-623e-47ae-8c77-0565009a0e36]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>712</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/B80DDC6D-623E-47AE-8C77-0565009A0E36.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/B80DDC6D-623E-47AE-8C77-0565009A0E36.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1211;s:6:"height";i:591;s:4:"file";s:48:"2014/11/B80DDC6D-623E-47AE-8C77-0565009A0E36.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"B80DDC6D-623E-47AE-8C77-0565009A0E36-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.3% (447.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"B80DDC6D-623E-47AE-8C77-0565009A0E36-300x146.jpg";s:5:"width";i:300;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.5% (800.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"B80DDC6D-623E-47AE-8C77-0565009A0E36-1024x499.jpg";s:5:"width";i:1024;s:6:"height";i:499;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 14.2% (7.3&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"B80DDC6D-623E-47AE-8C77-0565009A0E36-700x341.jpg";s:5:"width";i:700;s:6:"height";i:341;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 13.2% (4.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 16.5% (12.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>centroid</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means/8371cf03-4d3b-4b5c-a328-d3a2f79518a8/</link>
		<pubDate>Tue, 25 Nov 2014 15:28:26 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/8371CF03-4D3B-4B5C-A328-D3A2F79518A8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[centroid]]></excerpt:encoded>
		<wp:post_id>724</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 23:28:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 15:28:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[8371cf03-4d3b-4b5c-a328-d3a2f79518a8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>712</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/8371CF03-4D3B-4B5C-A328-D3A2F79518A8.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/8371CF03-4D3B-4B5C-A328-D3A2F79518A8.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:632;s:6:"height";i:472;s:4:"file";s:48:"2014/11/8371CF03-4D3B-4B5C-A328-D3A2F79518A8.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"8371CF03-4D3B-4B5C-A328-D3A2F79518A8-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.3% (523.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"8371CF03-4D3B-4B5C-A328-D3A2F79518A8-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.5% (1.3&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 11.7% (7.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image compress</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means/f018cad5-5b15-43d9-87f9-1e6e453edebf/</link>
		<pubDate>Tue, 25 Nov 2014 15:36:32 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/F018CAD5-5B15-43D9-87F9-1E6E453EDEBF.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[image compress]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 23:36:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 15:36:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[f018cad5-5b15-43d9-87f9-1e6e453edebf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>712</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/F018CAD5-5B15-43D9-87F9-1E6E453EDEBF.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/F018CAD5-5B15-43D9-87F9-1E6E453EDEBF.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:562;s:6:"height";i:448;s:4:"file";s:48:"2014/11/F018CAD5-5B15-43D9-87F9-1E6E453EDEBF.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"F018CAD5-5B15-43D9-87F9-1E6E453EDEBF-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.3% (853.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"F018CAD5-5B15-43D9-87F9-1E6E453EDEBF-300x239.jpg";s:5:"width";i:300;s:6:"height";i:239;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.4% (1.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 7.4% (5.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Principal Component Analysis</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/fig_pca_principal_component_analysis/</link>
		<pubDate>Thu, 27 Nov 2014 13:51:19 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/fig_pca_principal_component_analysis.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Principal Component Analysis]]></excerpt:encoded>
		<wp:post_id>753</wp:post_id>
		<wp:post_date><![CDATA[2014-11-27 21:51:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-27 13:51:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fig_pca_principal_component_analysis]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/fig_pca_principal_component_analysis.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/fig_pca_principal_component_analysis.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1079;s:6:"height";i:428;s:4:"file";s:48:"2014/11/fig_pca_principal_component_analysis.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"fig_pca_principal_component_analysis-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 31.8% (4.1&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"fig_pca_principal_component_analysis-300x118.png";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 28.5% (6.8&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"fig_pca_principal_component_analysis-1024x406.png";s:5:"width";i:1024;s:6:"height";i:406;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 30.2% (63.1&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"fig_pca_principal_component_analysis-700x277.png";s:5:"width";i:700;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 30.2% (33.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 37.5% (7.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PCA is not linear regression</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/23796b6b-7ece-468a-a1b6-e7efe1adef5b/</link>
		<pubDate>Thu, 27 Nov 2014 15:01:11 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[PCA is not linear regression]]></excerpt:encoded>
		<wp:post_id>759</wp:post_id>
		<wp:post_date><![CDATA[2014-11-27 23:01:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-27 15:01:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[23796b6b-7ece-468a-a1b6-e7efe1adef5b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1170;s:6:"height";i:624;s:4:"file";s:48:"2014/11/23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.9% (515.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B-300x160.jpg";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.3% (881.0&nbsp;B) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B-1024x546.jpg";s:5:"width";i:1024;s:6:"height";i:546;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 15.1% (7.4&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B-700x373.jpg";s:5:"width";i:700;s:6:"height";i:373;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 13.1% (3.9&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 16.6% (11.5&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Principal Component Analysis (PCA) algorithm summary</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/243b08fc-6ffc-4351-a677-5b0fab218904/</link>
		<pubDate>Thu, 27 Nov 2014 15:26:15 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/243B08FC-6FFC-4351-A677-5B0FAB218904.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Principal Component Analysis (PCA) algorithm summary]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date><![CDATA[2014-11-27 23:26:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-27 15:26:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[243b08fc-6ffc-4351-a677-5b0fab218904]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/243B08FC-6FFC-4351-A677-5B0FAB218904.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/243B08FC-6FFC-4351-A677-5B0FAB218904.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1251;s:6:"height";i:477;s:4:"file";s:48:"2014/11/243B08FC-6FFC-4351-A677-5B0FAB218904.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"243B08FC-6FFC-4351-A677-5B0FAB218904-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.0% (1.1&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"243B08FC-6FFC-4351-A677-5B0FAB218904-300x114.jpg";s:5:"width";i:300;s:6:"height";i:114;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.3% (1.4&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"243B08FC-6FFC-4351-A677-5B0FAB218904-1024x390.jpg";s:5:"width";i:1024;s:6:"height";i:390;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 13.2% (11.2&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"243B08FC-6FFC-4351-A677-5B0FAB218904-700x266.jpg";s:5:"width";i:700;s:6:"height";i:266;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.3% (6.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 14.2% (19.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>向量映射</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/5ba0587b-59cf-424a-b530-f3225356aa1a/</link>
		<pubDate>Fri, 28 Nov 2014 01:33:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/5BA0587B-59CF-424A-B530-F3225356AA1A.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[向量映射]]></excerpt:encoded>
		<wp:post_id>773</wp:post_id>
		<wp:post_date><![CDATA[2014-11-28 09:33:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-28 01:33:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[5ba0587b-59cf-424a-b530-f3225356aa1a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/5BA0587B-59CF-424A-B530-F3225356AA1A.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/5BA0587B-59CF-424A-B530-F3225356AA1A.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1156;s:6:"height";i:670;s:4:"file";s:48:"2014/11/5BA0587B-59CF-424A-B530-F3225356AA1A.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"5BA0587B-59CF-424A-B530-F3225356AA1A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.6% (570.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"5BA0587B-59CF-424A-B530-F3225356AA1A-300x173.jpg";s:5:"width";i:300;s:6:"height";i:173;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.5% (1.3&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"5BA0587B-59CF-424A-B530-F3225356AA1A-1024x593.jpg";s:5:"width";i:1024;s:6:"height";i:593;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 12.5% (9.4&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"5BA0587B-59CF-424A-B530-F3225356AA1A-700x405.jpg";s:5:"width";i:700;s:6:"height";i:405;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.6% (5.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 14.3% (15.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dimensionality Reduction</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/0514d0cd-212f-4cfb-9465-b0eb6dbc25bb/</link>
		<pubDate>Fri, 28 Nov 2014 02:57:25 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/0514D0CD-212F-4CFB-9465-B0EB6DBC25BB.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Dimensionality Reduction]]></excerpt:encoded>
		<wp:post_id>784</wp:post_id>
		<wp:post_date><![CDATA[2014-11-28 10:57:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-28 02:57:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0514d0cd-212f-4cfb-9465-b0eb6dbc25bb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/0514D0CD-212F-4CFB-9465-B0EB6DBC25BB.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/0514D0CD-212F-4CFB-9465-B0EB6DBC25BB.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:474;s:6:"height";i:474;s:4:"file";s:48:"2014/11/0514D0CD-212F-4CFB-9465-B0EB6DBC25BB.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"0514D0CD-212F-4CFB-9465-B0EB6DBC25BB-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.3% (500.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"0514D0CD-212F-4CFB-9465-B0EB6DBC25BB-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.6% (1.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 12.8% (4.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Original faces</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/90b96a4b-3abb-45dc-9307-1f238d58478a/</link>
		<pubDate>Fri, 28 Nov 2014 03:05:04 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/90B96A4B-3ABB-45DC-9307-1F238D58478A.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Original faces]]></excerpt:encoded>
		<wp:post_id>786</wp:post_id>
		<wp:post_date><![CDATA[2014-11-28 11:05:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-28 03:05:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[90b96a4b-3abb-45dc-9307-1f238d58478a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/90B96A4B-3ABB-45DC-9307-1F238D58478A.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/90B96A4B-3ABB-45DC-9307-1F238D58478A.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:420;s:6:"height";i:435;s:4:"file";s:48:"2014/11/90B96A4B-3ABB-45DC-9307-1F238D58478A.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"90B96A4B-3ABB-45DC-9307-1F238D58478A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.6% (1.5&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"90B96A4B-3ABB-45DC-9307-1F238D58478A-289x300.jpg";s:5:"width";i:289;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.9% (4.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 11.1% (8.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recovered faces</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/628c5ae5-306b-4d09-9d84-db5bac487ddf/</link>
		<pubDate>Fri, 28 Nov 2014 03:07:54 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/628C5AE5-306B-4D09-9D84-DB5BAC487DDF.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Recovered faces]]></excerpt:encoded>
		<wp:post_id>787</wp:post_id>
		<wp:post_date><![CDATA[2014-11-28 11:07:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-28 03:07:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[628c5ae5-306b-4d09-9d84-db5bac487ddf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>750</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/628C5AE5-306B-4D09-9D84-DB5BAC487DDF.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/628C5AE5-306B-4D09-9D84-DB5BAC487DDF.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:420;s:6:"height";i:435;s:4:"file";s:48:"2014/11/628C5AE5-306B-4D09-9D84-DB5BAC487DDF.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"628C5AE5-306B-4D09-9D84-DB5BAC487DDF-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.7% (1.1&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"628C5AE5-306B-4D09-9D84-DB5BAC487DDF-289x300.jpg";s:5:"width";i:289;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.6% (2.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 10.3% (5.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twisted book</title>
		<link>http://blog.kongfy.com/2014/11/twisted%e5%92%8creactor%e6%a8%a1%e5%bc%8f/518wm5u3tjl/</link>
		<pubDate>Sun, 30 Nov 2014 06:39:38 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/518wm5u3TjL.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Twisted book]]></excerpt:encoded>
		<wp:post_id>817</wp:post_id>
		<wp:post_date><![CDATA[2014-11-30 14:39:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-30 06:39:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[518wm5u3tjl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>609</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/518wm5u3TjL.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/518wm5u3TjL.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:379;s:6:"height";i:500;s:4:"file";s:23:"2014/11/518wm5u3TjL.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"518wm5u3TjL-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.5% (1.2&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:23:"518wm5u3TjL-227x300.jpg";s:5:"width";i:227;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.9% (2.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 10.9% (5.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Event model</title>
		<link>http://blog.kongfy.com/2014/11/twisted%e5%92%8creactor%e6%a8%a1%e5%bc%8f/event_model/</link>
		<pubDate>Sun, 30 Nov 2014 12:50:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/event_model.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Event model]]></excerpt:encoded>
		<wp:post_id>825</wp:post_id>
		<wp:post_date><![CDATA[2014-11-30 20:50:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-30 12:50:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[event_model]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>609</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/event_model.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/event_model.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:524;s:6:"height";i:364;s:4:"file";s:23:"2014/11/event_model.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"event_model-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 60.7% (10.8&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:23:"event_model-300x208.png";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 71.1% (21.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 61.4% (17.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Factory and Protocol</title>
		<link>http://blog.kongfy.com/2014/11/twisted%e5%92%8creactor%e6%a8%a1%e5%bc%8f/protocols-1/</link>
		<pubDate>Sun, 30 Nov 2014 13:19:37 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/protocols-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Factory and Protocol]]></excerpt:encoded>
		<wp:post_id>829</wp:post_id>
		<wp:post_date><![CDATA[2014-11-30 21:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-30 13:19:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[protocols-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>609</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/protocols-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/protocols-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:474;s:6:"height";i:352;s:4:"file";s:23:"2014/11/protocols-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"protocols-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 57.5% (7.8&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:23:"protocols-1-300x222.png";s:5:"width";i:300;s:6:"height";i:222;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 57.0% (16.4&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deferred process</title>
		<link>http://blog.kongfy.com/2014/11/twisted%e5%92%8creactor%e6%a8%a1%e5%bc%8f/deferred-process/</link>
		<pubDate>Sun, 30 Nov 2014 14:52:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/11/deferred-process.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Deferred process]]></excerpt:encoded>
		<wp:post_id>834</wp:post_id>
		<wp:post_date><![CDATA[2014-11-30 22:52:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-30 14:52:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[deferred-process]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>609</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/11/deferred-process.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/deferred-process.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:240;s:6:"height";i:382;s:4:"file";s:28:"2014/11/deferred-process.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"deferred-process-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 40.0% (4.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"deferred-process-188x300.png";s:5:"width";i:188;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 33.5% (11.0&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 18.2% (1.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gaussion distribution</title>
		<link>http://blog.kongfy.com/2014/12/machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b/empirical_rule/</link>
		<pubDate>Sat, 06 Dec 2014 12:40:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/12/Empirical_Rule.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gaussion distribution]]></excerpt:encoded>
		<wp:post_id>849</wp:post_id>
		<wp:post_date><![CDATA[2014-12-06 20:40:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-06 12:40:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[empirical_rule]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/12/Empirical_Rule.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/Empirical_Rule.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:769;s:6:"height";i:558;s:4:"file";s:26:"2014/12/Empirical_Rule.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:26:"Empirical_Rule-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 60.4% (8.3&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:26:"Empirical_Rule-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 69.9% (23.5&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:26:"Empirical_Rule-700x507.png";s:5:"width";i:700;s:6:"height";i:507;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 56.1% (92.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 56.8% (16.9&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Multivariate Gaussian</title>
		<link>http://blog.kongfy.com/2014/12/machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b/28ebdc63-ca44-48bf-a28d-fb2550412262/</link>
		<pubDate>Sat, 06 Dec 2014 13:31:36 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/12/28EBDC63-CA44-48BF-A28D-FB2550412262.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Multivariate Gaussian]]></excerpt:encoded>
		<wp:post_id>866</wp:post_id>
		<wp:post_date><![CDATA[2014-12-06 21:31:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-06 13:31:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[28ebdc63-ca44-48bf-a28d-fb2550412262]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/12/28EBDC63-CA44-48BF-A28D-FB2550412262.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/28EBDC63-CA44-48BF-A28D-FB2550412262.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1261;s:6:"height";i:665;s:4:"file";s:48:"2014/12/28EBDC63-CA44-48BF-A28D-FB2550412262.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"28EBDC63-CA44-48BF-A28D-FB2550412262-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.0% (904.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"28EBDC63-CA44-48BF-A28D-FB2550412262-300x158.jpg";s:5:"width";i:300;s:6:"height";i:158;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.6% (1.9&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"28EBDC63-CA44-48BF-A28D-FB2550412262-1024x540.jpg";s:5:"width";i:1024;s:6:"height";i:540;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 12.9% (16.3&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"28EBDC63-CA44-48BF-A28D-FB2550412262-700x369.jpg";s:5:"width";i:700;s:6:"height";i:369;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.9% (8.9&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 13.9% (26.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Non-gaussian features</title>
		<link>http://blog.kongfy.com/2014/12/machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b/b16ae4ec-b5aa-42c6-bee5-36f531a056c4/</link>
		<pubDate>Sat, 06 Dec 2014 13:34:40 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/12/B16AE4EC-B5AA-42C6-BEE5-36F531A056C4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Non-gaussian features]]></excerpt:encoded>
		<wp:post_id>867</wp:post_id>
		<wp:post_date><![CDATA[2014-12-06 21:34:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-06 13:34:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[b16ae4ec-b5aa-42c6-bee5-36f531a056c4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/12/B16AE4EC-B5AA-42C6-BEE5-36F531A056C4.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/B16AE4EC-B5AA-42C6-BEE5-36F531A056C4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1222;s:6:"height";i:666;s:4:"file";s:48:"2014/12/B16AE4EC-B5AA-42C6-BEE5-36F531A056C4.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"B16AE4EC-B5AA-42C6-BEE5-36F531A056C4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.7% (769.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"B16AE4EC-B5AA-42C6-BEE5-36F531A056C4-300x163.jpg";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 7.9% (1.3&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"B16AE4EC-B5AA-42C6-BEE5-36F531A056C4-1024x558.jpg";s:5:"width";i:1024;s:6:"height";i:558;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.9% (9.3&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"B16AE4EC-B5AA-42C6-BEE5-36F531A056C4-700x381.jpg";s:5:"width";i:700;s:6:"height";i:381;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.9% (5.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 11.7% (15.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gaussian distribution contours</title>
		<link>http://blog.kongfy.com/2014/12/machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b/66e71180-425a-49bb-be66-754319028dec/</link>
		<pubDate>Sat, 06 Dec 2014 13:47:25 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/12/66E71180-425A-49BB-BE66-754319028DEC.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gaussian distribution contours]]></excerpt:encoded>
		<wp:post_id>869</wp:post_id>
		<wp:post_date><![CDATA[2014-12-06 21:47:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-06 13:47:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[66e71180-425a-49bb-be66-754319028dec]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/12/66E71180-425A-49BB-BE66-754319028DEC.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/66E71180-425A-49BB-BE66-754319028DEC.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:628;s:6:"height";i:475;s:4:"file";s:48:"2014/12/66E71180-425A-49BB-BE66-754319028DEC.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"66E71180-425A-49BB-BE66-754319028DEC-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 8.3% (450.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"66E71180-425A-49BB-BE66-754319028DEC-300x226.jpg";s:5:"width";i:300;s:6:"height";i:226;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.9% (991.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 9.7% (4.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Trading off precision and recall</title>
		<link>http://blog.kongfy.com/2014/12/machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b/92c2e408-20cb-4026-89da-60a6e29b6190/</link>
		<pubDate>Sat, 06 Dec 2014 16:04:27 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2014/12/92C2E408-20CB-4026-89DA-60A6E29B6190.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Trading off precision and recall]]></excerpt:encoded>
		<wp:post_id>884</wp:post_id>
		<wp:post_date><![CDATA[2014-12-07 00:04:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-06 16:04:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[92c2e408-20cb-4026-89da-60a6e29b6190]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2014/12/92C2E408-20CB-4026-89DA-60A6E29B6190.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/92C2E408-20CB-4026-89DA-60A6E29B6190.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1247;s:6:"height";i:694;s:4:"file";s:48:"2014/12/92C2E408-20CB-4026-89DA-60A6E29B6190.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"92C2E408-20CB-4026-89DA-60A6E29B6190-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.8% (832.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"92C2E408-20CB-4026-89DA-60A6E29B6190-300x166.jpg";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.9% (2.0&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:49:"92C2E408-20CB-4026-89DA-60A6E29B6190-1024x569.jpg";s:5:"width";i:1024;s:6:"height";i:569;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 12.7% (15.8&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"92C2E408-20CB-4026-89DA-60A6E29B6190-700x389.jpg";s:5:"width";i:700;s:6:"height";i:389;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 11.9% (9.0&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 13.9% (26.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kargerMinCut</title>
		<link>http://blog.kongfy.com/2015/02/kargermincut/kargermincut/</link>
		<pubDate>Sat, 07 Feb 2015 10:33:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/02/kargerMinCut.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>902</wp:post_id>
		<wp:post_date><![CDATA[2015-02-07 18:33:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-07 10:33:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kargermincut]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>899</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/02/kargerMinCut.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/kargerMinCut.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Min-Cut</title>
		<link>http://blog.kongfy.com/2015/02/kargermincut/kargers-algorithm-3/</link>
		<pubDate>Sat, 07 Feb 2015 11:09:41 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Cut in an undirected graph]]></excerpt:encoded>
		<wp:post_id>912</wp:post_id>
		<wp:post_date><![CDATA[2015-02-07 19:09:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-07 11:09:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kargers-algorithm-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>899</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/kargers-algorithm-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:550;s:6:"height";i:326;s:4:"file";s:31:"2015/02/kargers-algorithm-3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:31:"kargers-algorithm-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 31.6% (9.7&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:31:"kargers-algorithm-3-300x178.png";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 33.1% (18.9&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 34.3% (25.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kargers-algorithm-4</title>
		<link>http://blog.kongfy.com/2015/02/kargermincut/kargers-algorithm-4/</link>
		<pubDate>Sat, 07 Feb 2015 11:48:43 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Contraction]]></excerpt:encoded>
		<wp:post_id>930</wp:post_id>
		<wp:post_date><![CDATA[2015-02-07 19:48:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-07 11:48:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kargers-algorithm-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>899</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/kargers-algorithm-4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:601;s:6:"height";i:179;s:4:"file";s:31:"2015/02/kargers-algorithm-4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:31:"kargers-algorithm-4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 31.2% (5.0&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:30:"kargers-algorithm-4-300x89.png";s:5:"width";i:300;s:6:"height";i:89;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 25.8% (5.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 33.0% (10.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>遍历顺序</title>
		<link>http://blog.kongfy.com/2015/03/%e6%9c%89%e5%90%91%e5%9b%be%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af%ef%bc%9akosarajus-algorithm/9a6fef4e-fd08-4af3-89bc-398920c58bab/</link>
		<pubDate>Mon, 16 Mar 2015 03:04:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/9A6FEF4E-FD08-4AF3-89BC-398920C58BAB.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[遍历顺序]]></excerpt:encoded>
		<wp:post_id>961</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 11:04:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 03:04:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[9a6fef4e-fd08-4af3-89bc-398920c58bab]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>941</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/9A6FEF4E-FD08-4AF3-89BC-398920C58BAB.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/9A6FEF4E-FD08-4AF3-89BC-398920C58BAB.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:536;s:6:"height";i:210;s:4:"file";s:48:"2015/03/9A6FEF4E-FD08-4AF3-89BC-398920C58BAB.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"9A6FEF4E-FD08-4AF3-89BC-398920C58BAB-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.5% (447.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"9A6FEF4E-FD08-4AF3-89BC-398920C58BAB-300x118.jpg";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.4% (533.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 8.2% (2.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exampl  e execution of the strongly connected components algorithm.</title>
		<link>http://blog.kongfy.com/2015/03/%e6%9c%89%e5%90%91%e5%9b%be%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af%ef%bc%9akosarajus-algorithm/b0842d09-98c3-4f8c-b551-315cbac0874e/</link>
		<pubDate>Mon, 16 Mar 2015 03:06:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/B0842D09-98C3-4F8C-B551-315CBAC0874E.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Exampl  e execution of the strongly connected components algorithm.]]></excerpt:encoded>
		<wp:post_id>963</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 11:06:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 03:06:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[b0842d09-98c3-4f8c-b551-315cbac0874e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>941</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/B0842D09-98C3-4F8C-B551-315CBAC0874E.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/B0842D09-98C3-4F8C-B551-315CBAC0874E.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:843;s:6:"height";i:191;s:4:"file";s:48:"2015/03/B0842D09-98C3-4F8C-B551-315CBAC0874E.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"B0842D09-98C3-4F8C-B551-315CBAC0874E-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.9% (411.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:47:"B0842D09-98C3-4F8C-B551-315CBAC0874E-300x68.jpg";s:5:"width";i:300;s:6:"height";i:68;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.4% (404.0&nbsp;B) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"B0842D09-98C3-4F8C-B551-315CBAC0874E-700x159.jpg";s:5:"width";i:700;s:6:"height";i:159;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.2% (1.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:52:"Reduced by 8.4% (3.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>调度器的运行队列结构</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/0_13322504982k3y/</link>
		<pubDate>Wed, 18 Mar 2015 05:41:24 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322504982k3y.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[调度器的运行队列结构]]></excerpt:encoded>
		<wp:post_id>976</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 13:41:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 05:41:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0_13322504982k3y]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>970</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322504982k3y.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/0_13322504982k3y.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:511;s:6:"height";i:298;s:4:"file";s:28:"2015/03/0_13322504982k3y.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"0_13322504982k3y-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:51:"Reduced by 0.0% (2.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"0_13322504982k3y-300x175.gif";s:5:"width";i:300;s:6:"height";i:175;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RSDL的次轮询过程</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/0_133225068296b9/</link>
		<pubDate>Wed, 18 Mar 2015 05:43:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/0_133225068296B9.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[RSDL的次轮询过程]]></excerpt:encoded>
		<wp:post_id>977</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 13:43:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 05:43:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0_133225068296b9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>970</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/0_133225068296B9.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/0_133225068296B9.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:310;s:4:"file";s:28:"2015/03/0_133225068296B9.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"0_133225068296B9-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"0_133225068296B9-300x182.gif";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 11.2% (680.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>时间片用完时的处理</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/0_13322508185z4s/</link>
		<pubDate>Wed, 18 Mar 2015 05:43:55 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322508185z4S.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[时间片用完时的处理]]></excerpt:encoded>
		<wp:post_id>978</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 13:43:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 05:43:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0_13322508185z4s]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>970</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322508185z4S.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/0_13322508185z4S.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:572;s:6:"height";i:295;s:4:"file";s:28:"2015/03/0_13322508185z4S.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"0_13322508185z4S-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"0_13322508185z4S-300x155.gif";s:5:"width";i:300;s:6:"height";i:155;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:51:"Reduced by 0.0% (6.0&nbsp;B) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一个红黑树示例</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/0_1332250922mh8o/</link>
		<pubDate>Wed, 18 Mar 2015 05:44:52 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332250922MH8O.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[一个红黑树示例]]></excerpt:encoded>
		<wp:post_id>979</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 13:44:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 05:44:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0_1332250922mh8o]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>970</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332250922MH8O.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/0_1332250922MH8O.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:459;s:6:"height";i:293;s:4:"file";s:28:"2015/03/0_1332250922MH8O.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"0_1332250922MH8O-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"0_1332250922MH8O-300x192.gif";s:5:"width";i:300;s:6:"height";i:192;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:51:"Reduced by 0.0% (1.0&nbsp;B) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>进程调度的数据结构层次</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/0_1332251079lea5/</link>
		<pubDate>Wed, 18 Mar 2015 05:46:31 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332251079LeA5.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[进程调度的数据结构层次]]></excerpt:encoded>
		<wp:post_id>980</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 13:46:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 05:46:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0_1332251079lea5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>970</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332251079LeA5.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/0_1332251079LeA5.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:538;s:6:"height";i:435;s:4:"file";s:28:"2015/03/0_1332251079LeA5.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"0_1332251079LeA5-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"0_1332251079LeA5-300x243.gif";s:5:"width";i:300;s:6:"height";i:243;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>调度类图形视图</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/0_13322512519q6o/</link>
		<pubDate>Wed, 18 Mar 2015 05:48:41 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322512519q6O.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[调度类图形视图]]></excerpt:encoded>
		<wp:post_id>981</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 13:48:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 05:48:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[0_13322512519q6o]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>970</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322512519q6O.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/0_13322512519q6O.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:572;s:6:"height";i:225;s:4:"file";s:28:"2015/03/0_13322512519q6O.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"0_13322512519q6O-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:28:"0_13322512519q6O-300x118.gif";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;一团糟&quot; - 我对OpenStack网络实现的第一感觉</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/img_5155/</link>
		<pubDate>Mon, 11 May 2015 13:18:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/IMG_5155.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA["一团糟" - 我对OpenStack网络实现的第一感觉]]></excerpt:encoded>
		<wp:post_id>1150</wp:post_id>
		<wp:post_date><![CDATA[2015-05-11 21:18:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-11 13:18:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5155]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/IMG_5155.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:20:"2015/05/IMG_5155.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"IMG_5155-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.0% (1.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:20:"IMG_5155-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.6% (4.0&nbsp;kB) - Previously Optimized";}s:5:"large";a:5:{s:4:"file";s:21:"IMG_5155-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 12.8% (40.8&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:20:"IMG_5155-700x525.jpg";s:5:"width";i:700;s:6:"height";i:525;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.8% (16.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";d:3.20000000000000017763568394002504646778106689453125;s:6:"credit";s:0:"";s:6:"camera";s:21:"Canon PowerShot S2 IS";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1255621258;s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"9.9";s:3:"iso";i:0;s:13:"shutter_speed";s:17:"0.016666666666667";s:5:"title";s:0:"";s:11:"orientation";i:1;}s:20:"ewww_image_optimizer";s:52:"Reduced by 3.7% (9.7&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/IMG_5155.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>不考虑物理机边界时的Neutron网络实现</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/logical-network/</link>
		<pubDate>Tue, 12 May 2015 01:41:37 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/logical-network.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[不考虑物理机边界时的Neutron网络实现]]></excerpt:encoded>
		<wp:post_id>1179</wp:post_id>
		<wp:post_date><![CDATA[2015-05-12 09:41:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 01:41:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[logical-network]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/logical-network.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/logical-network.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:599;s:6:"height";i:512;s:4:"file";s:27:"2015/05/logical-network.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:27:"logical-network-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 20.9% (3.8&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:27:"logical-network-300x256.png";s:5:"width";i:300;s:6:"height";i:256;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 18.3% (4.8&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 32.5% (21.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neutron抽象网络概念</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/concepts/</link>
		<pubDate>Tue, 12 May 2015 02:27:12 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/concepts.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Neutron抽象网络概念]]></excerpt:encoded>
		<wp:post_id>1183</wp:post_id>
		<wp:post_date><![CDATA[2015-05-12 10:27:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 02:27:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[concepts]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/concepts.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/concepts.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:814;s:6:"height";i:317;s:4:"file";s:20:"2015/05/concepts.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"concepts-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 36.6% (5.5&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:20:"concepts-300x117.png";s:5:"width";i:300;s:6:"height";i:117;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 39.1% (9.3&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:20:"concepts-700x273.png";s:5:"width";i:700;s:6:"height";i:273;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 36.5% (36.7&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 33.0% (10.4&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neutron插件结构</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/modules/</link>
		<pubDate>Tue, 12 May 2015 03:06:07 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/modules.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Neutron插件结构]]></excerpt:encoded>
		<wp:post_id>1186</wp:post_id>
		<wp:post_date><![CDATA[2015-05-12 11:06:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 03:06:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[modules]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/modules.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/modules.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:918;s:6:"height";i:328;s:4:"file";s:19:"2015/05/modules.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"modules-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 32.3% (4.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:19:"modules-300x107.png";s:5:"width";i:300;s:6:"height";i:107;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 31.7% (6.3&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:19:"modules-700x250.png";s:5:"width";i:700;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 36.9% (39.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 40.2% (11.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenStack集群标准网络部署图</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/d7f8423f-d72a-40eb-bc4a-756866317992/</link>
		<pubDate>Tue, 12 May 2015 14:37:31 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/D7F8423F-D72A-40EB-BC4A-756866317992.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[OpenStack集群标准网络部署图]]></excerpt:encoded>
		<wp:post_id>1197</wp:post_id>
		<wp:post_date><![CDATA[2015-05-12 22:37:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 14:37:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[d7f8423f-d72a-40eb-bc4a-756866317992]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/D7F8423F-D72A-40EB-BC4A-756866317992.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:778;s:6:"height";i:569;s:4:"file";s:48:"2015/05/D7F8423F-D72A-40EB-BC4A-756866317992.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"D7F8423F-D72A-40EB-BC4A-756866317992-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 20.4% (3.9&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"D7F8423F-D72A-40EB-BC4A-756866317992-300x219.png";s:5:"width";i:300;s:6:"height";i:219;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 23.7% (11.8&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"D7F8423F-D72A-40EB-BC4A-756866317992-700x512.png";s:5:"width";i:700;s:6:"height";i:512;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 24.5% (52.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:33:"No savings - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/D7F8423F-D72A-40EB-BC4A-756866317992.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VLAN模式网络</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/network-2/</link>
		<pubDate>Tue, 12 May 2015 15:13:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/network-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[VLAN模式网络]]></excerpt:encoded>
		<wp:post_id>1202</wp:post_id>
		<wp:post_date><![CDATA[2015-05-12 23:13:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 15:13:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[network-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/network-2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/network-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:781;s:6:"height";i:579;s:4:"file";s:21:"2015/05/network-2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"network-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 24.3% (4.8&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:21:"network-2-300x222.png";s:5:"width";i:300;s:6:"height";i:222;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 27.5% (13.4&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:21:"network-2-700x519.png";s:5:"width";i:700;s:6:"height";i:519;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 31.2% (67.5&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 30.9% (27.1&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GRE模式网络</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/network-3/</link>
		<pubDate>Tue, 12 May 2015 16:10:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/network-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[GRE模式网络]]></excerpt:encoded>
		<wp:post_id>1207</wp:post_id>
		<wp:post_date><![CDATA[2015-05-13 00:10:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 16:10:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[network-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/network-3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/network-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:781;s:6:"height";i:573;s:4:"file";s:21:"2015/05/network-3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"network-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 25.7% (5.0&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:21:"network-3-300x220.png";s:5:"width";i:300;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 28.4% (13.5&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:21:"network-3-700x514.png";s:5:"width";i:700;s:6:"height";i:514;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 30.7% (65.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 33.3% (27.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>demo虚拟网络拓扑</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/8b56059d-567d-4c06-8753-f075c00ee3cb/</link>
		<pubDate>Wed, 13 May 2015 07:09:02 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/8B56059D-567D-4C06-8753-F075C00EE3CB.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[demo虚拟网络拓扑]]></excerpt:encoded>
		<wp:post_id>1221</wp:post_id>
		<wp:post_date><![CDATA[2015-05-13 15:09:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-13 07:09:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[8b56059d-567d-4c06-8753-f075c00ee3cb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/8B56059D-567D-4C06-8753-F075C00EE3CB.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/8B56059D-567D-4C06-8753-F075C00EE3CB.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:898;s:6:"height";i:534;s:4:"file";s:48:"2015/05/8B56059D-567D-4C06-8753-F075C00EE3CB.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"8B56059D-567D-4C06-8753-F075C00EE3CB-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:54:"Reduced by 10.6% (548.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"8B56059D-567D-4C06-8753-F075C00EE3CB-300x178.jpg";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 9.1% (930.0&nbsp;B) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:48:"8B56059D-567D-4C06-8753-F075C00EE3CB-700x416.jpg";s:5:"width";i:700;s:6:"height";i:416;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 13.0% (4.1&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 15.8% (9.3&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“多余”的网桥？</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/33112565-ce51-4895-b067-652bce4832a6/</link>
		<pubDate>Wed, 13 May 2015 12:54:34 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/33112565-CE51-4895-B067-652BCE4832A6.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[“多余”的网桥？]]></excerpt:encoded>
		<wp:post_id>1240</wp:post_id>
		<wp:post_date><![CDATA[2015-05-13 20:54:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-13 12:54:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[33112565-ce51-4895-b067-652bce4832a6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/33112565-CE51-4895-B067-652BCE4832A6.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/33112565-CE51-4895-B067-652BCE4832A6.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:697;s:6:"height";i:469;s:4:"file";s:48:"2015/05/33112565-CE51-4895-B067-652BCE4832A6.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"33112565-CE51-4895-B067-652BCE4832A6-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 8.9% (1.1&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:48:"33112565-CE51-4895-B067-652BCE4832A6-300x202.jpg";s:5:"width";i:300;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:52:"Reduced by 9.5% (2.6&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 13.0% (15.6&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenStack的负载均衡模型</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/lbaas1/</link>
		<pubDate>Wed, 13 May 2015 15:24:09 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[OpenStack的负载均衡模型]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date><![CDATA[2015-05-13 23:24:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-13 15:24:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lbaas1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:757;s:6:"height";i:382;s:4:"file";s:18:"2015/05/lbaas1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:18:"lbaas1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 29.2% (5.4&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:18:"lbaas1-300x151.png";s:5:"width";i:300;s:6:"height";i:151;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 25.2% (7.8&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:18:"lbaas1-700x353.png";s:5:"width";i:700;s:6:"height";i:353;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 28.7% (39.0&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 15.0% (7.8&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/lbaas1.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>负载均衡网络示意图</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/lbaas2/</link>
		<pubDate>Wed, 13 May 2015 15:32:29 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[负载均衡网络示意图]]></excerpt:encoded>
		<wp:post_id>1252</wp:post_id>
		<wp:post_date><![CDATA[2015-05-13 23:32:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-13 15:32:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lbaas2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/lbaas2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:865;s:6:"height";i:463;s:4:"file";s:18:"2015/05/lbaas2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:18:"lbaas2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 17.4% (2.5&nbsp;kB) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:18:"lbaas2-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:53:"Reduced by 21.5% (6.0&nbsp;kB) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:18:"lbaas2-700x375.png";s:5:"width";i:700;s:6:"height";i:375;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:54:"Reduced by 25.3% (30.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:54:"Reduced by 16.3% (11.2&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SciPy</title>
		<link>http://blog.kongfy.com/2015/06/hello-scipy/scipy/</link>
		<pubDate>Mon, 22 Jun 2015 08:12:10 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/06/scipy.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[SciPy]]></content:encoded>
		<excerpt:encoded><![CDATA[SciPy]]></excerpt:encoded>
		<wp:post_id>1281</wp:post_id>
		<wp:post_date><![CDATA[2015-06-22 16:12:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-22 08:12:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scipy]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1278</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/06/scipy.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:818;s:6:"height";i:269;s:4:"file";s:17:"2015/06/scipy.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:17:"scipy-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 6.9% (415.0&nbsp;B) - Previously Optimized";}s:6:"medium";a:5:{s:4:"file";s:16:"scipy-300x99.jpg";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 7.3% (688.0&nbsp;B) - Previously Optimized";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:17:"scipy-700x230.jpg";s:5:"width";i:700;s:6:"height";i:230;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:53:"Reduced by 10.1% (3.2&nbsp;kB) - Previously Optimized";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:53:"Reduced by 10.7% (6.0&nbsp;kB) - Previously Optimized";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/scipy.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux网络API</title>
		<link>http://blog.kongfy.com/2015/07/%e5%85%b3%e4%ba%8elinux%e7%8e%af%e5%a2%83cc%e7%bd%91%e7%bb%9c%e6%a1%86%e6%9e%b6%e7%9a%84%e4%b8%80%e7%82%b9%e6%80%9d%e8%80%83/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9/</link>
		<pubDate>Sat, 18 Jul 2015 07:58:10 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/07/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Linux网络API]]></excerpt:encoded>
		<wp:post_id>1298</wp:post_id>
		<wp:post_date><![CDATA[2015-07-18 15:58:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-18 07:58:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1292</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/07/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:690;s:6:"height";i:462;s:4:"file";s:72:"2015/07/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:72:"showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 7.2% (428.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:72:"showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9-300x201.jpg";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:32:"Reduced by 7.2% (1,010.0&nbsp;B)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:10:"No savings";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TCP发送接收过程图</title>
		<link>http://blog.kongfy.com/2015/07/tcp-maximum-segment-size-mss/ipov-fig88-epsi/</link>
		<pubDate>Sun, 19 Jul 2015 07:27:08 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/07/ipov.fig88.epsi_.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[TCP发送接收过程图]]></excerpt:encoded>
		<wp:post_id>1311</wp:post_id>
		<wp:post_date><![CDATA[2015-07-19 15:27:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-19 07:27:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ipov-fig88-epsi]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/07/ipov.fig88.epsi_.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/ipov.fig88.epsi_.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:495;s:6:"height";i:353;s:4:"file";s:28:"2015/07/ipov.fig88.epsi_.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"ipov.fig88.epsi_-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:28:"Reduced by 0.0% (1.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:28:"ipov.fig88.epsi_-300x214.gif";s:5:"width";i:300;s:6:"height";i:214;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:10:"No savings";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:29:"Reduced by 0.1% (19.0&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>示例代码UML图</title>
		<link>http://blog.kongfy.com/2015/08/%e6%8e%a2%e7%b4%a2c%e8%99%9a%e5%87%bd%e6%95%b0%e5%9c%a8g%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0/derivedclass/</link>
		<pubDate>Mon, 03 Aug 2015 13:54:32 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/08/derivedclass.png</guid>
		<description></description>
		<content:encoded><![CDATA[示例代码UML图]]></content:encoded>
		<excerpt:encoded><![CDATA[示例代码UML图]]></excerpt:encoded>
		<wp:post_id>1328</wp:post_id>
		<wp:post_date><![CDATA[2015-08-03 21:54:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-03 13:54:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[derivedclass]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1325</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/08/derivedclass.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:310;s:6:"height";i:193;s:4:"file";s:24:"2015/08/derivedclass.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:24:"derivedclass-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 58.3% (7.6&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:24:"derivedclass-300x187.png";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 55.0% (12.0&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 59.1% (4.1&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/derivedclass.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vptr和vtbl</title>
		<link>http://blog.kongfy.com/2015/08/%e6%8e%a2%e7%b4%a2c%e8%99%9a%e5%87%bd%e6%95%b0%e5%9c%a8g%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0/vtbl/</link>
		<pubDate>Mon, 03 Aug 2015 14:44:40 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/08/vtbl.png</guid>
		<description></description>
		<content:encoded><![CDATA[vptr和vtbl]]></content:encoded>
		<excerpt:encoded><![CDATA[vptr和vtbl]]></excerpt:encoded>
		<wp:post_id>1336</wp:post_id>
		<wp:post_date><![CDATA[2015-08-03 22:44:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-03 14:44:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vtbl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1325</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/08/vtbl.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/vtbl.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:490;s:6:"height";i:463;s:4:"file";s:16:"2015/08/vtbl.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:16:"vtbl-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 34.4% (4.3&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:16:"vtbl-300x283.png";s:5:"width";i:300;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 30.8% (10.4&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 30.3% (6.3&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>虚函数在虚拟存储器中的位置</title>
		<link>http://blog.kongfy.com/2015/08/%e6%8e%a2%e7%b4%a2c%e8%99%9a%e5%87%bd%e6%95%b0%e5%9c%a8g%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0/processmem/</link>
		<pubDate>Mon, 03 Aug 2015 15:50:56 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/08/processmem.png</guid>
		<description></description>
		<content:encoded><![CDATA[虚函数在虚拟存储器中的位置]]></content:encoded>
		<excerpt:encoded><![CDATA[虚函数在虚拟存储器中的位置]]></excerpt:encoded>
		<wp:post_id>1348</wp:post_id>
		<wp:post_date><![CDATA[2015-08-03 23:50:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-03 15:50:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[processmem]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1325</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/08/processmem.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/processmem.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:329;s:6:"height";i:733;s:4:"file";s:22:"2015/08/processmem.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:22:"processmem-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 32.2% (5.4&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:22:"processmem-135x300.png";s:5:"width";i:135;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 32.0% (9.6&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:22:"processmem-314x700.png";s:5:"width";i:314;s:6:"height";i:700;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 34.0% (44.7&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:31:"Reduced by 24.7% (10.8&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>“无敌”的C++</title>
		<link>http://blog.kongfy.com/2015/08/%e6%8e%a2%e7%b4%a2c%e8%99%9a%e5%87%bd%e6%95%b0%e5%9c%a8g%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0/cppvsc/</link>
		<pubDate>Mon, 03 Aug 2015 16:14:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/08/CPPvsC.png</guid>
		<description></description>
		<content:encoded><![CDATA[“无敌”的C++]]></content:encoded>
		<excerpt:encoded><![CDATA[“无敌”的C++]]></excerpt:encoded>
		<wp:post_id>1353</wp:post_id>
		<wp:post_date><![CDATA[2015-08-04 00:14:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-03 16:14:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cppvsc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1325</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/08/CPPvsC.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/CPPvsC.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:586;s:6:"height";i:314;s:4:"file";s:18:"2015/08/CPPvsC.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:18:"CPPvsC-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:29:"Reduced by 7.7% (1.8&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:18:"CPPvsC-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:29:"Reduced by 8.1% (3.8&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:31:"Reduced by 12.3% (15.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[“无敌”的C++]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CompareAlgs</title>
		<link>http://blog.kongfy.com/2015/09/%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d%e7%9a%84%e5%90%8e%e7%bc%80%e7%ae%97%e6%b3%95/comparealgs/</link>
		<pubDate>Tue, 08 Sep 2015 04:37:38 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/09/CompareAlgs.gif</guid>
		<description></description>
		<content:encoded><![CDATA[算法性能对比]]></content:encoded>
		<excerpt:encoded><![CDATA[算法性能对比]]></excerpt:encoded>
		<wp:post_id>1417</wp:post_id>
		<wp:post_date><![CDATA[2015-09-08 12:37:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-08 04:37:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[comparealgs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1414</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/09/CompareAlgs.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/CompareAlgs.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:496;s:6:"height";i:532;s:4:"file";s:23:"2015/09/CompareAlgs.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"CompareAlgs-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:10:"No savings";}s:6:"medium";a:5:{s:4:"file";s:23:"CompareAlgs-280x300.gif";s:5:"width";i:280;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";s:20:"ewww_image_optimizer";s:28:"Reduced by 0.0% (3.0&nbsp;B)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:28:"Reduced by 0.0% (2.0&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[算法性能对比]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>石头-剪子-布</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/matching-pennies/</link>
		<pubDate>Sat, 10 Oct 2015 03:06:16 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/matching-pennies.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[石头-剪子-布]]></content:encoded>
		<excerpt:encoded><![CDATA[石头-剪子-布]]></excerpt:encoded>
		<wp:post_id>1446</wp:post_id>
		<wp:post_date><![CDATA[2015-10-10 11:06:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-10 03:06:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[matching-pennies]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/matching-pennies.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/matching-pennies.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:550;s:6:"height";i:322;s:4:"file";s:28:"2015/10/matching-pennies.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:28:"matching-pennies-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 15.4% (984.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:28:"matching-pennies-300x176.jpg";s:5:"width";i:300;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 14.2% (1.6&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 17.2% (5.2&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>点球“大战”</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/penalty-kicks/</link>
		<pubDate>Sat, 10 Oct 2015 03:09:53 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[点球“大战”]]></content:encoded>
		<excerpt:encoded><![CDATA[点球“大战”]]></excerpt:encoded>
		<wp:post_id>1448</wp:post_id>
		<wp:post_date><![CDATA[2015-10-10 11:09:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-10 03:09:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[penalty-kicks]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/penalty-kicks.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:530;s:6:"height";i:155;s:4:"file";s:25:"2015/10/penalty-kicks.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:25:"penalty-kicks-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 13.9% (961.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:24:"penalty-kicks-300x88.jpg";s:5:"width";i:300;s:6:"height";i:88;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 13.0% (1.3&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 14.4% (4.5&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[点球“大战”]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据对比</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/penalty-kicks-data/</link>
		<pubDate>Sat, 10 Oct 2015 03:11:46 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-data.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[数据对比]]></content:encoded>
		<excerpt:encoded><![CDATA[数据对比]]></excerpt:encoded>
		<wp:post_id>1450</wp:post_id>
		<wp:post_date><![CDATA[2015-10-10 11:11:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-10 03:11:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[penalty-kicks-data]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-data.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/penalty-kicks-data.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:711;s:6:"height";i:182;s:4:"file";s:30:"2015/10/penalty-kicks-data.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:30:"penalty-kicks-data-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 12.9% (1.1&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:29:"penalty-kicks-data-300x77.jpg";s:5:"width";i:300;s:6:"height";i:77;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 12.4% (1.3&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:30:"penalty-kicks-data-700x179.jpg";s:5:"width";i:700;s:6:"height";i:179;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 15.5% (5.3&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 15.6% (6.8&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[数据对比]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>求解纳什均衡</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/penalty-kicks-solve/</link>
		<pubDate>Sat, 10 Oct 2015 03:12:20 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-solve.png</guid>
		<description></description>
		<content:encoded><![CDATA[求解纳什均衡]]></content:encoded>
		<excerpt:encoded><![CDATA[求解纳什均衡]]></excerpt:encoded>
		<wp:post_id>1451</wp:post_id>
		<wp:post_date><![CDATA[2015-10-10 11:12:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-10 03:12:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[penalty-kicks-solve]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-solve.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/penalty-kicks-solve.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:846;s:6:"height";i:461;s:4:"file";s:31:"2015/10/penalty-kicks-solve.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:31:"penalty-kicks-solve-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 23.8% (5.9&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:31:"penalty-kicks-solve-300x163.png";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 22.5% (9.2&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:31:"penalty-kicks-solve-700x381.png";s:5:"width";i:700;s:6:"height";i:381;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 27.5% (52.1&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:31:"Reduced by 47.6% (37.2&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[求解纳什均衡]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>真实的博弈</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/842972-14349115-640-360/</link>
		<pubDate>Sat, 10 Oct 2015 03:20:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/842972-14349115-640-360.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[真实的博弈]]></content:encoded>
		<excerpt:encoded><![CDATA[真实的博弈]]></excerpt:encoded>
		<wp:post_id>1454</wp:post_id>
		<wp:post_date><![CDATA[2015-10-10 11:20:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-10 03:20:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[842972-14349115-640-360]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/842972-14349115-640-360.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/842972-14349115-640-360.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:360;s:4:"file";s:35:"2015/10/842972-14349115-640-360.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:35:"842972-14349115-640-360-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 8.3% (968.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:35:"842972-14349115-640-360-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:29:"Reduced by 8.4% (2.0&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:10:"No savings";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[真实的博弈]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>还是囚徒困境</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0%ef%bc%9a%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83%e5%92%8c%e9%87%8d%e5%a4%8d%e5%8d%9a%e5%bc%88/pd/</link>
		<pubDate>Tue, 27 Oct 2015 09:17:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/pd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[还是囚徒困境]]></content:encoded>
		<excerpt:encoded><![CDATA[还是囚徒困境]]></excerpt:encoded>
		<wp:post_id>1470</wp:post_id>
		<wp:post_date><![CDATA[2015-10-27 17:17:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-27 09:17:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1465</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/pd.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/pd.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:300;s:6:"height";i:200;s:4:"file";s:14:"2015/10/pd.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:14:"pd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 14.8% (1.1&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:14:"pd-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 17.6% (2.2&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 11.7% (2.3&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[还是囚徒困境]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>又是囚徒困境</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0%ef%bc%9a%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83%e5%92%8c%e9%87%8d%e5%a4%8d%e5%8d%9a%e5%bc%88/pd2/</link>
		<pubDate>Tue, 27 Oct 2015 09:19:23 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/pd2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[又是囚徒困境]]></content:encoded>
		<excerpt:encoded><![CDATA[又是囚徒困境]]></excerpt:encoded>
		<wp:post_id>1471</wp:post_id>
		<wp:post_date><![CDATA[2015-10-27 17:19:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-27 09:19:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pd2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1465</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/pd2.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/pd2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:300;s:6:"height";i:256;s:4:"file";s:15:"2015/10/pd2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:15:"pd2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 15.3% (720.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:15:"pd2-300x256.jpg";s:5:"width";i:300;s:6:"height";i:256;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 17.8% (1.5&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 10.2% (1.6&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[又是囚徒困境]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>囚徒困境</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0%ef%bc%9a%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83%e5%92%8c%e9%87%8d%e5%a4%8d%e5%8d%9a%e5%bc%88/pd3/</link>
		<pubDate>Tue, 27 Oct 2015 09:23:20 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/pd3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[囚徒困境]]></content:encoded>
		<excerpt:encoded><![CDATA[囚徒困境]]></excerpt:encoded>
		<wp:post_id>1473</wp:post_id>
		<wp:post_date><![CDATA[2015-10-27 17:23:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-27 09:23:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pd3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1465</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/pd3.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/pd3.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:330;s:6:"height";i:240;s:4:"file";s:15:"2015/10/pd3.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:15:"pd3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 17.4% (816.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:15:"pd3-300x218.jpg";s:5:"width";i:300;s:6:"height";i:218;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 16.2% (1.4&nbsp;kB)";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}s:20:"ewww_image_optimizer";s:30:"Reduced by 11.3% (1.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[囚徒困境]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>囚徒困境</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0%ef%bc%9a%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83%e5%92%8c%e9%87%8d%e5%a4%8d%e5%8d%9a%e5%bc%88/8245423564_0efd54b09c_b/</link>
		<pubDate>Thu, 17 Dec 2015 09:54:52 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/10/8245423564_0efd54b09c_b.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[囚徒困境]]></content:encoded>
		<excerpt:encoded><![CDATA[囚徒困境]]></excerpt:encoded>
		<wp:post_id>1486</wp:post_id>
		<wp:post_date><![CDATA[2015-12-17 17:54:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-17 09:54:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[8245423564_0efd54b09c_b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1465</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/10/8245423564_0efd54b09c_b.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:35:"2015/10/8245423564_0efd54b09c_b.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:35:"8245423564_0efd54b09c_b-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 10.3% (1.4&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:35:"8245423564_0efd54b09c_b-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 10.5% (3.2&nbsp;kB)";}s:12:"medium_large";a:5:{s:4:"file";s:35:"8245423564_0efd54b09c_b-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 10.4% (11.5&nbsp;kB)";}s:5:"large";a:5:{s:4:"file";s:36:"8245423564_0efd54b09c_b-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 10.0% (16.9&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:35:"8245423564_0efd54b09c_b-700x525.jpg";s:5:"width";i:700;s:6:"height";i:525;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 10.2% (9.9&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:30:"Reduced by 5.0% (13.7&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/8245423564_0efd54b09c_b.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[囚徒困境]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>favicon</title>
		<link>http://blog.kongfy.com/favicon/</link>
		<pubDate>Sat, 19 Dec 2015 12:54:18 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2015/12/favicon.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1489</wp:post_id>
		<wp:post_date><![CDATA[2015-12-19 20:54:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-19 12:54:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[favicon]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2015/12/favicon.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:16;s:6:"height";i:16;s:4:"file";s:19:"2015/12/favicon.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 76.9% (422.0&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/favicon.gif]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分布式共识问题</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/consensus/</link>
		<pubDate>Wed, 25 May 2016 10:39:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/consensus.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[分布式共识问题]]></content:encoded>
		<excerpt:encoded><![CDATA[分布式共识问题]]></excerpt:encoded>
		<wp:post_id>1508</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[consensus]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/consensus.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[分布式共识问题]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/consensus.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:654;s:6:"height";i:305;s:4:"file";s:21:"2016/05/consensus.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"consensus-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 17.7% (510.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:21:"consensus-300x140.jpg";s:5:"width";i:300;s:6:"height";i:140;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 9.7% (676.0&nbsp;B)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 30.2% (10.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>高可用“单点”的集中式架构</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/leader_election/</link>
		<pubDate>Wed, 25 May 2016 10:41:01 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/leader_election.png</guid>
		<description></description>
		<content:encoded><![CDATA[高可用“单点”的集中式架构]]></content:encoded>
		<excerpt:encoded><![CDATA[高可用“单点”的集中式架构]]></excerpt:encoded>
		<wp:post_id>1509</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:41:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:41:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[leader_election]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/leader_election.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/leader_election.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:606;s:6:"height";i:541;s:4:"file";s:27:"2016/05/leader_election.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:27:"leader_election-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 35.2% (5.8&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:27:"leader_election-300x268.png";s:5:"width";i:300;s:6:"height";i:268;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 35.6% (17.0&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 38.5% (16.2&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[高可用“单点”的集中式架构]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>多副本状态机</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/rsm/</link>
		<pubDate>Wed, 25 May 2016 10:42:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/RSM.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[多副本状态机]]></content:encoded>
		<excerpt:encoded><![CDATA[多副本状态机]]></excerpt:encoded>
		<wp:post_id>1510</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:42:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:42:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rsm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/RSM.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/RSM.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:485;s:6:"height";i:268;s:4:"file";s:15:"2016/05/RSM.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:15:"RSM-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 10.5% (903.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:15:"RSM-300x166.jpg";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 10.8% (1.4&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 29.0% (12.1&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[多副本状态机]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vr</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/vr/</link>
		<pubDate>Wed, 25 May 2016 10:46:03 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/vr.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[VR正常执行流程]]></content:encoded>
		<excerpt:encoded><![CDATA[VR正常执行流程]]></excerpt:encoded>
		<wp:post_id>1512</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:46:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:46:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vr]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/vr.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/vr.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:715;s:6:"height";i:411;s:4:"file";s:14:"2016/05/vr.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:14:"vr-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 11.2% (627.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:14:"vr-300x172.jpg";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 10.7% (1.0&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:14:"vr-700x402.jpg";s:5:"width";i:700;s:6:"height";i:402;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 15.2% (4.5&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 28.2% (14.0&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[VR正常执行流程]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Raft中的log</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/raft1/</link>
		<pubDate>Wed, 25 May 2016 10:49:08 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/raft1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[Raft中的log]]></content:encoded>
		<excerpt:encoded><![CDATA[Raft中的log]]></excerpt:encoded>
		<wp:post_id>1514</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:49:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:49:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[raft1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/raft1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/raft1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:480;s:6:"height";i:468;s:4:"file";s:17:"2016/05/raft1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:17:"raft1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 7.2% (626.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:17:"raft1-300x293.jpg";s:5:"width";i:300;s:6:"height";i:293;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:29:"Reduced by 8.9% (2.2&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 21.0% (16.3&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Raft中的log]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>log不一致</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/raft2/</link>
		<pubDate>Wed, 25 May 2016 10:50:37 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/raft2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[log不一致]]></content:encoded>
		<excerpt:encoded><![CDATA[log不一致]]></excerpt:encoded>
		<wp:post_id>1515</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:50:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:50:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[raft2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/raft2.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/raft2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:500;s:6:"height";i:561;s:4:"file";s:17:"2016/05/raft2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:17:"raft2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 7.8% (782.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:17:"raft2-267x300.jpg";s:5:"width";i:267;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:29:"Reduced by 8.2% (2.3&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 17.9% (21.2&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[log不一致]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Raft中旧term日志覆盖问题</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/raft3/</link>
		<pubDate>Wed, 25 May 2016 10:54:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/raft3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[Raft中旧term日志覆盖问题]]></content:encoded>
		<excerpt:encoded><![CDATA[Raft中旧term日志覆盖问题]]></excerpt:encoded>
		<wp:post_id>1516</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:54:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:54:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[raft3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/raft3.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/raft3.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:494;s:6:"height";i:588;s:4:"file";s:17:"2016/05/raft3.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:17:"raft3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 8.2% (920.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:17:"raft3-252x300.jpg";s:5:"width";i:252;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:29:"Reduced by 8.1% (2.5&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 16.7% (23.8&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Raft中旧term日志覆盖问题]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Raft中的Safety保证</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/raft4/</link>
		<pubDate>Wed, 25 May 2016 10:56:46 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/raft4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[Raft中的Safety保证]]></content:encoded>
		<excerpt:encoded><![CDATA[Raft中的Safety保证]]></excerpt:encoded>
		<wp:post_id>1517</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 18:56:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 10:56:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[raft4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/raft4.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/raft4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:511;s:6:"height";i:448;s:4:"file";s:17:"2016/05/raft4.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:17:"raft4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 9.5% (962.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:17:"raft4-300x263.jpg";s:5:"width";i:300;s:6:"height";i:263;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 10.1% (2.8&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 18.9% (19.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Raft中的Safety保证]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>达成共识</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/committee-meeting/</link>
		<pubDate>Wed, 25 May 2016 11:01:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/05/committee-meeting.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[达成共识]]></content:encoded>
		<excerpt:encoded><![CDATA[达成共识]]></excerpt:encoded>
		<wp:post_id>1519</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 19:01:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 11:01:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[committee-meeting]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/05/committee-meeting.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/committee-meeting.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:747;s:6:"height";i:514;s:4:"file";s:29:"2016/05/committee-meeting.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:29:"committee-meeting-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 7.7% (516.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:29:"committee-meeting-300x206.jpg";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:32:"Reduced by 8.9% (1,002.0&nbsp;B)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:29:"committee-meeting-700x482.jpg";s:5:"width";i:700;s:6:"height";i:482;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:30:"Reduced by 13.9% (4.8&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 27.9% (23.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[达成共识]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;Consistency&quot; Not Found</title>
		<link>http://blog.kongfy.com/2016/08/%e8%a2%ab%e8%af%af%e7%94%a8%e7%9a%84%e4%b8%80%e8%87%b4%e6%80%a7/c5db82c2-3e8f-4e45-9728-9aeedb582eec/</link>
		<pubDate>Sat, 06 Aug 2016 12:36:48 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/08/C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC.jpg</guid>
		<description></description>
		<content:encoded><![CDATA["Consistency" Not Found]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1549</wp:post_id>
		<wp:post_date><![CDATA[2016-08-06 20:36:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-06 12:36:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c5db82c2-3e8f-4e45-9728-9aeedb582eec]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1546</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/08/C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:510;s:6:"height";i:259;s:4:"file";s:48:"2016/08/C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:48:"C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 20.0% (580.0&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:48:"C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC-300x152.jpg";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:10:"image/jpeg";s:20:"ewww_image_optimizer";s:31:"Reduced by 14.9% (704.0&nbsp;B)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:30:"Reduced by 34.6% (5.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA["Consistency" Not Found]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分布式系统</title>
		<link>http://blog.kongfy.com/2016/08/%e8%a2%ab%e8%af%af%e7%94%a8%e7%9a%84%e4%b8%80%e8%87%b4%e6%80%a7/%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f/</link>
		<pubDate>Sat, 06 Aug 2016 12:37:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/08/分布式系统.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1550</wp:post_id>
		<wp:post_date><![CDATA[2016-08-06 20:37:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-06 12:37:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1546</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/08/分布式系统.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/分布式系统.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分布式系统知识梳理</title>
		<link>http://blog.kongfy.com/2016/08/%e8%a2%ab%e8%af%af%e7%94%a8%e7%9a%84%e4%b8%80%e8%87%b4%e6%80%a7/%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f-2/</link>
		<pubDate>Sat, 06 Aug 2016 12:38:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/08/分布式系统.png</guid>
		<description></description>
		<content:encoded><![CDATA[分布式系统知识梳理]]></content:encoded>
		<excerpt:encoded><![CDATA[分布式系统知识梳理]]></excerpt:encoded>
		<wp:post_id>1551</wp:post_id>
		<wp:post_date><![CDATA[2016-08-06 20:38:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-06 12:38:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1546</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/08/分布式系统.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/分布式系统.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2381;s:6:"height";i:2077;s:4:"file";s:27:"2016/08/分布式系统.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:27:"分布式系统-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}s:6:"medium";a:5:{s:4:"file";s:27:"分布式系统-300x262.png";s:5:"width";i:300;s:6:"height";i:262;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}s:12:"medium_large";a:5:{s:4:"file";s:27:"分布式系统-768x670.png";s:5:"width";i:768;s:6:"height";i:670;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}s:5:"large";a:5:{s:4:"file";s:28:"分布式系统-1024x893.png";s:5:"width";i:1024;s:6:"height";i:893;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:27:"分布式系统-700x611.png";s:5:"width";i:700;s:6:"height";i:611;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";N;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[分布式系统知识梳理]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/perf3_9/</link>
		<pubDate>Mon, 17 Oct 2016 15:40:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/perf3_9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1565</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:40:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:40:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[perf3_9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/perf3_9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/perf3_9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:553;s:6:"height";i:485;s:4:"file";s:19:"2016/10/perf3_9.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"perf3_9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 24.4% (5.5&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:19:"perf3_9-300x263.png";s:5:"width";i:300;s:6:"height";i:263;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 22.7% (14.8&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:10:"No savings";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/perf14_5/</link>
		<pubDate>Mon, 17 Oct 2016 15:41:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/perf14_5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1567</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:41:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:41:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[perf14_5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/perf14_5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/perf14_5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:750;s:6:"height";i:270;s:4:"file";s:20:"2016/10/perf14_5.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"perf14_5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 35.7% (2.1&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:20:"perf14_5-300x108.png";s:5:"width";i:300;s:6:"height";i:108;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 21.0% (1.4&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:20:"perf14_5-700x252.png";s:5:"width";i:700;s:6:"height";i:252;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 29.7% (12.3&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:30:"Reduced by 34.8% (8.5&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/perfc_4/</link>
		<pubDate>Mon, 17 Oct 2016 15:43:45 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1570</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:43:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:43:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[perfc_4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/perfc_4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:523;s:6:"height";i:495;s:4:"file";s:19:"2016/10/perfc_4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"perfc_4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 39.7% (3.6&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:19:"perfc_4-300x284.png";s:5:"width";i:300;s:6:"height";i:284;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 34.4% (14.6&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 35.4% (11.6&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/perfc_6/</link>
		<pubDate>Mon, 17 Oct 2016 15:44:19 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1571</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:44:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:44:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[perfc_6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/perfc_6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:601;s:6:"height";i:529;s:4:"file";s:19:"2016/10/perfc_6.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"perfc_6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 29.1% (3.5&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:19:"perfc_6-300x264.png";s:5:"width";i:300;s:6:"height";i:264;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 30.5% (10.8&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 33.6% (13.0&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/perfc_7/</link>
		<pubDate>Mon, 17 Oct 2016 15:44:46 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1572</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:44:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:44:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[perfc_7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/perfc_7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:595;s:6:"height";i:614;s:4:"file";s:19:"2016/10/perfc_7.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"perfc_7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 27.4% (3.1&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:19:"perfc_7-291x300.png";s:5:"width";i:291;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 29.8% (12.9&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 33.9% (16.9&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/perfc_5/</link>
		<pubDate>Mon, 17 Oct 2016 15:45:18 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1573</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:45:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:45:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[perfc_5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/perfc_5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:467;s:6:"height";i:709;s:4:"file";s:19:"2016/10/perfc_5.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"perfc_5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 25.3% (6.4&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:19:"perfc_5-198x300.png";s:5:"width";i:198;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 24.7% (13.5&nbsp;kB)";}s:36:"independent_publisher_post_thumbnail";a:5:{s:4:"file";s:19:"perfc_5-461x700.png";s:5:"width";i:461;s:6:"height";i:700;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 23.4% (56.0&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 41.0% (49.6&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>slreorder</title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/slreorder/</link>
		<pubDate>Mon, 17 Oct 2016 15:45:39 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1574</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:45:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:45:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[slreorder]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/slreorder.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:319;s:6:"height";i:134;s:4:"file";s:21:"2016/10/slreorder.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:21:"slreorder-150x134.png";s:5:"width";i:150;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 63.6% (2.4&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:21:"slreorder-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 56.0% (11.2&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";N;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>slreorder2</title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/slreorder2/</link>
		<pubDate>Mon, 17 Oct 2016 15:46:07 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1575</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:46:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:46:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[slreorder2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/slreorder2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:459;s:6:"height";i:182;s:4:"file";s:22:"2016/10/slreorder2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:22:"slreorder2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 35.3% (4.1&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:22:"slreorder2-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 43.8% (8.0&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:30:"Reduced by 41.3% (5.3&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>false_share</title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/false_share/</link>
		<pubDate>Mon, 17 Oct 2016 15:50:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/false_share.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1577</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:50:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:50:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[false_share]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/false_share.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/false_share.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:532;s:6:"height";i:444;s:4:"file";s:23:"2016/10/false_share.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:23:"false_share-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:30:"Reduced by 32.8% (3.4&nbsp;kB)";}s:6:"medium";a:5:{s:4:"file";s:23:"false_share-300x250.png";s:5:"width";i:300;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:30:"Reduced by 42.4% (8.6&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/mesi-2/</link>
		<pubDate>Mon, 17 Oct 2016 15:57:40 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2016/10/mesi-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1580</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:57:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:57:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mesi-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1558</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2016/10/mesi-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/mesi-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:552;s:6:"height";i:447;s:4:"file";s:18:"2016/10/mesi-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:18:"mesi-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";N;}s:6:"medium";a:5:{s:4:"file";s:18:"mesi-1-300x243.png";s:5:"width";i:300;s:6:"height";i:243;s:9:"mime-type";s:9:"image/png";s:20:"ewww_image_optimizer";s:31:"Reduced by 25.8% (11.2&nbsp;kB)";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:20:"ewww_image_optimizer";s:31:"Reduced by 31.1% (18.2&nbsp;kB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tiket lock racing</title>
		<link>http://blog.kongfy.com/2017/01/%e7%94%a8%e6%88%b7%e6%80%81%e5%90%8c%e6%ad%a5%e4%b9%8b%e8%87%aa%e6%97%8b%e9%94%81/tiket/</link>
		<pubDate>Fri, 27 Jan 2017 15:48:30 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2017/01/tiket.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[tiket lock racing]]></excerpt:encoded>
		<wp:post_id>1618</wp:post_id>
		<wp:post_date><![CDATA[2017-01-27 23:48:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-27 15:48:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tiket]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1616</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2017/01/tiket.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/tiket.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:969;s:6:"height";i:353;s:4:"file";s:17:"2017/01/tiket.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"tiket-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"tiket-300x109.png";s:5:"width";i:300;s:6:"height";i:109;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"tiket-768x280.png";s:5:"width";i:768;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:17:"tiket-700x255.png";s:5:"width";i:700;s:6:"height";i:255;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[tiket lock racing]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>list based queue lock</title>
		<link>http://blog.kongfy.com/2017/01/%e7%94%a8%e6%88%b7%e6%80%81%e5%90%8c%e6%ad%a5%e4%b9%8b%e8%87%aa%e6%97%8b%e9%94%81/list_queue_lock/</link>
		<pubDate>Fri, 27 Jan 2017 15:50:27 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2017/01/list_queue_lock.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[list based queue lock]]></excerpt:encoded>
		<wp:post_id>1619</wp:post_id>
		<wp:post_date><![CDATA[2017-01-27 23:50:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-27 15:50:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[list_queue_lock]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1616</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2017/01/list_queue_lock.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/list_queue_lock.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:777;s:6:"height";i:314;s:4:"file";s:27:"2017/01/list_queue_lock.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"list_queue_lock-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"list_queue_lock-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"list_queue_lock-768x310.png";s:5:"width";i:768;s:6:"height";i:310;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:27:"list_queue_lock-700x283.png";s:5:"width";i:700;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[list based queue lock]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hp</title>
		<link>http://blog.kongfy.com/2017/02/hazard-pointer/hp/</link>
		<pubDate>Wed, 22 Feb 2017 13:19:55 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2017/02/hp.png</guid>
		<description></description>
		<content:encoded><![CDATA[hazard pointer]]></content:encoded>
		<excerpt:encoded><![CDATA[hazard pointer]]></excerpt:encoded>
		<wp:post_id>1646</wp:post_id>
		<wp:post_date><![CDATA[2017-02-22 21:19:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-22 13:19:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1645</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2017/02/hp.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/hp.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:541;s:6:"height";i:487;s:4:"file";s:14:"2017/02/hp.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"hp-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:14:"hp-300x270.png";s:5:"width";i:300;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[hazard pointer]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SeqLock时序示意</title>
		<link>http://blog.kongfy.com/2017/04/%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%e7%89%9b%e5%88%80%e5%b0%8f%e8%af%95%ef%bc%9aseqlock/seqlock1/</link>
		<pubDate>Tue, 18 Apr 2017 02:52:23 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[SeqLock时序示意]]></content:encoded>
		<excerpt:encoded><![CDATA[SeqLock时序示意]]></excerpt:encoded>
		<wp:post_id>1655</wp:post_id>
		<wp:post_date><![CDATA[2017-04-18 10:52:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-18 02:52:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[seqlock1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1654</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/04/seqlock1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:602;s:6:"height";i:224;s:4:"file";s:20:"2017/04/seqlock1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"seqlock1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"seqlock1-300x112.jpg";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[SeqLock时序示意]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SeqLock机器指令</title>
		<link>http://blog.kongfy.com/2017/04/%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%e7%89%9b%e5%88%80%e5%b0%8f%e8%af%95%ef%bc%9aseqlock/seqlock/</link>
		<pubDate>Tue, 18 Apr 2017 02:53:19 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock.png</guid>
		<description></description>
		<content:encoded><![CDATA[SeqLock机器指令]]></content:encoded>
		<excerpt:encoded><![CDATA[SeqLock机器指令]]></excerpt:encoded>
		<wp:post_id>1656</wp:post_id>
		<wp:post_date><![CDATA[2017-04-18 10:53:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-18 02:53:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[seqlock]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1654</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/04/seqlock.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:323;s:6:"height";i:134;s:4:"file";s:19:"2017/04/seqlock.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"seqlock-150x134.png";s:5:"width";i:150;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"seqlock-300x124.png";s:5:"width";i:300;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[SeqLock机器指令]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxos</title>
		<link>http://blog.kongfy.com/2018/07/paxos-revisit/paxos/</link>
		<pubDate>Sat, 28 Jul 2018 05:16:15 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/07/paxos.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1690</wp:post_id>
		<wp:post_date><![CDATA[2018-07-28 13:16:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-28 05:16:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxos]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1687</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/07/paxos.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/paxos.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:886;s:6:"height";i:330;s:4:"file";s:17:"2018/07/paxos.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"paxos-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"paxos-300x112.png";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"paxos-768x286.png";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:17:"paxos-700x261.png";s:5:"width";i:700;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxos2</title>
		<link>http://blog.kongfy.com/2018/07/paxos-revisit/paxos2/</link>
		<pubDate>Sat, 28 Jul 2018 05:17:09 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/07/paxos2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1691</wp:post_id>
		<wp:post_date><![CDATA[2018-07-28 13:17:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-28 05:17:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxos2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1687</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/07/paxos2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/paxos2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1016;s:6:"height";i:323;s:4:"file";s:18:"2018/07/paxos2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"paxos2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"paxos2-300x95.png";s:5:"width";i:300;s:6:"height";i:95;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"paxos2-768x244.png";s:5:"width";i:768;s:6:"height";i:244;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:18:"paxos2-700x223.png";s:5:"width";i:700;s:6:"height";i:223;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxos-commit</title>
		<link>http://blog.kongfy.com/2018/07/paper-noteconsensus-on-transaction-commit/paxos-commit/</link>
		<pubDate>Sat, 28 Jul 2018 09:45:48 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/07/paxos-commit.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1704</wp:post_id>
		<wp:post_date><![CDATA[2018-07-28 17:45:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-28 09:45:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxos-commit]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1703</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/07/paxos-commit.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/paxos-commit.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:664;s:6:"height";i:380;s:4:"file";s:24:"2018/07/paxos-commit.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"paxos-commit-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"paxos-commit-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2pc-paxos-commit</title>
		<link>http://blog.kongfy.com/2018/07/paper-noteconsensus-on-transaction-commit/2pc-paxos-commit/</link>
		<pubDate>Sat, 28 Jul 2018 09:46:05 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/07/2pc-paxos-commit.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1705</wp:post_id>
		<wp:post_date><![CDATA[2018-07-28 17:46:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-28 09:46:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2pc-paxos-commit]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1703</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/07/2pc-paxos-commit.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/2pc-paxos-commit.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:522;s:6:"height";i:184;s:4:"file";s:28:"2018/07/2pc-paxos-commit.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"2pc-paxos-commit-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"2pc-paxos-commit-300x106.png";s:5:"width";i:300;s:6:"height";i:106;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>megastore</title>
		<link>http://blog.kongfy.com/2018/08/megastore-paxosstore/megastore/</link>
		<pubDate>Mon, 20 Aug 2018 11:08:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/08/megastore.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Megastore的多副本结构]]></excerpt:encoded>
		<wp:post_id>1714</wp:post_id>
		<wp:post_date><![CDATA[2018-08-20 19:08:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-20 11:08:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[megastore]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1713</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/08/megastore.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/08/megastore.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:467;s:6:"height";i:334;s:4:"file";s:21:"2018/08/megastore.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"megastore-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"megastore-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>megastore-write</title>
		<link>http://blog.kongfy.com/2018/08/megastore-paxosstore/megastore-write/</link>
		<pubDate>Mon, 20 Aug 2018 11:09:30 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/08/megastore-write.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Megastore的写路径较长]]></excerpt:encoded>
		<wp:post_id>1715</wp:post_id>
		<wp:post_date><![CDATA[2018-08-20 19:09:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-20 11:09:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[megastore-write]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1713</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/08/megastore-write.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/08/megastore-write.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:452;s:6:"height";i:325;s:4:"file";s:27:"2018/08/megastore-write.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"megastore-write-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"megastore-write-300x216.png";s:5:"width";i:300;s:6:"height";i:216;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxosstore-paxos</title>
		<link>http://blog.kongfy.com/2018/08/megastore-paxosstore/paxosstore-paxos/</link>
		<pubDate>Mon, 20 Aug 2018 11:10:19 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-paxos.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[PaxosLog]]></excerpt:encoded>
		<wp:post_id>1716</wp:post_id>
		<wp:post_date><![CDATA[2018-08-20 19:10:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-20 11:10:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxosstore-paxos]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1713</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-paxos.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/08/paxosstore-paxos.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:448;s:6:"height";i:243;s:4:"file";s:28:"2018/08/paxosstore-paxos.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"paxosstore-paxos-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"paxosstore-paxos-300x163.png";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxosstore-read</title>
		<link>http://blog.kongfy.com/2018/08/megastore-paxosstore/paxosstore-read/</link>
		<pubDate>Mon, 20 Aug 2018 11:10:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-read.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[读操作需要读多个副本]]></excerpt:encoded>
		<wp:post_id>1717</wp:post_id>
		<wp:post_date><![CDATA[2018-08-20 19:10:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-20 11:10:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxosstore-read]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1713</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-read.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/08/paxosstore-read.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:482;s:6:"height";i:250;s:4:"file";s:27:"2018/08/paxosstore-read.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"paxosstore-read-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"paxosstore-read-300x156.png";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxosstore-log</title>
		<link>http://blog.kongfy.com/2018/08/megastore-paxosstore/paxosstore-log/</link>
		<pubDate>Mon, 20 Aug 2018 11:11:09 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-log.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[减少一次I/O]]></excerpt:encoded>
		<wp:post_id>1718</wp:post_id>
		<wp:post_date><![CDATA[2018-08-20 19:11:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-20 11:11:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxosstore-log]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1713</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-log.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/08/paxosstore-log.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:468;s:6:"height";i:354;s:4:"file";s:26:"2018/08/paxosstore-log.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"paxosstore-log-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"paxosstore-log-300x227.png";s:5:"width";i:300;s:6:"height";i:227;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/1-2/</link>
		<pubDate>Sun, 23 Sep 2018 03:31:14 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/09/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1725</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:31:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:31:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/09/1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:617;s:6:"height";i:249;s:4:"file";s:13:"2018/09/1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:13:"1-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/2-2/</link>
		<pubDate>Sun, 23 Sep 2018 03:31:52 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/09/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1726</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:31:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:31:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/09/2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:595;s:6:"height";i:178;s:4:"file";s:13:"2018/09/2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:12:"2-300x90.png";s:5:"width";i:300;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3</title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/3-2/</link>
		<pubDate>Sun, 23 Sep 2018 03:32:22 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/09/3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1727</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:32:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:32:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/09/3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:614;s:6:"height";i:245;s:4:"file";s:13:"2018/09/3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:13:"3-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/attachment/5/</link>
		<pubDate>Sun, 23 Sep 2018 03:32:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/09/5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1728</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:32:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:32:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/09/5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:383;s:6:"height";i:230;s:4:"file";s:13:"2018/09/5.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:13:"5-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/attachment/6/</link>
		<pubDate>Sun, 23 Sep 2018 03:33:12 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/09/6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1729</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:33:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:33:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/09/6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:497;s:6:"height";i:142;s:4:"file";s:13:"2018/09/6.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"6-150x142.png";s:5:"width";i:150;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:12:"6-300x86.png";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/attachment/4/</link>
		<pubDate>Sun, 23 Sep 2018 03:33:38 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/09/4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1730</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:33:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:33:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1724</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/09/4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:616;s:6:"height";i:336;s:4:"file";s:13:"2018/09/4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:13:"4-300x164.png";s:5:"width";i:300;s:6:"height";i:164;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>schedules</title>
		<link>http://blog.kongfy.com/2019/03/serializable/schedules/</link>
		<pubDate>Mon, 11 Mar 2019 12:27:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/schedules.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1745</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 20:27:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 12:27:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[schedules]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/schedules.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/schedules.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:428;s:6:"height";i:308;s:4:"file";s:21:"2019/03/schedules.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"schedules-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"schedules-300x216.png";s:5:"width";i:300;s:6:"height";i:216;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ansi</title>
		<link>http://blog.kongfy.com/2019/03/serializable/ansi/</link>
		<pubDate>Mon, 11 Mar 2019 13:15:29 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/ansi.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1747</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:15:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:15:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ansi]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/ansi.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/ansi.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1632;s:6:"height";i:390;s:4:"file";s:16:"2019/03/ansi.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"ansi-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"ansi-300x72.png";s:5:"width";i:300;s:6:"height";i:72;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"ansi-768x184.png";s:5:"width";i:768;s:6:"height";i:184;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:17:"ansi-1024x245.png";s:5:"width";i:1024;s:6:"height";i:245;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:16:"ansi-700x167.png";s:5:"width";i:700;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>berenson_P</title>
		<link>http://blog.kongfy.com/2019/03/serializable/berenson_p/</link>
		<pubDate>Mon, 11 Mar 2019 13:16:22 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/berenson_P.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1748</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:16:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:16:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[berenson_p]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/berenson_P.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/berenson_P.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:982;s:6:"height";i:262;s:4:"file";s:22:"2019/03/berenson_P.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"berenson_P-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"berenson_P-300x80.png";s:5:"width";i:300;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"berenson_P-768x205.png";s:5:"width";i:768;s:6:"height";i:205;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:22:"berenson_P-700x187.png";s:5:"width";i:700;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>berenson_A</title>
		<link>http://blog.kongfy.com/2019/03/serializable/berenson_a/</link>
		<pubDate>Mon, 11 Mar 2019 13:16:36 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/berenson_A.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1749</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:16:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:16:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[berenson_a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/berenson_A.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/berenson_A.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:994;s:6:"height";i:216;s:4:"file";s:22:"2019/03/berenson_A.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"berenson_A-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"berenson_A-300x65.png";s:5:"width";i:300;s:6:"height";i:65;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"berenson_A-768x167.png";s:5:"width";i:768;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:22:"berenson_A-700x152.png";s:5:"width";i:700;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ansi_ext</title>
		<link>http://blog.kongfy.com/2019/03/serializable/ansi_ext/</link>
		<pubDate>Mon, 11 Mar 2019 13:17:12 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_ext.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1750</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:17:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:17:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ansi_ext]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_ext.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/ansi_ext.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1592;s:6:"height";i:380;s:4:"file";s:20:"2019/03/ansi_ext.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"ansi_ext-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"ansi_ext-300x72.png";s:5:"width";i:300;s:6:"height";i:72;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"ansi_ext-768x183.png";s:5:"width";i:768;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"ansi_ext-1024x244.png";s:5:"width";i:1024;s:6:"height";i:244;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:20:"ansi_ext-700x167.png";s:5:"width";i:700;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ansi_ext</title>
		<link>http://blog.kongfy.com/2019/03/serializable/ansi_ext-2/</link>
		<pubDate>Mon, 11 Mar 2019 13:17:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_ext-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1751</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:17:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:17:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ansi_ext-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_ext-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/ansi_ext-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1592;s:6:"height";i:380;s:4:"file";s:22:"2019/03/ansi_ext-1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"ansi_ext-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"ansi_ext-1-300x72.png";s:5:"width";i:300;s:6:"height";i:72;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"ansi_ext-1-768x183.png";s:5:"width";i:768;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"ansi_ext-1-1024x244.png";s:5:"width";i:1024;s:6:"height";i:244;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:22:"ansi_ext-1-700x167.png";s:5:"width";i:700;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>depend</title>
		<link>http://blog.kongfy.com/2019/03/serializable/depend/</link>
		<pubDate>Mon, 11 Mar 2019 13:18:12 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/depend.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1752</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:18:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:18:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[depend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/depend.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/depend.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1574;s:6:"height";i:434;s:4:"file";s:18:"2019/03/depend.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"depend-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"depend-300x83.png";s:5:"width";i:300;s:6:"height";i:83;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"depend-768x212.png";s:5:"width";i:768;s:6:"height";i:212;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"depend-1024x282.png";s:5:"width";i:1024;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:18:"depend-700x193.png";s:5:"width";i:700;s:6:"height";i:193;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ansi_adya</title>
		<link>http://blog.kongfy.com/2019/03/serializable/ansi_adya/</link>
		<pubDate>Mon, 11 Mar 2019 13:18:35 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_adya.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1753</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:18:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:18:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ansi_adya]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_adya.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/ansi_adya.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1604;s:6:"height";i:422;s:4:"file";s:21:"2019/03/ansi_adya.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"ansi_adya-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"ansi_adya-300x79.png";s:5:"width";i:300;s:6:"height";i:79;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"ansi_adya-768x202.png";s:5:"width";i:768;s:6:"height";i:202;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"ansi_adya-1024x269.png";s:5:"width";i:1024;s:6:"height";i:269;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:21:"ansi_adya-700x184.png";s:5:"width";i:700;s:6:"height";i:184;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>adya</title>
		<link>http://blog.kongfy.com/2019/03/serializable/adya/</link>
		<pubDate>Mon, 11 Mar 2019 13:18:52 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/adya.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1754</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:18:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:18:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[adya]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/adya.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/adya.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1384;s:6:"height";i:1178;s:4:"file";s:16:"2019/03/adya.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"adya-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"adya-300x255.png";s:5:"width";i:300;s:6:"height";i:255;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"adya-768x654.png";s:5:"width";i:768;s:6:"height";i:654;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:17:"adya-1024x872.png";s:5:"width";i:1024;s:6:"height";i:872;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:16:"adya-700x596.png";s:5:"width";i:700;s:6:"height";i:596;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>peter_balis</title>
		<link>http://blog.kongfy.com/2019/03/serializable/peter_balis/</link>
		<pubDate>Mon, 11 Mar 2019 13:19:11 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/peter_balis.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1755</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:19:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:19:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[peter_balis]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/peter_balis.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/peter_balis.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1208;s:6:"height";i:1362;s:4:"file";s:23:"2019/03/peter_balis.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"peter_balis-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"peter_balis-266x300.png";s:5:"width";i:266;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"peter_balis-768x866.png";s:5:"width";i:768;s:6:"height";i:866;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"peter_balis-908x1024.png";s:5:"width";i:908;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:23:"peter_balis-621x700.png";s:5:"width";i:621;s:6:"height";i:700;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paxos3</title>
		<link>http://blog.kongfy.com/2018/07/paxos-revisit/paxos3/</link>
		<pubDate>Sat, 16 Mar 2019 01:30:53 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2018/07/paxos3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1770</wp:post_id>
		<wp:post_date><![CDATA[2019-03-16 09:30:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-16 01:30:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paxos3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1687</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2018/07/paxos3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/07/paxos3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:858;s:6:"height";i:320;s:4:"file";s:18:"2018/07/paxos3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"paxos3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"paxos3-300x112.png";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"paxos3-768x286.png";s:5:"width";i:768;s:6:"height";i:286;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:18:"paxos3-700x261.png";s:5:"width";i:700;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>failure_detectors</title>
		<link>http://blog.kongfy.com/2019/10/%e8%b6%85%e8%b6%8a%e4%b8%8d%e5%8f%af%e8%83%bd/faiure_detectors/</link>
		<pubDate>Sun, 13 Oct 2019 02:23:50 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/10/faiure_detectors.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1781</wp:post_id>
		<wp:post_date><![CDATA[2019-10-13 10:23:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-13 02:23:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[faiure_detectors]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1779</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/10/faiure_detectors.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/10/faiure_detectors.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1420;s:6:"height";i:404;s:4:"file";s:28:"2019/10/faiure_detectors.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"faiure_detectors-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"faiure_detectors-300x85.jpg";s:5:"width";i:300;s:6:"height";i:85;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:28:"faiure_detectors-768x219.jpg";s:5:"width";i:768;s:6:"height";i:219;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:29:"faiure_detectors-1024x291.jpg";s:5:"width";i:1024;s:6:"height";i:291;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:28:"faiure_detectors-700x199.jpg";s:5:"width";i:700;s:6:"height";i:199;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Eight classes of failure detectors defined in terms of accuracy and completeness]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Problem solvability in different distributed computing models</title>
		<link>http://blog.kongfy.com/2019/10/%e8%b6%85%e8%b6%8a%e4%b8%8d%e5%8f%af%e8%83%bd/attachment/20191011231900/</link>
		<pubDate>Sun, 13 Oct 2019 02:25:08 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/10/20191011231900.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1782</wp:post_id>
		<wp:post_date><![CDATA[2019-10-13 10:25:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-13 02:25:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20191011231900]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1779</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/10/20191011231900.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/10/20191011231900.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1516;s:6:"height";i:924;s:4:"file";s:26:"2019/10/20191011231900.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"20191011231900-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"20191011231900-300x183.jpg";s:5:"width";i:300;s:6:"height";i:183;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:26:"20191011231900-768x468.jpg";s:5:"width";i:768;s:6:"height";i:468;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"20191011231900-1024x624.jpg";s:5:"width";i:1024;s:6:"height";i:624;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:26:"20191011231900-700x427.jpg";s:5:"width";i:700;s:6:"height";i:427;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[Problem solvability in different distributed computing models]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>berenson</title>
		<link>http://blog.kongfy.com/2019/03/serializable/berenson/</link>
		<pubDate>Sun, 11 Jul 2021 06:39:29 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2019/03/berenson.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1808</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 14:39:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 06:39:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[berenson]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1743</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2019/03/berenson.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/03/berenson.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2000;s:6:"height";i:852;s:4:"file";s:20:"2019/03/berenson.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"berenson-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"berenson-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"berenson-768x327.png";s:5:"width";i:768;s:6:"height";i:327;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"berenson-1024x436.png";s:5:"width";i:1024;s:6:"height";i:436;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:20:"berenson-700x298.png";s:5:"width";i:700;s:6:"height";i:298;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>karottc - 2014-08-25 20:38:39</title>
		<link>http://blog.kongfy.com/?post_type=feedback&#038;p=417</link>
		<pubDate>Mon, 25 Aug 2014 12:38:39 +0000</pubDate>
		<dc:creator><![CDATA[]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?post_type=feedback&#038;p=417</guid>
		<description></description>
		<content:encoded><![CDATA[突然想到，没有什么好写的，可以放几张靓照，比如  美丽的校园和你的完美的身材！
<!--more-->
AUTHOR: karottc
AUTHOR EMAIL: karottc@gmail.com
AUTHOR URL: 
SUBJECT: [Kongfy's Blog
IP: 2620:0:ed0:4920:18bc:bcb1:e8e2:b04f
Array
(
    [1_姓名] =&gt; karottc
    [2_电子邮件] =&gt; karottc@gmail.com
    [3_说点什么吧~] =&gt; 突然想到，没有什么好写的，可以放几张靓照，比如  美丽的校园和你的完美的身材！
)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date><![CDATA[2014-08-25 20:38:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-25 12:38:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[7000021d9af4e7b050b8b1443cb5e8ef]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[feedback]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_feedback_extra_fields]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_feedback_email]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:2:"to";a:1:{i:0;s:19:"njukongfy@gmail.com";}s:7:"message";s:350:"姓名: karottc
电子邮件: karottc@gmail.com
说点什么吧~: 突然想到，没有什么好写的，可以放几张靓照，比如  美丽的校园和你的完美的身材！

Time: 2014/08/25 at 20:38
IP Address: 2620:0:ed0:4920:18bc:bcb1:e8e2:b04f
联系方式网址： http://blog.kongfy.com/about/
Sent by an unverified visitor to your site.";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Github</title>
		<link>http://blog.kongfy.com/2015/05/github/</link>
		<pubDate>Sat, 09 May 2015 14:40:36 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1049</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1049</wp:post_id>
		<wp:post_date><![CDATA[2015-05-09 22:40:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-09 14:40:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social-network"><![CDATA[social network]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://github.com/kongfy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1049]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Email</title>
		<link>http://blog.kongfy.com/2015/05/email/</link>
		<pubDate>Sun, 10 May 2015 03:26:38 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1097</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1097</wp:post_id>
		<wp:post_date><![CDATA[2015-05-10 11:26:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-10 03:26:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[email]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social-network"><![CDATA[social network]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1097]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[mailto:njukongfy@gmail.com]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>atomic</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/atomic/</link>
		<pubDate>Sun, 11 Jul 2021 07:13:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/atomic.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1811</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:13:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:13:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[atomic]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/atomic.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/atomic.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1194;s:6:"height";i:368;s:4:"file";s:19:"2020/10/atomic.jpeg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"atomic-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"atomic-300x92.jpeg";s:5:"width";i:300;s:6:"height";i:92;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:19:"atomic-768x237.jpeg";s:5:"width";i:768;s:6:"height";i:237;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:20:"atomic-1024x316.jpeg";s:5:"width";i:1024;s:6:"height";i:316;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:19:"atomic-700x216.jpeg";s:5:"width";i:700;s:6:"height";i:216;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shadow_paging</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/shadow_paging/</link>
		<pubDate>Sun, 11 Jul 2021 07:13:29 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/shadow_paging.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1812</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:13:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:13:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shadow_paging]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/shadow_paging.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/shadow_paging.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1192;s:6:"height";i:502;s:4:"file";s:26:"2020/10/shadow_paging.jpeg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"shadow_paging-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"shadow_paging-300x126.jpeg";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:26:"shadow_paging-768x323.jpeg";s:5:"width";i:768;s:6:"height";i:323;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"shadow_paging-1024x431.jpeg";s:5:"width";i:1024;s:6:"height";i:431;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:26:"shadow_paging-700x295.jpeg";s:5:"width";i:700;s:6:"height";i:295;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lmdb</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/lmdb/</link>
		<pubDate>Sun, 11 Jul 2021 07:13:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/lmdb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1813</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:13:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:13:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lmdb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/lmdb.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/lmdb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:894;s:6:"height";i:324;s:4:"file";s:16:"2020/10/lmdb.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"lmdb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"lmdb-300x109.png";s:5:"width";i:300;s:6:"height";i:109;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"lmdb-768x278.png";s:5:"width";i:768;s:6:"height";i:278;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:16:"lmdb-700x254.png";s:5:"width";i:700;s:6:"height";i:254;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>steal_force</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/steal_force/</link>
		<pubDate>Sun, 11 Jul 2021 07:14:12 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/steal_force.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1814</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:14:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:14:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[steal_force]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/steal_force.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/steal_force.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1284;s:6:"height";i:717;s:4:"file";s:23:"2020/10/steal_force.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"steal_force-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"steal_force-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"steal_force-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"steal_force-1024x572.png";s:5:"width";i:1024;s:6:"height";i:572;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:23:"steal_force-700x391.png";s:5:"width";i:700;s:6:"height";i:391;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rocksdb</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/rocksdb/</link>
		<pubDate>Sun, 11 Jul 2021 07:14:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/rocksdb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1815</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:14:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:14:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rocksdb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/rocksdb.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/rocksdb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:904;s:6:"height";i:808;s:4:"file";s:19:"2020/10/rocksdb.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"rocksdb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"rocksdb-300x268.png";s:5:"width";i:300;s:6:"height";i:268;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"rocksdb-768x686.png";s:5:"width";i:768;s:6:"height";i:686;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:19:"rocksdb-700x626.png";s:5:"width";i:700;s:6:"height";i:626;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/oracle/</link>
		<pubDate>Sun, 11 Jul 2021 07:14:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/oracle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1816</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:14:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:14:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/oracle.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/oracle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1284;s:6:"height";i:490;s:4:"file";s:18:"2020/10/oracle.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"oracle-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"oracle-300x114.png";s:5:"width";i:300;s:6:"height";i:114;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"oracle-768x293.png";s:5:"width";i:768;s:6:"height";i:293;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"oracle-1024x391.png";s:5:"width";i:1024;s:6:"height";i:391;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:18:"oracle-700x267.png";s:5:"width";i:700;s:6:"height";i:267;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>checkpoint</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/checkpoint/</link>
		<pubDate>Sun, 11 Jul 2021 07:15:18 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/checkpoint.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1817</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:15:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:15:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[checkpoint]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/checkpoint.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/checkpoint.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1340;s:6:"height";i:376;s:4:"file";s:23:"2020/10/checkpoint.jpeg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"checkpoint-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"checkpoint-300x84.jpeg";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:23:"checkpoint-768x215.jpeg";s:5:"width";i:768;s:6:"height";i:215;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:24:"checkpoint-1024x287.jpeg";s:5:"width";i:1024;s:6:"height";i:287;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:23:"checkpoint-700x196.jpeg";s:5:"width";i:700;s:6:"height";i:196;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dis_atomic</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/dis_atomic/</link>
		<pubDate>Sun, 11 Jul 2021 07:15:37 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/dis_atomic.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1818</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:15:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:15:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dis_atomic]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/dis_atomic.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/dis_atomic.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:830;s:6:"height";i:456;s:4:"file";s:22:"2020/10/dis_atomic.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"dis_atomic-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"dis_atomic-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"dis_atomic-768x422.png";s:5:"width";i:768;s:6:"height";i:422;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:22:"dis_atomic-700x385.png";s:5:"width";i:700;s:6:"height";i:385;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>saga</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/saga/</link>
		<pubDate>Sun, 11 Jul 2021 07:15:58 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/saga.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1819</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:15:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:15:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[saga]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/saga.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/saga.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:707;s:6:"height";i:307;s:4:"file";s:16:"2020/10/saga.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"saga-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"saga-300x130.png";s:5:"width";i:300;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:16:"saga-700x304.png";s:5:"width";i:700;s:6:"height";i:304;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2pc</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/2pc/</link>
		<pubDate>Sun, 11 Jul 2021 07:16:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/2pc.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1820</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:16:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:16:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2pc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/2pc.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/2pc.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:862;s:6:"height";i:287;s:4:"file";s:16:"2020/10/2pc.jpeg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"2pc-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"2pc-300x100.jpeg";s:5:"width";i:300;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"2pc-768x256.jpeg";s:5:"width";i:768;s:6:"height";i:256;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:16:"2pc-700x233.jpeg";s:5:"width";i:700;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pgxc</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/pgxc/</link>
		<pubDate>Sun, 11 Jul 2021 07:16:43 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/pgxc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1821</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:16:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:16:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pgxc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/pgxc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/pgxc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:818;s:6:"height";i:712;s:4:"file";s:16:"2020/10/pgxc.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"pgxc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"pgxc-300x261.png";s:5:"width";i:300;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"pgxc-768x668.png";s:5:"width";i:768;s:6:"height";i:668;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:16:"pgxc-700x609.png";s:5:"width";i:700;s:6:"height";i:609;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2pc_state</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/2pc_state/</link>
		<pubDate>Sun, 11 Jul 2021 07:17:15 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/2pc_state.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1822</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:17:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:17:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2pc_state]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/2pc_state.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/2pc_state.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:680;s:6:"height";i:494;s:4:"file";s:21:"2020/10/2pc_state.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"2pc_state-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"2pc_state-300x218.png";s:5:"width";i:300;s:6:"height";i:218;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>percolator</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/percolator/</link>
		<pubDate>Sun, 11 Jul 2021 07:17:39 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/percolator.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1823</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:17:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:17:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[percolator]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/percolator.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/percolator.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:757;s:6:"height";i:212;s:4:"file";s:22:"2020/10/percolator.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"percolator-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"percolator-300x84.png";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:22:"percolator-700x196.png";s:5:"width";i:700;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ob_compaction</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/ob_compaction/</link>
		<pubDate>Sun, 11 Jul 2021 07:18:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/ob_compaction.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1824</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:18:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:18:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ob_compaction]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/ob_compaction.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/ob_compaction.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1418;s:6:"height";i:518;s:4:"file";s:26:"2020/10/ob_compaction.jpeg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ob_compaction-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"ob_compaction-300x110.jpeg";s:5:"width";i:300;s:6:"height";i:110;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:26:"ob_compaction-768x281.jpeg";s:5:"width";i:768;s:6:"height";i:281;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"ob_compaction-1024x374.jpeg";s:5:"width";i:1024;s:6:"height";i:374;s:9:"mime-type";s:10:"image/jpeg";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:26:"ob_compaction-700x256.jpeg";s:5:"width";i:700;s:6:"height";i:256;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ob_2pc</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/ob_2pc/</link>
		<pubDate>Sun, 11 Jul 2021 07:18:25 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1825</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:18:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:18:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ob_2pc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/ob_2pc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1342;s:6:"height";i:550;s:4:"file";s:18:"2020/10/ob_2pc.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"ob_2pc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"ob_2pc-300x123.png";s:5:"width";i:300;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"ob_2pc-768x315.png";s:5:"width";i:768;s:6:"height";i:315;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"ob_2pc-1024x420.png";s:5:"width";i:1024;s:6:"height";i:420;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:18:"ob_2pc-700x287.png";s:5:"width";i:700;s:6:"height";i:287;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ob_2pc2</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/ob_2pc2/</link>
		<pubDate>Sun, 11 Jul 2021 07:18:58 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1826</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:18:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:18:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ob_2pc2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/ob_2pc2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1290;s:6:"height";i:512;s:4:"file";s:19:"2020/10/ob_2pc2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"ob_2pc2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"ob_2pc2-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"ob_2pc2-768x305.png";s:5:"width";i:768;s:6:"height";i:305;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"ob_2pc2-1024x406.png";s:5:"width";i:1024;s:6:"height";i:406;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:19:"ob_2pc2-700x278.png";s:5:"width";i:700;s:6:"height";i:278;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ob_2pc3</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/ob_2pc3/</link>
		<pubDate>Sun, 11 Jul 2021 07:19:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1827</wp:post_id>
		<wp:post_date><![CDATA[2021-07-11 15:19:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-11 07:19:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ob_2pc3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1796</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2020/10/ob_2pc3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1798;s:6:"height";i:634;s:4:"file";s:19:"2020/10/ob_2pc3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"ob_2pc3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"ob_2pc3-300x106.png";s:5:"width";i:300;s:6:"height";i:106;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"ob_2pc3-768x271.png";s:5:"width";i:768;s:6:"height";i:271;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"ob_2pc3-1024x361.png";s:5:"width";i:1024;s:6:"height";i:361;s:9:"mime-type";s:9:"image/png";}s:36:"independent_publisher_post_thumbnail";a:4:{s:4:"file";s:19:"ob_2pc3-700x247.png";s:5:"width";i:700;s:6:"height";i:247;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于我</title>
		<link>http://blog.kongfy.com/about/</link>
		<pubDate>Tue, 04 Mar 2014 13:34:29 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?page_id=4</guid>
		<description></description>
		<content:encoded><![CDATA[Kongfy是我名字的缩写组合，虽然缩写方式比较奇怪且读音不明，不过用的时间长了，看顺眼了就懒得改了。

毕业于南京大学计算机系，目前是帝都码农一枚，从事分布式数据库的开发工作。

在路上，加油。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2014-03-04 21:34:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-04 13:34:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_g_feedback_shortcode]]></wp:meta_key>
			<wp:meta_value><![CDATA[[contact-field label='姓名' type='name' required='1'/][contact-field label='电子邮件' type='email' required='1'/][contact-field label='说点什么吧~' type='textarea' required='1'/]]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751053783]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用python模拟weibo登录</title>
		<link>http://blog.kongfy.com/2013/04/%e4%bd%bf%e7%94%a8python%e6%a8%a1%e6%8b%9fweibo%e7%99%bb%e5%bd%95/</link>
		<pubDate>Tue, 02 Apr 2013 06:28:14 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[之前写过在python中使用weibo API的方法，见<a href="http://blog.kongfy.com/2013/03/%e9%80%9a%e8%bf%87python-sdk%e4%bd%bf%e7%94%a8weibo-api/">这里</a>，但是因为weibo API有频率限制，不够目前需求使用，所以通过爬虫模拟登录weibo进行直接抓取还是很有必要的，第一步要做的事情就是模拟登录过程。

weibo的登录方法一直在变，不知道现在的方法还能使用多久。
目前登录使用的是RSA加密的方式，总体来看步骤分为三步：

<ol>
<li>访问预登录地址，获取servertime、nonce和RSA公钥</li>
<li>访问认证地址，发送编码后的用户名和RSA加密过的密码，获得跳转地址</li>
<li>访问获得的地址，获取到登录cookie，登录完成</li>
</ol>

<!--more-->

代码如下，注释比较少，主要是__login()函数内的过程，需要安装rsa包，easy_install即可
<code lang="python">
# -*- coding: utf-8 -*-

import urllib2, urllib, cookielib
import re, json, base64
import rsa, binascii


url_prelogin = 'http://login.sina.com.cn/sso/prelogin.php?entry=weibo&callback=sinaSSOController.preloginCallBack&su=&rsakt=mod&client=ssologin.js(v1.4.5)&_=1364875106625'
url_login = 'http://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.4.5)'

class Toy(object):
    def fecth_page(self, url = 'http://weibo.com', data = None):
        return self.__opener.open(url, data)
    
    def __init__(self, username, password):
        self.__username = username
        self.__password = password
        
        cj = cookielib.CookieJar()
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
        opener.addheaders = [('User-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0')]
        self.__opener = opener
        
        self.__login()
        
    def __encode_passwd(self, pwd, servertime, nonce, pubkey):
        rsaPublickey = int(pubkey, 16)
        key = rsa.PublicKey(rsaPublickey, 65537) #创建公钥
        message = str(servertime) + '\t' + str(nonce) + '\n' + str(pwd)#拼接明文 js加密文件中得到
        passwd = rsa.encrypt(message, key)#加密
        passwd = binascii.b2a_hex(passwd) #将加密信息转换为16进制。
        return passwd

    def __encode_username(self, username):
        username = urllib.quote(username)
        username = base64.encodestring(username)[:-1]
        return username
    
    def __prelogin(self):
        html = self.__opener.open(url_prelogin).read()
        json_data = re.search('\((.*)\)', html).group(1)
        data = json.loads(json_data)
        servertime = data['servertime']
        nonce = data['nonce']
        pubkey = data['pubkey']
        rsakv = data['rsakv']
        return servertime, nonce, pubkey, rsakv
    
    def __login(self):
        (servertime, nonce, pubkey, rsakv) = self.__prelogin()
        sp = self.__encode_passwd(self.__password, servertime, nonce, pubkey)
        su = self.__encode_username(self.__username)
        postdata = {
                    'entry': 'weibo',
                    'gateway': '1',
                    'from': '',
                    'savestate': '7',
                    'userticket': '1',
                    'ssosimplelogin': '1',
                    'vsnf': '1',
                    'vsnval': '',
                    'su': su,
                    'service': 'miniblog',
                    'servertime': servertime,
                    'nonce': nonce,
                    'pwencode': 'rsa2',
                    'sp': sp,
                    'encoding': 'UTF-8',
                    'url': 'http://weibo.com/ajaxlogin.php?framelogin=1&callback=parent.sinaSSOController.feedBackUrlCallBack',
                    'returntype': 'META',
                    'rsakv' : rsakv,
                    }


        postdata = urllib.urlencode(postdata)
        html = self.__opener.open(url_login, postdata).read()
        url_final = re.search('location\.replace\(\"(.*?)\"\)', html).group(1)
        self.__opener.open(url_final)
    
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2013-04-02 14:28:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-02 06:28:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bd%bf%e7%94%a8python%e6%a8%a1%e6%8b%9fweibo%e7%99%bb%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python-2"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753589108]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>通过python SDK使用weibo API</title>
		<link>http://blog.kongfy.com/2013/03/%e9%80%9a%e8%bf%87python-sdk%e4%bd%bf%e7%94%a8weibo-api/</link>
		<pubDate>Fri, 22 Mar 2013 10:27:15 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[之前做JAVA课大作业的时候曾经用过weibo的API，weibo的API采用OAuth2的认证方法进行认证，也就是避免开发者知晓用户密码的一种手段。不过这样对于开发一些简单使用的客户端程序就不太友好了，可以通过程序模拟授权过程来跳过这一步骤。之前是用JAVA做的，现在用Python再做一次...

<!--more-->

Python的weibo SDK是第三方开发的<a href="http://michaelliao.github.com/sinaweibopy/">weibopy</a>，主要是封装了OAuth2的认证和weibo API接口的访问和JSON解析。下载之后文件夹里主要的文件是weibo.py，将这个文件直接拷贝到工程目录下即可。当然也可以通过
<code lang="bash">python setup.py install</code>

来安装到python目录中。

装好后按照<a href="http://open.weibo.com/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97">weibo上的指导</a>创建应用，然后就可以愉快的使用weibo API了。

代码如下：

<strong>config.py</strong>
<code lang="python">
# -*- coding: utf-8 -*-

config = {'APP_KEY' : '********',
          'APP_SECRET' : '****************************',
          'CALLBACK_URL' : 'www.kongfy.com',
          'WEIBO_USER' : '******',
          'WEIBO_PWD' : '**********',
          }
</code>

<strong>main.py</strong>
<code lang="python">
# -*- coding: utf-8 -*-

from weibo_toy import Toy
from config import config


if __name__ == '__main__':
    try:
        toy = Toy(config['APP_KEY'],
                  config['APP_SECRET'],
                  config['CALLBACK_URL'],
                  config['WEIBO_USER'],
                  config['WEIBO_PWD'],
                  )
    except Exception, e:
        print "Error while Oauth2 with sina api..."
        print e
        exit()


    client = toy.client
    print client.get.statuses__public_timeline()
</code>

<strong>weibo_toy.py</strong>
<code lang="python">
# -*- coding: utf-8 -*-

from weibo import APIClient
import urllib2, urllib

class Toy(object):
    def __init__(self, app_key, app_secret, app_redirect_uri, username, password):
        self.__client = APIClient(app_key, app_secret, app_redirect_uri)
        self.__app_key = app_key
        self.__app_secret = app_secret
        self.__username = username
        self.__password = password
        self.__callback = app_redirect_uri
        
        client = self.__client
        code = self.__get_code() #获取新浪认证code
    
        #新浪返回的token，类似abc123xyz456，每天的token不一样
        r = client.request_access_token(code)
        access_token = r.access_token
        expires_in = r.expires_in # token过期的UNIX时间

        #设置得到的access_token
        client.set_access_token(access_token, expires_in)
    
    def __get_code(self):
        login_url = 'https://api.weibo.com/oauth2/authorize'
        params = urllib.urlencode({'action' : 'submit', #login不能授权,submit可以
                                   'response_type' : 'code',
                                   'redirect_uri' : self.__callback,
                                   'client_id' : self.__app_key,
                                   'userId' : self.__username,
                                   'passwd' : self.__password,
                                   })
        client = self.__client
        url = client.get_authorize_url()
        headers = {'Referer' : url}
        request = urllib2.Request(login_url, params, headers)
        f = urllib2.urlopen(request)
        return f.geturl().split('=')[1]
    
    def __getattr__(self, name):
        if name == 'client':
            return self.__client
</code>

代码中的
<code lang="python">
client.get.statuses__public_timeline()
</code>

就是使用weibo的statuses/public_timeline的API,get代表使用GET方法提交数据，用"__"代替"/"。完整的API文档在<a href="http://open.weibo.com/wiki/API%E6%96%87%E6%A1%A3_V2">这里</a>。

<strong>Have fun!</strong>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2013-03-22 18:27:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-22 10:27:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%9a%e8%bf%87python-sdk%e4%bd%bf%e7%94%a8weibo-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python-2"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751053066]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>663</wp:comment_id>
			<wp:comment_author><![CDATA[ridox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lrq09@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://ruiqiliu.github.io</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.212.84.181]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-30 18:26:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-30 10:26:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229512]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>[译]理解timsort, 第一部分：适应性归并排序(Adaptive Mergesort)</title>
		<link>http://blog.kongfy.com/2012/10/%e8%af%91%e7%90%86%e8%a7%a3timsort-%e7%ac%ac%e4%b8%80%e9%83%a8%e5%88%86%ef%bc%9a%e9%80%82%e5%ba%94%e6%80%a7%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8fadaptive-mergesort/</link>
		<pubDate>Sat, 13 Oct 2012 13:54:47 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[Python2.3中开始使用的timsort应该说算是声名在外了，不管是在稳定性还是在速度上都十分的惊人。
前一段刚刚看了《Python CookBook》中的一些章节，对timsort产生了一些兴趣。于是在网上看到了这边文章，讲的相当清楚明了，于是产生了翻译的念头，也于是有了这篇文章。

这应该算是我翻译的第一篇技术文章，真正做一次才明白能看懂和能翻译出来还是有蛮大的差距的。翻译质量不可谓不差，诸位如果英文阅读无障碍，强烈建议移步原文：<a href="http://www.drmaciver.com/2010/01/understanding-timsort-1adaptive-mergesort/">Understanding timsort, Part 1: Adaptive Mergesort</a>，如果你不幸看了下面的坑爹译文，欢迎留下各种吐槽！闲话少说，上主菜：

<hr/>

Python的timsort常常被认为是很复杂、可怕的。这是可以理解的，因为其中包含了太多的细节。但是，如果你真正的了解它，你会发现它其实只是对归并排序进行了一系列的改进。其中有一些是很聪明的，而也有一些是相当简单直接的。这些大大小小的改进聚集起来使得算法的效率变得十分的吸引人。

我将会通过一些例子告诉你如何从一个最基本的归并排序开始逐步得到timsort。在本文中我会讲述如何得到timsort的“核心”:基本的适应性归并排序。后续的文章会在此基础上讲述timsort中使用的其他特别的优化。
<!--more-->
为了简单起见，我将只考虑整数（integers）数组而不是更通用的情况（这使得代码更容易理解，并且当你理解之后，也很容易改写为更通用的算法）。另外，这只是一个概述，所以我会忽略很多细节（或许会有一些明显的错误），所以如果你想看到更多精确的细节，请参考<a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">Tim Peters's description of the algorithm</a>

噢，还有示例代码是使用C编写的，Sorry(Why?)。

我们将要从一个非常朴素的归并排序开始。

希望你已经了解归并排序的原理了（如果没有，你需要去了解一下），让我们来复习一下：长度为1的数组是已经排序好的。对长度为n>1的数组，将其分为2段(partition)（最常见的做法是从中间分开）。对两段数组递归进行归并排序，完成后将其合并（merge）：通过扫描个已排序的数组并总是挑出两者中较小数作为合并数组中的下一个元素，来将两个已排序数组合并形成一个更大的已排序数组。

下面是代码：

<code lang="c">
#include "timsort.h"
#include <stdlib.h>
#include <string.h>

// 将两个长度分别为l1, l2的已排序数组p1, p2合并为一个
// 已排序的目标数组。
void merge(int target[], int p1[], int l1, int p2[], int l2);

void integer_timsort(int array[], int size){
    if(size <= 1) return;
 
    int partition = size/2;
    integer_timsort(array, partition);
    integer_timsort(array + partition, size - partition);
    merge(array, array, partition, array + partition, size - partition);
}

void merge(int target[], int p1[], int l1, int p2[], int l2){
    int *merge_to = malloc(sizeof(int) * (l1 + l2));

    // 当前扫描两数组的位置
    int i1, i2;
    i1 = i2 = 0;

    // 在合并过程中存放下一个元素的位置
    int *next_merge_element = merge_to;

    // 扫描两数组，将较小的元素写入
    // merge_to. 当两数相等时我们选择
    // 左边的, 因为我们想保证排序的稳定性
    // 当然对于integers这无关紧要，但这种想法是很重要的
    while(i1 < l1 && i2 < l2){
        if(p1[i1] <= p2[i2]){
            *next_merge_element = p1[i1];
            i1++;
        } else {
            *next_merge_element = p2[i2];
            i2++;
        }
        next_merge_element++;
    }

    // 如果有一个数组没有扫描完，我们直接拷贝剩余的部分
    memcpy(next_merge_element, p1 + i1, sizeof(int) * (l1 - i1));
    memcpy(next_merge_element, p2 + i2, sizeof(int) * (l2 - i2));

    // 现在我们已经将他们合并在了我们的额外的存储空间里了
    // 是时候转存到target了
    memcpy(target, merge_to, sizeof(int) * (l1 + l2));

    free(merge_to);
}
</code>

我不会总是贴出完整的代码，你可以在github上根据不同的版本来<a href="http://github.com/DRMacIver/understanding-timsort">查看他们</a>

现在，如果你是一个C程序员，你可能已经在吐槽了：我在每次合并过程中都申请并释放了一次额外存储空间（你可能也会不爽于我没有检查返回值是否为null,请无视之...如果这能让你感觉好一点）

这个问题只要一点点的改动就可以修正：
<code lang="c">
void merge(int target[], int p1[], int l1, int p2[], int l2, int storage[]);
void integer_timsort_with_storage(int array[], int size, int storage[]);

void integer_timsort(int array[], int size){
    int *storage = malloc(sizeof(int) * size);
    integer_timsort_with_storage(array, size, storage);
    free(storage);
}
</code>

现在我们有了排序函数的最顶层，做了一些内存分配（setup）工作并将其传入调用中。这是我们将要开始优化工作的模版，当然最后实际可用的版本会更加复杂而不仅仅是优化一块内存空间。

现在我们有了基本的归并排序了，我们需要想想：我们能怎样来优化它？

一般来说我们不能指望对于每一种情况都能达到最优。归并排序的性能已经很接近比较排序的下界了。timsort的关键特性是极好的利用了数据中存在的规律。如果数据中存在普遍的规律，我们应该尽可能的利用他们，如果没有，我们的算法应该保证不会比普通的归并排序差太多。

如果你看过归并排序的实现，你会发现其实所有的工作都是在合并（merge）的过程当中完成的。所以优化的重点也就落在了这里。由此我们得出以下三点可能的优化途径：

1、能否使合并过程运行的更快？
2、能否执行更少的合并过程？
3、是否存在一些与其使用归并排序不如使用其他排序的情况？

以上三个问题的答案都是肯定的，并且这也是对归并排序进行优化最为普遍的途径。举例来说，递归的实现使得根据数组的规模使用不同的排序算法变的非常简单。归并排序是一个很好的通用性排序算法，（具有很好的渐进复杂度）但对小数组而言常数因子就显得愈发重要，当数组的大小小于某个值时（通常是7或者8左右）归并排序的性能频繁的低于插入排序。

这并不是timsort的原理，但是我们之后会用到插入排序，所以我们先开个小差。

最简单的：假设我们有一个具有n个元素的已排序数组，并且在尾端有第n+1个元素的位置。现在我们想要向里面添加一个新的元素并保持数组有序。我们需要为新元素找到一个合适的位置并将比它大的数向后移动。一种显而易见的做法是将新元素放到第n+1个位置上，然后从后向前两两交换直到到达正确的位置（对较大的数组这并不是最好的做法：你可能想要对数据进行二分查找（binary search）然后把剩下的元素不做比较的向后移动。但是对小数组来说这样的做法反而不是很好，due to cache effects）

这就是插入排序工作的方式：当你有了k个已排序的元素，将第k+1个元素插入其中，你就有了k+1个已排序的元素。反复如此直到整个数组有序。

下面是代码：
<code lang="c">
void insertion_sort(int xs[], int length){
    if(length <= 1) return;
    int i;
    for(i = 1; i < length; i++){
        // i之前的数组已经有序了，现在将xs[i]插入到里面
        int x = xs[i];
        int j = i - 1;

        // 将j向前移动直到数组头或者
        // something <= x, 并且其右边的所有的元素都已经
        // 右移了
        while(j >= 0 && xs[j] > x){
            xs[j+1], xs[j];
             j--;
        }   
        xs[j+1] = x;
    }
}
</code>

现在排序的代码会被修改为下面这样：
<code lang="c">
void integer_timsort_with_storage(int array[], int size, int storage[]){
    if(size <= INSERTION_SORT_SIZE){
        insertion_sort(array, size);
        return;
    }
}
</code>

你可以在<a href="http://github.com/DRMacIver/understanding-timsort/commit/57a91bd8c5383ffa1e0e5dc1df0849e16ec037bd">这里</a>查看这个版本

好了，让我们回归正题：优化归并排序。

能否执行更少的合并过程？

对于一般的情况，不行。但是让我们考虑一些普遍存在的情况。

假设我们有一个已经排好序的数组，我们需要执行多少次合并过程？

原则上来说1次也不需要：数组已经排好序了，不需要做任何多余的工作。所以一个可行的选择是增加一个初始的检查来确定数组是否已经排好序了并在确认之后立刻退出。

但是那样会给排序算法增加很多额外的计算，虽然在判断成功的情况下带来很大的收益（将O(nlog(n))的复杂度下降到O(n)），但是如果判断失败了，会造成很多无用的计算。下面让我们看看我们该怎样实现这种检查并且无论其失败与否都能将检查的结果很好的利用起来。

假设我们遇到了下面的数组：

{5, 6, 7, 8, 9, 10, 1, 2, 3}

（现在暂且忽略我们会对小于n的数组使用不同的排序方法）

为了得到最好的合并策略，我们应该在哪里进行分段呢？

显然在这里有两个已经排好序的子数组：5到10和1到3，如果选择这两段作为分段必然可以获得很好的效果。

接下来提出一种片面的方法：

找出初始状态下最长的上升序列作为第一个分段（partition）,剩余部分作为第二个分段。

当数据是由不多的几个已排序的数组组成的情况下，这种方法表现的很好，但是这种方法存在十分糟糕的最差情况。考虑一个完全逆序的数组，每次分段的第一段都只有一个数，所以在每次递归中第一段只有一个数，而要对第二段的n-1个元素进行递归的归并排序。这造成了明显不令人满意的O(n^2)的性能表现。

我们也可以人工的将过短的分段修改为总长度一半的元素以避免这个问题，但是这同样也是不令人满意的：我们额外的检查工作基本没有什么收益。

但是，基本的思路已经明确了：利用已经有序的子序列作为分段的单位。

困难的是第二段的选择，为了避免出现糟糕的最差情况，我们需要保证我们的分段是尽可能的平衡的。

让我们退一步看看是否有办法改正它。考虑下面这种有些奇怪的对普通归并排序工作过程的逆向思考：

将整个数组切分成很多长度为1的分区。

当存在多个分区时，奇偶交替的两两合并这些分区（alternating even/odd）并用合并后的分区替代原先的两个分区。

举例来说，如果我们有数组｛1, 2, 3, 4｝那么我们会这么做：
{{1}, {2}, {3}, {4}}
{{1, 2}, {3, 4}}
{{1, 2, 3, 4}}

很容易观察到这和普通归并排序的做法是相同的：我们只是将递归的过程变的明确并且用额外的存储空间取代了栈。但是，这样的方法更直观的展现了我们应该如何使用存在的已排序子序列：在第一步中，我们不将数组分割为长度为1的分段，而是将其分割成很多已排序的分段。然后对这些分段以相同的方法执行合并操作。

现在这个方法只有一个小问题了：我们使用了一些并不需要使用的额外空间。普通的归并排序使用了O(log(n))的栈空间。这个版本使用了O(n)的空间来存储初始的分段情况。

那么为什么我们“等价的”算法却有极为不同的空间消耗？

答案是我在他们的“等价”上面撒谎了。这种方法与普通的归并排序最大的不同在于：普通归并排序在分段操作上是“惰性”的，只有在需要生成下一级时才会生成足够的分段并且在生成了下一级之后就会立刻的丢弃这些分段。

换句话说，我们其实是在归并的过程中边合并边生成分段而不是事先就生成了所有的分段。
现在，让我们看看能否将这种想法转换成算法。

在每一步中，生成一个新的最低级的分段（在普通归并排序中这是一个单独的元素，在我们的上面叙述的版本中这是一个已排序的子序列）。把它加入到一个存储分段的栈中，并且不时的合并栈顶的两个分段以减小栈的大小。不停的重复这样的动作直到没有新的分段可以生成。然后将整个堆栈中的分段合并。

上面的算法还有一个地方没有具体说明：我们完全没有说明何时来执行合并操作。

到此为止已经有太多的文字而代码太少了，所以我打算给出一个暂时的答案：随便什么时候（好坑爹）。

现在，我们先写一些代码。
<code lang="c">
// 我们使用固定的栈大小，这个大小要远远大于任何合理的栈高度
// 当然，我们仍然需要对溢出进行检查
#define STACK_SIZE 1024

typedef struct {
    int *index;
    int length;
} run;

typedef struct {
    int *storage;
    // 存储已经得到的分段(runs,原文作者将得到分段叫做run)
    run runs[STACK_SIZE];
    // 栈顶指针，指向下一个待插入的位置
    int stack_height;

    // 保持记录我们已经分段到哪里里，这样我们可以知道在哪里开始下一次的分段
    // 数组中index < partioned_up_to 是已经分段并存储在栈上的, 而index >= partioned_up_to
    // 的元素是还没有存储到栈上的. 当partitioned_up_to == 数组长度的时候所有的元素都在栈上了
    int *partitioned_up_to;

    int *array;
    int length;

} sort_state_struct;

typedef sort_state_struct *sort_state;
</code>

我们将会给需要的所有函数传入<code inline="true">sort_state</code>的指针

这个排序的基础逻辑代码如下：
<code lang="c">
while(next_partition(&state)){
    while(should_collapse(&state)) merge_collapse(&state);
}
while(state.stack_height > 1) merge_collapse(&state);
</code>

<code inline="true">next_partition</code>函数如果还有未入栈的元素则将一个新的分段压入栈中并返回1，否则返回0。然后适当的压缩栈。最后当全部数组都分段完毕后将整个栈压缩。

现在我们有了第一个适应性版本的归并排序：如果数组中有很多有序的子序列，我们就可以走一个很好的捷径。如果没有，我们的算法依然有（期望）O(nlog(n))的时间效率。

这个“期望”的效率有点不靠谱，在随机的情况下我们需要一个好的策略来控制合并的过程。

我们来想一想是否有更好的限制条件。一个自然的想法来实现这个事情是在栈上维持一个不变式，不断的执行合并直到不变式满足为止。

更进一步，我们想要这个不变式来维持这个栈中最多只能有log(n)个元素

我们来考虑下面这个不变式：每个栈上的元素的长度必须>=两倍于其之下的元素长度，所以栈顶元素是最小的，第二小的是栈顶元素的下一个元素，并且至少是栈顶元素的两倍长度。

这个不变式确实保证了栈中log(n)个元素的要求，但是却造成了将每次栈的压缩变得很复杂的趋势，考虑栈中元素长度如下的情况：

64, 32, 16, 8, 4, 2, 1

假设我们将一个长度为1的分段放到栈上，就会产生如下的合并：
64, 32, 16, 8, 4, 2, 1, 1
64, 32, 16, 8, 4, 2, 2
64, 32, 16, 8, 4, 4
64, 32, 16, 8, 8
64, 32, 16, 16
64, 32, 32
64, 64
128

在之后对合并过程做了更多的优化后，这种情况会显得愈发糟糕（basically because it stomps on certain structure that might be present in the array）。但是现在我们的合并过程还是很简单的，所以我们没有必要担心它，先暂时这样做就可以了。

有一件值得注意的事情：我们现在可以确定我们栈的大小了。假设栈顶元素的长度为1，第二个元素长度必然>=2，之后的必然>=4...所以栈中元素的总长度是2^n-1, 因为在64位机器中在数组中最多只会有2^64个元素（这是一个相当惊人的数组），所以我们的栈只需要最多65个元素，另外留出一个位置给新进栈的元素，则我们需要分配66的空间给栈以保证永远不会出现overflow的情况。

另外还有一点值得注意，我们只需要检查栈顶下面的一个元素长度>=2 * 栈顶元素长度，因为我们在入栈过程中总是保持这个不变式的，并且合并过程只会影响到栈顶两个元素。

为了满足不变式，我们现在将<code inline="true">should_collapse</code>函数修改如下：
<code lang="c">
int should_collapse(sort_state state){
    if (state->stack_height <= 2) return 0;
 
    int h = state->stack_height - 1;

    int head_length = state->runs[h].length;
    int next_length = state->runs[h-1].length;

    return 2 * head_length > next_length;
}
</code>

现在，我们的适应性归并排序完成了，赞！

回过头看之前出过问题的一个例子现在会如何。

考虑下面的逆序数组：

5, 4, 3, 2, 1

当使用我们的适应性归并排序会发生什么？

栈的运行过程如下：
{5}
{5}, {4}
{4, 5}
{4, 5}, {3}
{4, 5}, {3}, {2}
{4, 5}, {2, 3}
{2, 3, 4, 5}
{2, 3, 4, 5}, {1}
{1, 2, 3, 4, 5}

这是一个足够清晰的合并策略了。

但是还有一个更好的办法来对逆序的数组进行排序：直接将其原地反转。

可以很简单的修改我们的算法来利用到这一点，我们已经寻找了递增的子序列，当找不递增的子序列的时候可以很简单的寻找一个递减的子序列，然后将其反转为一个递增的序列加入栈中。

根据上面的策略我们修改找序列的代码如下：
<code lang="c">
if(next_start_index < state->array + state->length){
    if(*next_start_index < *start_index){
        // We have a decreasing sequence starting here.
        while(next_start_index < state->array + state->length){
            if(*next_start_index < *(next_start_index - 1)) next_start_index++;
            else break;
        }
        // Now reverse it in place.
        reverse(start_index, next_start_index - start_index);
    } else {
    // We have an increasing sequence starting here.
        while(next_start_index < state->array + state->length){
            if(*next_start_index >= *(next_start_index - 1)) next_start_index++;
            else break;
        }
    }
}
</code>

和基本的逆序序列相同，我们的排序现在也可以很好的处理混合的情况了。比如下面这种数组：

{1, 2, 3, 4, 5, 4, 3, 2, 1}

执行排序过程如下：

{1, 2, 3, 4, 5}
{1, 2, 3, 4, 5}, {1, 2, 3, 4}
{1, 1, 2, 2, 3, 3, 4, 4, 5}

这样的情况比我们之前的实现又要好上很多！

最后我们还要给算法加上一点优化：

在我们之前的归并排序中有存在一个临界点以便对于小数组转换为插入排序，但在目前我们的适应性版本中没有这样的设置，这意味着如果在没有很多特殊结构可利用的数组中我们的性能可能要低于普通的归并排序。

回头想想之前那个反转的归并排序的过程，将小数组改用插入排序的做法可以这样理解：比起从1的长度开始划分，我们从<code inline="true">INSERTION_SORT_SIZE</code>开始划分，并使用插入排序来确保这一段是有序的。

这提示了我们一个自然的思路来改进我们的适应性版本：当我们发现一个分段要小于一个设定值时，可以使用插入排序来将它增长到设定长度。

这使得我们更改了<code inline="true">next_partition</code>函数的最后面的代码如下：
<code lang="c">
if(run_to_add.length < MIN_RUN_SIZE){
    boost_run_length(state, &run_to_add);
}
state->partitioned_up_to = start_index + run_to_add.length;
</code>

<span class="lang:default decode:true  crayon-inline " >boot_run_length</span>函数如下：

<code lang="c">
void boost_run_length(sort_state state, run *run){
    // Need to make sure we don't overshoot the end of the array
    int length = state->length - (run->index - state->array);
    if(length > MIN_RUN_SIZE) length = MIN_RUN_SIZE;

    insertion_sort(run->index, length);
    run->length = length;
}
</code>

这将算法应用在随机数据上时的性能表现提高到了一个和普通归并排序相比相当具有竞争力的程度。

到这里我们终于得到了一个适应性归并排序，一定程度上可以说是timsort的核心部分。timsort在此之上还添加了很多优化，这些优化也直接推动了它的成功，但是这个算法是所以其他优化的起点和基础。我希望并且计划可以在以后的文章中继续介绍其他的优化部分。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2012-10-13 21:54:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-13 13:54:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%91%e7%90%86%e8%a7%a3timsort-%e7%ac%ac%e4%b8%80%e9%83%a8%e5%88%86%ef%bc%9a%e9%80%82%e5%ba%94%e6%80%a7%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8fadaptive-mergesort]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751222703]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1074</wp:comment_id>
			<wp:comment_author><![CDATA[OpenJDK 源代码阅读之 TimSort | Lee&#039;s Technical Experience]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://aliming.net/blog/186.html</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.215.112.106]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-04-20 09:44:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-04-20 01:44:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 理解timsort [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1146</wp:comment_id>
			<wp:comment_author><![CDATA[图解JDK7的Comparison method violates its general contract异常 by Axb的自我修养 | SealYu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.sealyu.com/2015/07/13/%e5%9b%be%e8%a7%a3jdk7%e7%9a%84comparison-method-violates-its-general-contract%e5%bc%82%e5%b8%b8-by-axb%e7%9a%84%e8%87%aa%e6%88%91%e4%bf%ae%e5%85%bb/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.63.196.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-14 02:43:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-13 18:43:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 这篇文章就不再过多的阐述Timsort整体思路了，有兴趣可以参考[译]理解timsort, 第一部分：适应性归并排序(Adaptive Mergesort) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>码农两月记</title>
		<link>http://blog.kongfy.com/2012/09/%e7%a0%81%e5%86%9c%e4%b8%a4%e6%9c%88%e8%ae%b0/</link>
		<pubDate>Fri, 07 Sep 2012 13:09:05 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[算起来在厂里实习也将近两个月时间了，早该写篇总结之类的东西，一拖再拖，今天正好无事，就稍微小结下在厂里实习的方方面面，也算是给即将找工作的同学们一点参考。

首先上我厂清晰无码大图：
<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/IMG_0087.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/IMG_0087.jpg" alt="baidu" width="800" height="598" class="alignnone size-full wp-image-18" /></a>
<!--more-->
<strong>学习:</strong>
开始实习之后，首先经过了2个星期的简单培训，培训的内容主要集中在公司开发流程、shell脚本、C++多线程、网络编程和代码规范上。因为公司主要的开发环境是Linux，所以可以使用熟悉的Emacs~这个是非常爽的。
后来进小组之后，又通过两周的时间速成了PHP和Yii框架，比较苦逼的是从源代码开始编译配置了一遍LAMP环境，这个过程真是谁做谁知道啊，不过做好记录之后下次就不怕了，也算一种收获吧。特别要感谢无所不知的mentor，解决了我各种各样的问题~
另外公司内部有很多知识积累系统，可以查到很多资料和内部课程，可以说内容包罗万象，比如说我就闲来无事看了一些搜索引擎原理、网站架构、浏览器原理、持续集成和一些用户体验方面的课程。
除此之外还会有各种讲座和课程，有幸听到了一次韩家炜教授的讲座~非常赞！

总体来说，厂里的学习环境还是相当好的，只要肯学，提高还是很大的。但缺点也是有的，工作之后学习的方向比较固定，而且大公司分工很细致，短时间内可能都不能看到项目的全貌，这也对个人的视野造成了一定的限制吧。

<hr />

<strong>工作:</strong>
工作方面并不是单纯的敲代码（这也是我乐于看到的），有时候需要一些调研和一些分享（这对我来说是一种难得的锻炼），平时的工作中需要大量的沟通，对于我这样的毛头小子来说如何做到高效的沟通还是很有挑战性的。
目前来看我在这方面还嫩的很，最明显的提升应该算是终于发现Outlook是个好东西，并且在无数未读邮件的逼迫下实践了一下传说中的邮件过滤，确实很有效果。
不过相对的也要说一些工作中会有些不爽的地方。在公司要走的流程比较复杂，相比于学校里做小项目的自由散漫，参与的人多了，项目都需要流程化，项目一般都要从MRD开始做起，一次一次的报告、评估...平时的会也很多，所以才有人戏称自己为PPT工程师，哈...

<hr />

<strong>生活:</strong>
厂里的条件还是不错的，免费现磨咖啡、点心、定时的水果和小吃，还有便宜的很诡异的自动售货机。另外，食堂相当赞，虽然比学校贵很多，不过...谁吃谁知道。
有时间的话大厦里有乒乓球案、篮球场、瑜伽室和健身房（就靠它了，身体是革命的本钱），都是挥汗的好地方。厂里还有各种社团和各种篮球赛，想当年我也上场拼搏了几分钟，拿下了狂砍2分，怒摘1板的光荣战绩= =！
关于加班的问题...因为是弹性工作制，完全木有打卡，上午大概9-10点钟开始工作，晚上6点以后陆陆续续有人下班，基本7点就没什么人了，但是最要命的是我根本分不清什么时候算是加班...太弹了...一般来讲这边是项目驱动，如果项目急就会很忙，如果项目不紧张就会比较轻松。
最爽的是各种building~此处略去3000字

不过相比之下，下班生活真的是非常非常的枯燥和无聊...租房位置地处五环外，可以说是荒郊野岭，贵的离谱的房租我都已经吐槽无力了，尼玛周围的生活设施怎么就那么少呢？
一副逼人深宅的架势...唉，坚持锻炼吧，要不然真要出师未捷身先死了。

<hr />

就写这些吧，写的比较乱，如果有什么没有说清楚的或者是有错误的地方，欢迎随时联系我。

另外，今天正式确定下成为了一枚苦逼烟酒僧，还是很割舍不下厂里的兄弟们。
纠结了小半年，最后做出的决定似乎还是不能令我完全满意。
但是，纠结也该到此为止了，也没有必要给自己找出各种各样的理由，选择了就不后悔。
努力吧~在自己的道路上不断前进就是了！

<strong>与君共勉</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2012-09-07 21:09:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-07 13:09:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%a0%81%e5%86%9c%e4%b8%a4%e6%9c%88%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="thinking"><![CDATA[胡思乱想]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752185197]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>通过VNC连接Linux远程桌面</title>
		<link>http://blog.kongfy.com/2013/02/%e9%80%9a%e8%bf%87vnc%e8%bf%9e%e6%8e%a5linux%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2/</link>
		<pubDate>Sat, 23 Feb 2013 02:05:24 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[因为特殊的需求关系，琢磨了一下如何在本地连接远程Linux主机的桌面环境。翻了不少网上的相关文章，大部分都只讲了步骤没有说为什么这么做，我就简单再复述一遍吧，加深一下印象。
环境如下：
<code lang="bash">
本地：OS X 10.8.2
服务器：CentOS 6(64位)
</code>
基本原理其实很简单，要连接服务器的远程桌面环境，首先需要在服务器准备好桌面环境，然后通过远程桌面的协议实现远程访问。

<!--more-->

<h2>一、安装服务器桌面环境</h2>
因为连接的是服务器，所以一般是没有预装有桌面环境的，需要自行安装。
安装桌面环境主要两部分，X窗口系统和桌面环境（KDE或Gnome等）。
关于X窗口系统的介绍参见<a href="http://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1">这里</a>，关于X窗口系统和KDE、Gnome之间的关系参见<a href="http://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%9E%B6%E6%9E%84">这里</a>，简单来说：
<blockquote>
Gnome 和 KDE 是“桌面系统”，一种很多程序和函数库的集合。它们的设计目的是提供一致的方便的操作方式来满足普通用户的需要。它们不但包含窗口管理器，还有很多实用程序和应用程序，比如配置程序，工具条，编辑器，绘图工具…… 其实 Gnome 可以和很多窗口管理器合作，在历史上，Gnome 使用过的窗口管理器包括 englightenment, sawmill, sawfish, metacity。KDE 的窗口管理器叫做 kwin。 
</blockquote>
言归正传，既然知道了KDE、Gnome需要依赖于X窗口系统运行，首先安装X窗口系统：
<code lang="bash">
yum grouplist #查看组列表，确认是否已经安装过X窗口系统
yum groupinstall "X Window System" #安装X窗口系统
</code>
成功安装后再安装桌面环境，如果要安装Gnome：
<code lang="bash">
yum groupinstall "Desktop" #CentOS5下为 "GNOME Desktop Environment"
</code>
至此服务器上的桌面环境已经准备就绪了，后续可以自行安装中文支持、输入法等，方法类似，不加赘述了。

<h2>二、安装配置VNC server</h2>
既然已经有桌面环境了，事情就简单了，通过远程桌面访问即可，可以采用的方法有很多，这里选用VNC作为访问手段。关于VNC的介绍参见<a href="http://zh.wikipedia.org/wiki/VNC">这里</a>。
VNC分为两部分，server和client，client运行在本地机器，而server运行在目标机器。client通过与server进行通信将远程的桌面在本地显示，而server运行在目的端(Xvnc)，响应client端的请求。
首先在服务器端安装VNC server程序：
<code lang="bash">
yum install tigervnc-server #CentOS5中为vnc-server
</code>
配置VNC server：
<code lang="bash">
su kongfy #切换至要开启远程桌面的账户，重要！
vncpasswd #设置vnc连接密码
vim ~/.vnc/xstartup #修改配置文件
</code>
配置文件的最后一行
<code lang="bash">
twm &
</code>
修改为
<code lang="bash">
gnome-session &#GNOME
startkde &#KDE
</code>
上面两个按照安装的桌面环境选择，twm是X窗口系统自带的一个非常简陋的窗口管理器，通过修改该文件可以改变vnc默认开启的桌面系统。<em>PS:这一步我并没有做还是默认启动了Gnome环境，不解。</em>
最后启动vncserver：
<code lang="bash">
vncserver
</code>
如果一切顺利，你会看到类似下面的输出：
<code lang="bash">
New 'server:1 (kongfy)' desktop is server:1

Starting applications specified in /home/kongfy/.vnc/xstartup
Log file is /home/kongfy/.vnc/server:1.log
</code>
输出中的编号就是启动的vnc远程桌面的ID，之后在连接中会用到。

<h2>三、连接远程桌面</h2>
VNC的连接可以通过浏览器或客户端进行访问，浏览器访问的方法我没有实际测试，不谈。
客户端在Win下可以采用VNCViewer进行，Mac下使用<a href="http://sourceforge.net/projects/cotvnc/">Chicken of the VNC</a>连接。
以Chicken of the VNC为例，开始连接：
<a href="http://blog.kongfy.com/wp-content/uploads/2013/02/1707697096.png"><img src="http://blog.kongfy.com/wp-content/uploads/2013/02/1707697096.png" alt="VNC连接" width="336" height="314" class="aligncenter size-full wp-image-30" /></a>
输入要连接服务器的域名（或IP）、vnc编号和密码即可连接
连接成功：
<a href="http://blog.kongfy.com/wp-content/uploads/2013/02/471457303.png"><img src="http://blog.kongfy.com/wp-content/uploads/2013/02/471457303.png" alt="471457303" width="1024" height="790" class="aligncenter size-full wp-image-31" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2013-02-23 10:05:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-23 02:05:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%9a%e8%bf%87vnc%e8%bf%9e%e6%8e%a5linux%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="vnc"><![CDATA[VNC]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752184275]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>再见，百度</title>
		<link>http://blog.kongfy.com/2013/02/%e5%86%8d%e8%a7%81%ef%bc%8c%e7%99%be%e5%ba%a6/</link>
		<pubDate>Sat, 02 Feb 2013 11:57:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[2013年1月21号，在大厦办理离职，结束了我在百度为期半年多实习。走出大厦的一刻，有种难以表述的感觉，有轻松，也有失落，总的来说更多的还是对这半年百度生活的怀念。

翻看邮件，找出当时收到的邮件Offer，日期是2012年5月12日，五味杂陈。仍清楚的记得收到邮件的时候的那种激动自豪的心情，记得那种对公司憧憬和向往的感觉。也记得在2012年7月11日入职当天，第一次踏入百度大厦，在五福签下卖身契的那一刻，那种对未来的无限可能的幻想。半年之后，这种感觉却好像昨天一样。耐心从头教我的导师俊杰、高富帅肖总、冷冷的辉总、坑我鸡翅的永宽、靠谱的学长臧志、乐观的真男人刚哥，还有一起实习的兄弟朝斌、陈扬，还有好多好多人...回忆这段实习生活，满满的都是对你们的感激。

我一向不是个爱写东西的人，离职几天一直没下定决心写点什么。前几日看到网上爆火的<a href="http://cnlox.is-programmer.com/posts/37276.html">《李彦宏的“罪己诏”》</a>和<a href="http://cnlox.is-programmer.com/posts/37288.html">《慎言多思》</a>两篇文章，才发现有写点东西的必要了。Lox的这两篇文写的还是比较实在的，只是可能带入了自己过多的情感因素，只写出了坏的方面，对好的方面只字未提。不过我作为一个已经离职的半调子实习生，也没有水平来做什么深入的分析，这些事情还是留给高管什么的去操心吧。对我来说最为触动的反而是Lox最后不经意的一句“谨以此文，纪念我那九个月‘不合格’的百度岁月”。我想，我也该趁这段记忆还热乎，赶紧留些文字纪念一下这更不合格的半年百度岁月。

<!--more-->

回顾这半年，自己感觉在百度的历练还是让自己获得了很大的成长，不只是技术上，说实话，我觉得在其他方面的成长来的更有价值。

简单说说技术方面吧，因为自己本身就比较水，所以来百度这边基本是各种不会各种开眼界的状态，好在我还算是比较好学，再加上导师俊杰也很乐于指导我（再次感谢！），所以这半年实习就技术方面绝对是大跨步的前进了，见了很多以前雾里看花的东西，也看到了真正的软件工程形态，最具体的体现就是我那启用不久却日渐膨胀的Evernote记录，这也是一笔小小的财富了。和自己学到的相比，收获更大的反而是自己没学到的东西，在这半年，我对学校学的和工业界之间的差距有了一个大概的认识，清楚的看到了自己和一个合格百度工程师之间的差距，这差距大到让自己感到低迷和失望，见<a href="http://blog.kongfy.com/2012/09/%e6%8a%80%e6%9c%af%e8%af%84%e5%ae%9a%e4%b8%8d%e5%8f%8a%e6%a0%bc/" title="技术评定:不及格" target="_blank">这里</a>。通过了解各种各样不同的产品和相关技术，我也更加明确了自己想做的工作和日后的努力方向，这才是我感到最开心和最重要的。

还记得俊杰跟我说“平衡好工作和生活”。这句话一直伴随着我的实习生活，思考、探索过这句话的答案。太难了，工作和生活该如何做出一个完美的平衡？这是每个人都要努力解答近40年的问题。

还记得刚来到百度的时候，心中满脑子都是奋斗，要拼命，要牛逼。当时的我，才出学校，不懂得什么是“生活”，天真的认为年轻时候只有工作才是最重要的，只有在这几年有所成就，以后年纪大了才有资格谈生活。“生活”对那时的我来说，只是养老的同义词罢了。直到后来发生的一些事情，让我的想法开始有了改变，我开始想，人活这一辈子究竟为了什么？是为了证明自己么？是为了站在顶峰么？想了一段时间，我发现不是这样的...人只能活这一辈子，不是为了竞争而活，而是为了幸福而活。

做自己热爱的工作可以产生幸福感，工作中取得的成就也会产生幸福感，但却不能把这些当作是人生的<strong>目的</strong>所在，通过努力取得成就是获得幸福的<strong>手段</strong>，而并不是我活着的<strong>目的</strong>。假设人生是一道很大很大的背包问题，我们一辈子的时间和身体健康就是这个人生背包的容量，而摆在我们面前的物品要消耗不同的时间、消耗我们的健康，但同时会得到不同幸福值作为返还。那么，工作不就是这大大小小物品中的其中一件？我们通过投入时间和健康来工作，获得的成就、他人的认可都能够带给我们幸福感，但还有其他无数的物品也可以带给我们幸福感，譬如爱情、友情和年老后依然健康的身体。无情的是，我们包的容量却是有限的，那么该如何在这些物品中做出选择？有人使用了贪心的方法，尽可能的获得当前幸福值最大的物品，比如疯狂的打游戏。也有人做出单一化的选择，一门心思的工作。但是，这些方案都有自己的问题，当这部分物品到手后，却发现自己的包已经再也装不下其他幸福值更大的物品了。这只是个比喻，真正的生活要复杂的多，不同事情之间会有更加复杂的关联和相互的影响，而不是一个个孤立的物品。如何在这些“物品”中做出平衡以到达尽可能大的幸福值总和？我还没有想清楚，前人经验无法复制，可能，这个问题需要我一辈子的思考和实践来给出答案了。

但有一点却是肯定的，健康太重要了。之前听过一句话，如果你开始担心自己的身体健康，那说明你已经老了。我想我是老了，不自觉的开始担心自己的身体。如果让我说IT人最缺的是什么，我一定会说健康。频繁的加班、熬夜，巨大的工作压力，公司的同事都以超过一般人的速度快速衰老着，健康，曾经离我那么远，现在却心惊胆颤。

另外一方面不得不提的，是关于我的性格。还是too young too simple，太幼稚了，工作半年才知道自己实在跟成熟沾不上半点关系，为人处事都欠缺很多，心气太高，锐气太重。好在这半年身边有这么多榜样可以给我从旁观察，比如EQ超高的肖总、老道的俊杰、还有年轻的经理存利哥，都是成熟可靠的好榜样啊。但愿再经过一段时间磨砺后我不再如此幼稚，也能像个男人一样去战斗！哈哈。

就写这么多吧，都是写不成熟的想法，胡写一通留作纪念。
简单总结就是：革命尚未成功，同志们仍需努力。

感谢百度给了我这样的机会，让我认清了前进的方向。感谢在这半年生活中遇到过的所有人！（除了该死的黑中介，&#@！），感谢国家！（是不是该写到最前面...汗）
再见！百度！谢谢！百度！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2013-02-02 19:57:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-02 11:57:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%86%8d%e8%a7%81%ef%bc%8c%e7%99%be%e5%ba%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="thinking"><![CDATA[胡思乱想]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752184392]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>技术评定:不及格</title>
		<link>http://blog.kongfy.com/2012/09/%e6%8a%80%e6%9c%af%e8%af%84%e5%ae%9a%e4%b8%8d%e5%8f%8a%e6%a0%bc/</link>
		<pubDate>Thu, 27 Sep 2012 13:18:17 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[一起实习的一个兄弟今天离职返校了，临走前聊起了一些关于学校、学习、技术和成绩之类的话题，内容略去不提，但却让我惊醒：我已经是一个大四即将毕业的本科生了。

在学校学习了三年，自己究竟有几斤几两？一年后本科毕业，能否称得上是合格的南大（南京大学）计算机毕业生？思前想后，结果是十分悲观的...作为一个在计算机系学习了三年的本科学生，我完全不及格...最悲哀的是，一直以来在学校里自我感觉良好，但仔细想想，<strong>却没有任何一个拿得出手的技术方向！</strong>

<!--more-->

<strong>一、语言</strong>
“语言不重要，算法、思想才是最重要的”，这样的话不知道听过多少次，我自己也深信不疑，但是却忽略了一个重要的前提，能够忽略语言本身一定是在精通掌握了至少一门语言之后才可以的。并不是说能够熟练写各种“hello world”就能说语言是浮云了，算法和思路是大脑，但语言是手脚，手脚不灵活如何实际构造自己的想法？当你有一门精通的语言并形成了编程思维后，才算是进入了语言是浮云的境界，各种语言信手拈来而没有丝毫混乱。“语言不重要”的本意应该是强调不要拘泥于各个语言的宗教崇拜中，而要忠诚于思想，灵活的使用的各种语言解决问题，而无知的我却将其理解成了掌握语言是不重要的，坑死爹不偿命啊...

反观我自己，通晓各种语言的"hello world"写法，C/C++/JAVA/Python/PHP 都在写，C写的平平无奇、C++不能控制标准类库、JAVA对各种设计理念机制处于完全无知状态、Python强大的类库和美学都只是略微有所感受、PHP更是只能捉起皮毛，完全是当作加$并且没类型的C在写...写来写去，没有哪门语言是真的拿的出手的...悲哀

<strong>亡羊补牢：</strong>
《C专家编程》
《Python Cookbook》
<del>《Thinking in C++》</del>

<strong>二、操作系统</strong>
操作系统本来应该是我最有自信的科目之一了，因为大二跟着JYY大神做的操作系统实验，完成了那个虽然mini但是完整的操作系统。不可否认这是个很可以拿出来装X的实验，但说懂操作系统？我真是太天真了...

自己做的操作系统只是个原理性实验性的项目，什么部分都是用的最简单的方法。对现在的操作系统的运行机制缺乏了解，多线程多进程编程经验不足、进程间通信的经验不足、Linux下的进程状态和进程结构也了解的不多、对系统IO模型的了解也很差，摸不透这些，如何能写出Linux环境下的高性能的程序？

<strong>亡羊补牢：</strong>
《深入理解计算机系统》
《UNIX环境高级编程》
《UNIX网络编程》

<strong>三、数据库（关系数据库，非KV）</strong>
这一点是最屎最悲哀的。在学校学了一个学期的数据库课程，拿了个90+的分数洋洋自得。现在看真是讽刺的很...

学校教授的都是关系数据库的理论模型、范式理论和根据范式进行规范化设计的那一套，实际用到的学了一点点粗浅的SQL语句，了解了一扭扭的事务和日志。在应用场景下除了无力感还是无力感，记录在磁盘中是如何存储的？按什么顺序存储？怎么根据B+树估计查询的效率？聚集索引和非聚集索引的效率差别的来源？索引应该如何设计？SQL语句该如何优化？这些都知之甚少，更别提高一些层次的反范式设计、分表优化、分布式数据库设计了...

<strong>亡羊补牢：</strong>
《数据库系统：面向应用的方法》

<strong>四、分布式与云计算</strong>
这是读研的方向、自己感兴趣所以乱看了很多资料，包括一些分布式的理论和行业上现在的发展和热门技术。但是深度远远不够，Google的几篇论文都没有认真的研读过，真是一大遗憾。

<strong>总结</strong>
反省一下自己目前的知识结构，确实发现了很多问题，得出一个结论：学术三流、技术坑爹。现在出去工作确实是坑公司啊...感受到差距了，赶紧补上吧，至少在研一结束前，把这些知识的漏洞解决，有了良好的基础才能谈更高层次的发展不是。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2012-09-27 21:18:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-27 13:18:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8a%80%e6%9c%af%e8%af%84%e5%ae%9a%e4%b8%8d%e5%8f%8a%e6%a0%bc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="thinking"><![CDATA[胡思乱想]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752184802]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>架设简单git服务器</title>
		<link>http://blog.kongfy.com/2013/03/%e6%9e%b6%e8%ae%be%e7%ae%80%e5%8d%95git%e6%9c%8d%e5%8a%a1%e5%99%a8/</link>
		<pubDate>Thu, 28 Mar 2013 05:33:17 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[看到标题，最容易想到的问题就是：“为什么不用github？”。
确实github十分好用，但在如下一些情况下你确实需要一个自己的git服务器：
<ol>
<li>自己的代码太丑，羞于放在github上...</li>
<li>我很自私，不想开源，又很穷，买不起github付费服务...</li>
<li>开发环境不能连接外网（这是真实存在的）...</li>
<li>我就是想玩一下...</li>
</ol>
假设现在已经有了需求，其实实际操作的过程还是很简单，参照<a href="http://git-scm.com/book/zh">《Pro Git》</a>所述即可。

<!--more-->

首先要明白搭建git服务器可以使用的协议有三种：ssh、http和git，为了简单起见我选择最容易使用的ssh协议进行搭建。各种协议的优缺点在书中有详细叙述，摘出关于ssh的一段：
<blockquote>
<strong>优点</strong>
使用 SSH 的好处有很多。首先,如果你想拥有对网络仓库的写权限,基本上不可能不使用 SSH。其次,SSH 架设相对比较简单—— SSH 守护进程很常见,很多网络管理员都有一些使用经验,而且很多操作系统都自带 了它或者相关的管理工具。再次,通过 SSH 进行访问是安全的——所有数据传输都是加密和授权的。最后, 类似 Git 和 本地协议,SSH 很高效,会在传输之前尽可能的压缩数据。
<strong>缺点</strong>
SSH 的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据,人们也必须在能通过 SSH 访问主 机的前提下才能访问仓库,这使得 SSH 不利于开源的项目。如果你仅仅在公司网络里使用,SSH 可能是你唯 一需要使用的协议。如果想允许对项目的匿名只读访问,那么除了为自己推送而架设 SSH 协议之外,还需要 其他协议来让别人获取数据。
</blockquote>
下面开始行动，首先在服务器上为git创建用户
<code lang="bash">
useradd git
passwd git
su git
cd ~
</code>
然后创建自己的仓库根目录，并创建项目
<code lang="bash">
mkdir projects
cd projects
mkdir work.git
cd work.git
git --bare init
</code>
到这一步其实你的git仓库已经初步可用了，将本地已有工程上传到新建的空项目中：
<code lang="bash">
# 在 John 的电脑上 
cd work
git init
git add .
git commit -m 'initial commit'
git remote add origin git@gitserver:/home/git/projects/work.git
git push origin master
</code>
简单的获取该项目：
<code lang="bash">
git clone git@gitserver:/home/git/projects/work.git
</code>
虽然git基本操作已经可用了，但是有一个问题...这样做所有的项目成员都需要知道服务器git用户的密码...这很不合理，解决方案是使用RSA密钥对为每个开发成员添加信任关系，这也是github使用的方案。
所有开发者首先需要生成自己的密钥对
<code lang="bash">
ssh-keygen
</code>
该指令可以生成一对密钥，默认生成在~/.ssh目录下，开发成员将自己的公钥(id_rsa.pub)发给服务器管理员，由服务器管理员为其添加git用户的信任关系
<code lang="bash">
cat id_rsa.pub >> /home/git/.ssh/authorized_keys
</code>
有了这个信任关系，开发成员就可以正常的使用git服务而无需知道git用户的密码。更进一步，可以通过修改git用户的shell来防范git用户的ssh行为。编辑/etc/passwd文件，其中类似如下的行：
<code lang="bash">
git:x:1000:1000::/home/git:/bin/sh
</code>
修改为（用git-shell替换sh）：
<code lang="bash">
git:x:1000:1000::/home/git:/usr/bin/git-shell
</code>
这样如果有人尝试通过ssh登录git用户，则只能使用git-shell服务，而保护了ssh安全。
在这里可能会出现如下报错：
<code lang="bash">
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
</code>
这是因为没有找到对应的git-shell-commands文件，手动解决方案如下：
<code lang="bash">
cp -r /usr/share/doc/git/contrib/git-shell-commands /home/git/
chown -R git.git git-shell-commands
chmod +x /home/git/git-shell-commands/help
chmod +x /home/git/git-shell-commands/list
</code>
su git测试下，应该能看见
<code lang="bash">
Run ‘help’ for help, or ‘exit’ to leave. Available commands:list
</code>
如果你顺利完成了上面的步骤并且还没尽兴，那就再为你的git服务器添加一个图形化界面吧：GitWeb
<code lang="bash">
yum install gitweb
</code>
安装后修改httpd的配置文件，增加如下内容：
<code>
<VirtualHost *:80>
  ServerName gitserver
  DocumentRoot /var/www/git

  <Directory /var/www/git>
    Options +ExecCGI
    AddHandler cgi-script .cgi
    DirectoryIndex gitweb.cgi
  </Directory>

</VirtualHost>
</code>
修改/etc/gitweb.conf让gitweb指向你的仓库根目录
<code>
our $projectroot = "/home/git/projects";
</code>
重启httpd，访问域名查看效果：
<a href="http://blog.kongfy.com/wp-content/uploads/2013/03/2387854333.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2013/03/2387854333.jpg" alt="gitweb" width="1909" height="924" class="aligncenter size-full wp-image-41" /></a>
如果提示无法找到项目，不要忘记检查项目目录的读权限以及上级目录的执行权限～
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2013-03-28 13:33:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-28 05:33:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9e%b6%e8%ae%be%e7%ae%80%e5%8d%95git%e6%9c%8d%e5%8a%a1%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753588776]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>实习面试小结</title>
		<link>http://blog.kongfy.com/2012/08/%e5%ae%9e%e4%b9%a0%e9%9d%a2%e8%af%95%e5%b0%8f%e7%bb%93/</link>
		<pubDate>Sun, 26 Aug 2012 07:46:50 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[这<b style="color:red">不是</b>一篇面经，如果你想看到一篇<b>全面、牛*、高端</b>的面经，我们的面霸<a href="http://rebornix.com">鸟哥</a></b>同志已经写过了，请移步<a href="http://rebornix.com/2012/04/26/面试经验之登陆上海滩.md/">这里</a>。我下面要写的只不过是通过两个月来参加找实习大军的奋战过程中经历和学到的一些经验教训，留作纪念，也算是备忘。

这次找实习过程中总共投了四家公司，华为、腾讯、eBay、百度四家，最后确定了去百度实习。
<!--more-->
笔试面试来的最早是微软中国，也是这次同学们拿Offer拿的最多的公司，但是因为在网投时微软中国要求中英文简历各一份，我没有准备英文简历而放弃（我是2B我会到处乱说么）...于是当各位大神纷纷拿到Offer时我只能投去羡慕嫉妒恨的眼神了。<b>投简历不能怕麻烦，不要过高的估计了难度，投了才不后悔！</b>这应该是微软给我留下的重要教训。

再之后就是华为和腾讯两家，腾讯的笔试时间是投简历时就写明了的，但投简历时感觉还有一个多月，所以没有在意，而当华为的上机通知发到手机上的时候，我随手就确认了，结果发现和腾讯的笔试时间冲突了，只好放弃了华为。<b>注意日程安排，你不会分身术。</b>腾讯的笔试考的都是基础题，感觉腾讯很重视基本功，这提醒了我们平时要<b>脚踏实地，学好基本功。</b>

eBay的笔试非常水，顺利通过。但面试是个悲剧，因为对eBay提供的各种职位不了解，也没有仔细研究，看PD要的人多，又要C++/JAVA，于是就报了。结果一面的时候PD面试官机关枪式的JAVA问题将我彻底击溃...我多次尝试把问题转向C/C++/Python的方向，可是面试官毫无反应...后来才知道PD平时的工作全部是JAVA开发，也算死个明白。<b>一定要清楚自己投递的岗位的工作、需求和自己的优势，不能乱投一气。</b>老实说，作为本科生，对各种职位完全是迷茫的，很容易产生先投再说的想法，这也是面试的大忌，基本上选PD的那一刻我就已经败了。这是eBay惨案留给我的教训，也是区分面霸和菜鸟的重要标准。

百度是最晚的一家，而百度的风格和腾讯迥然不同。百度的笔试和面试题都非常的开放，笔试是6道题目、3张白纸，基本都是算法和发散的系统设计题。一面的一个小时基本在不停的想题目讲思路然后再想题目讲思路...二面也解了一两道题目，不过更偏重于问项目相关问题，而且面试官并不会只问你是怎么做的，面试官会问一些从你的项目中拓展开的设计或者思路问题，比如我有一个简单操作系统的项目，面试官就问我如果把你的操作系统做到多核环境下要怎么调整、进程在CPU间切换需要的代价是什么（顺便膜拜面试官，感觉百度的面试官真的很厉害，思路很快，而且知识面非常广，我跟他聊的边边角角他都懂。另外态度也非常好，面试过程完全没有压力，面试完后都会从房间一直送到电梯口~印象非常深刻）。三面是BOSS面，BOSS确实气场非常足，基本不涉及技术问题。他了解我的纠结，花了很大的功夫给我介绍他们提供的职位，帮我分析，看我适合哪一个。然后又帮我介绍了一些关于工作和读研的取舍上的经验，非常感谢！

百度的面试确实收获很多，首先，是<b>深度和广度的平衡</b>，我们平时应该尽可能的多看一些东西，拓宽自己的眼界，但不可能每一个方向都成为专家，这就需要在深度和广度之间做好平衡，不能眼光狭窄，但也不能每个都懂点，每个都不精。没有哪个公司需要你精通数门语言，而只需要你在某个方面有过人之处。第二，<b>解决问题的能力大于对技术的了解</b>，本科阶段，没有必要把自己培养成一个XXX技术的专家，技术实在太多了，变化也太快了，而大公司更重视的是你思考问题和解决问题的能力，二面面试官明确的告诉我“百度并不在意本科生来之前了解了多少技术”，技术方面在进入公司后有前辈带会成长的非常快，而思考问题的能力是公司培养不了的。第三，<b>要有明确的人生规划</b>，通过这次面试，感觉计算机行业细分的方向实在太多了，而能拼能学的时间是宝贵的，如果总是转来转去终将一事无成，要尽早确定方向努力奋斗才是。

最后引用<a href="http://weibo.com/baiduop">百度运维部</a>微博上的一段话：
<blockquote>面试中，同学们问到最多的问题是给他们建议，应该学什么，应该做什么。其实学和做的终极目标都是解决问题，如何高效准确的解决问题，如何判断已有方案是否可行，关键点和风险点在哪里，这是我们学和做的目的——从需要解决的问题去看我们要学什么，要做什么。
短短不到一个小时的面试时间，无法给一个准确详细的建议。说的更通俗一些就是，学习的关键看的是在学习中的思考深度，以及对学习内容的组织运用能力，而并不是具体学什么。很多内容大家都学过，为什么有的人是优秀的，有的人是平庸的，区别就在这里。</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2012-08-26 15:46:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-26 07:46:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9e%e4%b9%a0%e9%9d%a2%e8%af%95%e5%b0%8f%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="thinking"><![CDATA[胡思乱想]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753576487]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenStack Havana（Ubuntu 13.10）安装笔记</title>
		<link>http://blog.kongfy.com/2014/03/openstack-havana%ef%bc%88ubuntu-13-10%ef%bc%89%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Wed, 19 Mar 2014 03:38:25 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[安装配置OpenStack最好的资料是OpenStack的<a href="http://docs.openstack.org/havana/install-guide/install/apt/content/" target="_blank">官方安装指南</a>，我就是按照官方指南一步一步进行的，虽然基于的操作系统版本不同（指南中使用的是Ubuntu 12.04），所幸没有遇到什么诡异的问题，不废话了，整个过程记录如下。

<hr />
<h2>安装环境</h2>
<blockquote>
操作系统：Ubuntu 13.10
配置机器数：1（单点安装）
机器网卡数量：2
Hypervisor类型：KVM
</blockquote>

<!--more-->

<hr />
<h2>安装顺序</h2>
OpenStack主要包括Identity Service、Image Service、Compute Service、Dashboard、Block Storage等几部分组成，OpenStack Havana的整体结构图如下（图片出自官方安装指南）：

[caption id="attachment_54" align="aligncenter" width="859"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/F263D492-D28B-468D-87BB-C1A5860E0FCC.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/F263D492-D28B-468D-87BB-C1A5860E0FCC.jpg" alt="OpenStack基本结构概况" width="859" height="782" class="size-full wp-image-54" /></a> OpenStack基本结构概况[/caption]

我没有安装图中全部的模块，仅选择了主要的几部分，按照下面的顺序进行安装：
<ol>
	<li>基础服务</li>
	<li>Identity Service(keystone)</li>
	<li>Compute Service(nova)</li>
	<li>Dashboard(horizon)</li>
	<li>Block Storage(cinder)</li>
</ol>

<hr />
<h2>一些约定</h2>
<ul>
	<li>由于本文是按照单节点的结构进行安装的，所以文中多使用localhost（127.0.0.1）来进行配置。如果需要在多节点环境中进行安装，将localhost改为对应的节点即可。</li>
	<li>下文中将不包含安装配置中具体使用的密码，所有使用到的密码如下：</li>
</ul>
<table>
<thead>
<tr><th><strong>密码</strong></th><th><strong>描述</strong></th></tr>
</thead>
<tbody>
<tr><td>RABBIT_PASS</td><td>RabbitMQ的guest用户密码</td></tr>
<tr><td>KEYSTONE_DBPASS</td><td>keystone使用的数据库密码</td></tr>
<tr><td>ADMIN_PASS</td><td>admin用户密码</td></tr>
<tr><td>GLANCE_DBPASS</td><td>glance使用的数据库密码</td></tr>
<tr><td>GLANCE_PASS</td><td>glance用户密码</td></tr>
<tr><td>NOVA_DBPASS</td><td>nova使用的数据库密码</td></tr>
<tr><td>NOVA_PASS</td><td>nova用户密码</td></tr>
<tr><td>CINDER_DBPASS</td><td>cinder使用的数据库密码</td></tr>
<tr><td>CINDER_PASS</td><td>cinder用户密码</td></tr>
</tbody>
</table>
<strong>干掉弱密码：</strong>一种好用的随机密码生成：
<code lang="bash">
$ openssl rand -hex 5
</code>

<hr />
<h2>基础服务</h2>
安装ntp，作为OpenStack集群的时钟同步服务。如果为多节点安装，修改除Controller以外其他所有节点的/etc/ntp.conf将server指向Controller节点以同步时钟。
<code lang="bash">
$ apt-get install ntp
</code>
安装MySQL并初始化
<code lang="bash">
$ apt-get install python-mysqldb mysql-server
$ mysql_install_db
$ mysql_secure_installation
</code>
添加OpenStack的Ubuntu源
<code lang="bash">
$ apt-get install python-software-properties
$ add-apt-repository cloud-archive:havana
$ apt-get update && apt-get dist-upgrade

$ reboot
</code>
安装消息队列服务rabbitmq，并修改rabbitmq guest用户的密码供OpneStack使用
<code lang="bash">
$ apt-get install rabbitmq-server
$ rabbitmqctl change_password guest RABBIT_PASS
</code>

<hr />
<h2>安装Identity Service</h2>
<code lang="bash">
$ apt-get install keystone
</code>
修改keystone配置文件/etc/keystone/keystone.conf
<code>
[DEFAULT]
# 替换一个随机的admin token
admin_token = ADMIN_TOKEN

[sql]
# 配置keystone数据库，如果为多节点安装，把localhost替换为数据库所在节点
connection = mysql://keystone:KEYSTONE_DBPASS@localhost/keystone
</code>
在MySQL中为keystone创建数据库和用户
<code lang="bash">
$ mysql -u root -p
mysql> CREATE DATABASE keystone;
mysql> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
IDENTIFIED BY 'KEYSTONE_DBPASS';
mysql> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
IDENTIFIED BY 'KEYSTONE_DBPASS’;
</code>
初始化keystone数据表
<code lang="bash">
$ keystone-manage db_sync
</code>
重启服务
<code lang="bash">
$ initctl restart keystone
</code>
创建初始用户、角色等
<code lang="bash">
$ export OS_SERVICE_TOKEN=ADMIN_TOKEN
$ export OS_SERVICE_ENDPOINT=http://localhost:35357/v2.0
$ keystone tenant-create --name=admin --description="Admin Tenant"
$ keystone tenant-create --name=service --description="Service Tenant"
$ keystone user-create --name=admin --pass=ADMIN_PASS --email=admin@example.com
$ keystone role-create --name=admin
$ keystone user-role-add --user=admin --tenant=admin --role=admin
</code>
为keystone注册服务和endpoint
<code lang="bash">
$ keystone service-create --name=keystone --type=identity \
  --description="Keystone Identity Service"
$ keystone endpoint-create \
  --service-id=keystone \
  --publicurl=http://localhost:5000/v2.0 \
  --internalurl=http://localhost:5000/v2.0 \
  --adminurl=http://localhost:35357/v2.0
</code>
<a href="http://docs.openstack.org/havana/install-guide/install/apt/content/keystone-verify.html" target="_blank">验证keystone是否可以正常工作</a>

<hr />
<h2>安装Image Service</h2>
镜像存储直接使用本地file system作为存储后端，所以不需要额外安装Object Storage等存储服务
<code lang="bash">
$ apt-get install glance python-glanceclient
</code>
修改glance配置文件/etc/glance/glance-api.conf和/etc/glance/glance-registry.conf
<code>
[DEFAULT]
# 设置数据库
sql_connection = mysql://glance:GLANCE_DBPASS@localhost/glance

# 设置keystone验证信息
[keystone_authtoken]
auth_host = localhost
auth_port = 35357
auth_protocol = http
admin_tenant_name = service
admin_user = glance
admin_password = GLANCE_PASS

[paste_deploy]
flavor = keystone
</code>
创建数据库和用户
<code lang="bash">
$ mysql -u root -p
mysql> CREATE DATABASE glance;
mysql> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
IDENTIFIED BY 'GLANCE_DBPASS';
mysql> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
IDENTIFIED BY 'GLANCE_DBPASS’;
</code>
初始化glance数据库
<code lang="bash">
$ glance-manage db_sync
</code>
在/etc/glance/glance-api-paste.ini和/etc/glance/glance-registry-paste.ini中添加keystone验证信息
<code>
[filter:authtoken]
paste.filter_factory=keystoneclient.middleware.auth_token:filter_factory
auth_host=localhost
admin_user=glance
admin_tenant_name=service
admin_password=GLANCE_PASS
</code>
为glance创建用户
<code lang="bash">
$ keystone user-create --name=glance --pass=GLANCE_PASS \
   --email=glance@example.com
$ keystone user-role-add --user=glance --tenant=service --role=admin
</code>
为glance注册服务和endponit
<code lang="bash">
$ keystone service-create --name=glance --type=image \
  --description="Glance Image Service"
$ keystone endpoint-create \
  --service-id=glance \
  --publicurl=http://localhost:9292 \
  --internalurl=http://localhost:9292 \
  --adminurl=http://localhost:9292
</code>
重启服务
<code lang="bash">
$ initctl restart glance-registry
$ initctl restart glance-api
</code>
<a href="http://docs.openstack.org/havana/install-guide/install/apt/content/glance-verify.html" target="_blank">验证glance是否正常工作</a>

<hr />
<h2>安装Compute Service(Controller部分)</h2>
<code lang="bash">
$ apt-get install nova-novncproxy novnc nova-api \
  nova-ajax-console-proxy nova-cert nova-conductor \
  nova-consoleauth nova-doc nova-scheduler \
  python-novaclient
</code>
修改nova配置文件/etc/nova/nova.conf
<code>
# 设置数据库
sql_connection = mysql://nova:NOVA_DBPASS@localhost/nova

# 设置keystone验证信息
auth_strategy = keystone
auth_host = localhost
auth_port = 35357
auth_protocol = http
admin_tenant_name = service
admin_user = nova
admin_password = NOVA_PASS

# 设置消息队列
rpc_backend = nova.rpc.impl_kombu
rabbit_host = localhost
rabbit_password = RABBIT_PASS

# 设置VNC
# 修改为自己的public_ip
my_ip=114.221.83.138
vncserver_listen=114.221.83.138
vncserver_proxyclient_address=114.221.83.138
</code>
创建数据库和用户
<code lang="bash">
$ mysql -u root -p
mysql> CREATE DATABASE nova;
mysql> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
IDENTIFIED BY 'NOVA_DBPASS';
mysql> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
IDENTIFIED BY 'NOVA_DBPASS’;
</code>
初始化nova数据表
<code lang="bash">
$ nova-manage db sync
</code>
在/etc/nova/api-paste.ini中添加keystone验证信息
<code>
[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
auth_host = localhost
auth_port = 35357
auth_protocol = http
auth_uri = http://localhost:5000/v2.0
admin_tenant_name = service
admin_user = nova
admin_password = NOVA_PASS
</code>
为nova创建用户
<code lang="bash">
$ keystone user-create --name=nova --pass=NOVA_PASS --email=nova@example.com
$ keystone user-role-add --user=nova --tenant=service --role=admin
</code>
为nova创建服务和endpoint
<code lang="bash">
$ keystone service-create --name=nova --type=compute \
  --description="Nova Compute service"
$ keystone endpoint-create \
  --service-id=nova \
  --publicurl=http://localhost:8774/v2/%\(tenant_id\)s \
  --internalurl=http://localhost:8774/v2/%\(tenant_id\)s \
  --adminurl=http://localhost:8774/v2/%\(tenant_id\)s
</code>
重启服务
<code lang="bash">
$ initctl restart nova-api
$ initctl restart nova-cert
$ initctl restart nova-consoleauth
$ initctl restart nova-scheduler
$ initctl restart nova-conductor
$ initctl restart nova-novncproxy
</code>

<hr />
<h2>安装Compute Service(Compute Node部分)</h2>
这一部分内容安装的是nova运行在compute node上的部分，如果为单节点安装，需要跳过与Controller重复的部分
<code lang="bash">
$ apt-get install nova-compute-kvm python-guestfs
$ apt-get install nova-network nova-api-metadata
</code>
<strong>注意</strong>：nova-api-metadata只在独立的compute node安装，与nova-api冲突，如果部署为单节点已经安装了nova-api，则不需要安装nova-api-metadata。
修改nova配置文件/etc/nova/nova.conf
<code>
[DEFAULT]
# 设置验证方式为keystone
auth_strategy=keystone

# 设置数据库
connection = mysql://nova:NOVA_DBPASS@localhost/nova

# 设置消息队列
rpc_backend = nova.rpc.impl_kombu
rabbit_host = localhost
rabbit_password = RABBIT_PASS

# 设置VNC
# 修改为你的public_ip
my_ip=114.221.83.138
vnc_enabled=True
vncserver_listen=0.0.0.0
vncserver_proxyclient_address=114.221.83.138
novncproxy_base_url=http://114.221.83.138:6080/vnc_auto.html

# 设置Image Service地址
glance_host=localhost

# 设置网络

network_manager=nova.network.manager.FlatDHCPManager
firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver
network_size=254
allow_same_net_traffic=False
multi_host=True
send_arp_for_ha=True
share_dhcp_address=True
force_dhcp_release=True
flat_network_bridge=br100
flat_interface=wlan0
public_interface=eth0
</code>
注意在上面的网络设置中，flat_interface和public_interface最好能够区分开，否则可能会影响虚拟机通过NAT连接外网，见后文。

在/etc/nova/api-paste.ini中添加keystone验证信息
<code>
[filter:authtoken]paste.filter_factory = keystone
client.middleware.auth_token:filter_factory
auth_host = localhost
auth_port = 35357
auth_protocol = http
admin_tenant_name = service
admin_user = nova
admin_password = NOVA_PASS
</code>
创建虚拟网络
<code lang="bash">
$ nova network-create vmnet --fixed-range-v4=10.0.0.0/24 \
  --bridge=br100 --multi-host=T
</code>

<hr />
<h2>安装Dashboard</h2>
安装apache2
<code lang="bash">
$ apt-get install apache2
</code>
安装horizon
<code lang="bash">
$ apt-get install memcached libapache2-mod-wsgi openstack-dashboard
$ apt-get remove --purge openstack-dashboard-ubuntu-theme # 删除ubuntu的horizon主题

$ a2enmod wsgi
$ a2enconf openstack-dashboard
</code>
修改horizon配置文件中OPENSTACK_HOST为Identity Service所在节点
<code>
OPENSTACK_HOST = "localhost"
</code>
一切顺利的话现在就可以通过访问 http://localhost/horizon 使用OpenStack了

<hr />
<h2>安装Block Storage</h2>
安装进行到这里OpenStack的基本功能已经可以正常使用了。但是目前为止的安装中instance只能使用Ephemeral Storage来进行存储，当instance被terminate后所有的存储会丢失。如果想要有可持久的存储，接下来需要安装block storage，也就是OpenStack的Cinder模块。
<code lang="bash">
$ apt-get install cinder-api cinder-scheduler
</code>
修改cinder配置文件/etc/cinder/cinder.conf
<code>
# 设置消息队列
rpc_backend = cinder.openstack.common.rpc.impl_kombu
rabbit_host = localhost
rabbit_port = 5672
rabbit_userid = guest
rabbit_password = RABBIT_PASS

# 设置数据库连接
[database]
connection = mysql://cinder:CINDER_DBPASS@localhost/cinder
</code>
在/etc/cinder/api-paste.ini中添加keystone验证信息
<code>
[filter:authtoken]
paste.filter_factory=keystone
client.middleware.auth_token:filter_factory
auth_host=localhost
auth_port = 35357
auth_protocol = http
auth_uri = http://localhost:5000
admin_tenant_name=service
admin_user=cinder
admin_password=CINDER_PASS
</code>
创建数据库和用户
<code lang="bash">
# mysql -u root -p
mysql> CREATE DATABASE cinder;
mysql> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' \
IDENTIFIED BY 'CINDER_DBPASS';
mysql> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' \
IDENTIFIED BY 'CINDER_DBPASS’;
</code>
初始化cinder数据表
<code lang="bash">
$ cinder-manage db sync
</code>
为cinder创建用户
<code lang="bash">
$ keystone user-create --name=cinder --pass=CINDER_PASS --email=cinder@example.com
$ keystone user-role-add --user=cinder --tenant=service --role=admin
</code>
为cinder注册服务和endpoint
<code lang="bash">
$ keystone service-create --name=cinder --type=volume \
  --description="Cinder Volume Service"
$ keystone endpoint-create \
  --service-id=cinder \
  --publicurl=http://localhost:8776/v1/%\(tenant_id\)s \
  --internalurl=http://localhost:8776/v1/%\(tenant_id\)s \
  --adminurl=http://localhost:8776/v1/%\(tenant_id\)s
$ keystone service-create --name=cinderv2 --type=volumev2 \
  --description="Cinder Volume Service V2"
$ keystone endpoint-create \
  --service-id=cinderv2 \
  --publicurl=http://localhost:8776/v2/%\(tenant_id\)s \
  --internalurl=http://localhost:8776/v2/%\(tenant_id\)s \
  --adminurl=http://localhost:8776/v2/%\(tenant_id\)s
</code>
重启服务
<code lang="bash">
$ initctl restart cinder-scheduler
$ initctl restart cinder-api
</code>
Cinder需要选择一种存储方案作为存储后端，可选的有LVM、Ceph、NFS、ZFS等，这里我选择LVM/iSCSI作为存储后端选择。
如果你也选择LVM作为cinder存储后端，<del datetime="2014-03-22T14:49:51+00:00">你需要至少一个完整的磁盘分区来配置LVM，</del>你可以选择使用完整的磁盘分区或者<a href="http://www.linuxcommand.org/man_pages/losetup8.html" target="_blank">使用普通文件创建loop设备</a>（仅限于实验用）来配置LVM，<a href="https://wiki.archlinux.org/index.php/LVM_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank">这里</a>有一篇对于LVM的介绍。
<code lang="bash">
$ apt-get install lvm2
</code>
我用来配置LVM的分区是/dev/sda9，根据你的情况进行设置
<code lang="bash">
$ pvcreate /dev/sda9 # 创建逻辑卷
$ vgcreate cinder-volumes /dev/sda9 # 创建卷组
</code>
安装cinder-volume
<code lang="bash">
$ apt-get install cinder-volume
</code>
重启服务
<code lang="bash">
$ initctl restart cinder-volume
$ initctl restart tgt
</code>

<hr />
<h2>虚拟机的ping和SSH</h2>
刚安装完成OpenStack后启动instance，你会发现在宿主机上也无法ping通虚拟机ip，并且无法使用ssh登录虚拟机。这是因为OpenStack的安全组设置默认不允许非虚拟机局域网内的input流量，可以通过在Horizon中修改instance所属的安全组（默认为default组）设置或是执行下面的命令来允许icmp和ssh流量进入虚拟机：
<code lang="bash">
$ nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
$ nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
</code>
其实质上是OpenStack在宿主机上增加了如下iptables规则:
<code lang="bash">
$ iptables -A nova-compute-inst-9 -p icmp -j ACCEPT
$ iptables -A nova-compute-inst-9 -p tcp -m tcp --dport 22 -j ACCEPT
</code>

<hr />
<h2>外网访问</h2>
OpenStack文档中给出的外网和私有网的连通方式是绑定floating ip和fixed ip的方法，实际上在没有绑定floating ip的情况下虚拟机也可以通过NAT的方式访问外网。
在/etc/nova/nova.conf中添加下面的规则即可（仅限FlatDHCP和VLAN模式）。
<code>
routing_source_ip=114.221.83.138 # public_interface对应的ip地址
</code>
这条配置实质上是在宿主机上增加了如下iptables规则:
<code lang="bash">
$ iptables -A nova-network-snat -s 10.0.0.0/24 -o eth0 \
  -j SNAT --to-source 114.212.83.138
</code>
另外别忘了打开Linux的ip转发功能
<code lang="bash">
$ echo 1 > /proc/sys/net/ipv4/ip_forward
</code>
重启nova-network
<code>
$ initctl restart nova-network
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2014-03-19 11:38:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-19 03:38:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[openstack-havana%ef%bc%88ubuntu-13-10%ef%bc%89%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="category" nicename="cloud-computing"><![CDATA[云计算]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752182446]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[译]计算机启动过程 - How Computers Boot Up</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e8%bf%87%e7%a8%8b-how-computers-boot-up/</link>
		<pubDate>Mon, 24 Mar 2014 09:12:59 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://duartes.org/gustavo/blog/post/how-computers-boot-up/" target="_blank">原文在此</a>，如果英文阅读能力不差还是尽量读原文吧。

<hr />

先前的文章描述了Intel系列计算机的<a href="http://blog.kongfy.com/2014/03/%e8%af%91%e4%b8%bb%e6%9d%bf%e8%8a%af%e7%89%87%e9%9b%86%e5%92%8c%e5%ad%98%e5%82%a8%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84-motherboard-chipsets-and-the-memory-map/" title="[译]主板芯片组和存储地址映射 – Motherboard Chipsets and the Memory Map" target="_blank">主板和存储地址映射</a>，在此基础上我们来看看计算机启动的初始阶段。计算机的启动是一个复杂、多阶段并且相当有趣的事情。下图描述了整个计算机启动的过程：

[caption id="attachment_111" align="aligncenter" width="674"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/55E52855-DA54-4925-98DD-E45A9F000583.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/55E52855-DA54-4925-98DD-E45A9F000583.jpg" alt="计算机启动过程" width="674" height="242" class="size-full wp-image-111" /></a> 计算机启动过程[/caption]

当你按下计算机的电源按钮时，启动过程就开始了。一旦主板电源接通，主板就会初始化主板上的固件——一些芯片组和周边——并且会尝试让CPU运行起来。如果在这一步失败了（比如CPU故障或者没有找到），一般来说除了风扇仍然可以转动，计算机的其他部分都无法工作。少数主板在未找到CPU或者发现CPU故障时会发出“哔哔”的警报音，但是基于我的经验，大部分的主板只会不断的转动风扇，没有其它任何反应。有时候USB或是其他设备都有可能会导致这种情况：如果你发现你的系统突然变成了这样，尝试拔掉所有非必须的设备可能会有帮助。你也可以一个一个的排除出可能导致问题发生的设备。

<!--more-->

如果一切正常，CPU会进入正常运行状态。在一个多处理器(multi-processor)或多核(multi-core)的系统中，启动过程中会动态的选定一个CPU作为启动处理器(bootstrap processor - BSP)来运行所有的BIOS和操作系统内核初始化代码，余下的处理器在这个阶段被称为应用处理器(application processors - AP)，会停留在终止状态直到操作系统内核显式的激活它们。Intel生产的CPU在这么多年中持续不断的演进但仍保持了完整的向后兼容，所以即使是最先进的CPU也和1978年生产的<a href="http://en.wikipedia.org/wiki/Intel_8086" title="Intel 8086" target="_blank">Intel 8086</a>处理器具有相同的行为，在启动过程中也CPU也正是这样工作的。在电源刚接通后，处理器处于<a href="http://en.wikipedia.org/wiki/Real_mode" title="real mode" target="_blank">实模式(real mode)</a>并且禁止了<a href="http://en.wikipedia.org/wiki/Paging" title="paging" target="_blank">内存分页</a>机制，这和原始的MS-DOS一样，只有1MB的可用存储地址空间，用户可以运行任何指令、也可以修改存储区域中的任何位置——在实模式中没有保护和特权指令的概念。

大部分的<a href="http://en.wikipedia.org/wiki/Processor_register" title="register" target="_blank">寄存器(registers)</a>都预先设定了在通电后的初始值，保存着CPU执行指令地址的地址寄存器(EIP)也不例外。虽然在刚刚开机后只能使用1MB的存储地址空间，但是32位的Intel处理器第一条执行指令地址为0xFFFFFFF0（4GB存储空间的最后16字节），这个地址被称为<a href="http://en.wikipedia.org/wiki/Reset_vector" title="reset vector" target="_blank">reset vector</a>，是现代Intel系列CPU的标准之一。

主板会保证在reset vector处的指令是一条到BIOS程序入口的跳转指令。在主板芯片组的存储地址映射作用下，所有的存储地址都对应有CPU需要的正确的内容。这些地址都被映射到了包含有BIOS的闪存中，而此时RAM中存在的只是一些无用的随机值。有关存储区域的一个示例如下图：

[caption id="attachment_119" align="aligncenter" width="337"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/79CF14EF-A63E-4B19-9E51-7416099D1DFB.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/79CF14EF-A63E-4B19-9E51-7416099D1DFB.jpg" alt="启动时的重要内存区域" width="337" height="547" class="size-full wp-image-119" /></a> 启动时的重要内存区域[/caption]

在这之后CPU就会开始执行BIOS程序来对一些机器的硬件进行初始化。然后BIOS会触发<a href="http://en.wikipedia.org/wiki/Power_on_self_test" title="POST" target="_blank">通电自检(Power-on Self Test - POST)</a>过程以检测计算机的众多组件。如果POST检测到显卡故障，BIOS程序会停止并发出蜂鸣声——因为无法在屏幕上显示信息，而如果显卡可以正常工作，一切就美好的多了：制造商的logo会出现在屏幕上，BIOS开始检测内存，喇叭会发出声音。POST过程中的其他错误比如未找到键盘等会在屏幕上打印出错误信息。POST过程涉及到非常多的检测和初始化工作，包括整理出所有可用的资源——中断、内存大小、PCI设备的I/O端口。遵守<a href="http://en.wikipedia.org/wiki/ACPI" title="ACPI">ACPI</a>的BIOS程序会建立一些描述计算机设备的数据表，这些数据表在之后交给操作系统内核使用。

在完成POST之后，BIOS需要在硬盘、光驱、软驱等地方搜寻操作系统内核的位置以启动操作系统，寻找启动设备的顺序是可以设置的。如果BIOS没有找到可以用于启动操作系统的设备，它会终止并提示“Non-System Disk or Disk Error”。

假设我们的可启动设备为硬盘，则BIOS程序会读取硬盘的开头512个字节（第一个扇区），这512个字节被称为<a href="http://en.wikipedia.org/wiki/Master_boot_record" title="MBR" target="_blank">主引导记录(Master Boot Record - MBR)</a>，MBR通常包含两个必不可少的部分：一个很小的操作系统各异的引导程序和磁盘的分区表。不过BIOS并不关心这些，BIOS只是简单的把MBR的内容载入到内存地址0x7c00的位置并且跳转到这一地址开始执行MBR中的指令。

[caption id="attachment_117" align="aligncenter" width="616"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/6C14B5AE-6E9C-421F-8278-88720E722CF4.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/6C14B5AE-6E9C-421F-8278-88720E722CF4.jpg" alt="主引导记录（MBR）" width="616" height="235" class="size-full wp-image-117" /></a> 主引导记录（MBR）[/caption]

MBR中的代码可能是一个Windows的启动器（Loader），也可能是Linux的启动器比如LILO或是GRUB，甚至有可能是一个病毒。而分区表是标准化的：分区表长度为64字节，由4个16字节的分区描述组成，它们描述了磁盘是如何分隔的（所以你可以在同一块磁盘中安装不同的操作系统）。传统的微软MBR代码会检查分区表，找出唯一一个标记为活动的分区，从这个分区中载入启动扇区并且运行扇区上的代码。启动扇区是这个分区上的第一个扇区，相对的MBR是整个磁盘的第一个扇区。如果分区表中有错误你会看到类似“Invalid Partition Table”或者“Missing Operating System”这样的错误提示，这些信息是MBR代码发出的，而不是BIOS，因此具体的错误提示取决于MBR的实现风格。

现在计算机的启动过程已经十分的灵活了，Linux的启动器LILO和GRUB可以处理相当多不同的操作系统、文件系统和启动设置。它们的MBR代码并没有效仿微软的“从活动的分区启动”的方式，具体的过程如下：

<ol>
<li>MBR本身只包含启动阶段1的代码，GRUB中称为stage 1。</li>
<li>因为MBR本身只有很小的空间（440字节）,MBR中的代码只是把磁盘中包含附加启动代码的扇区载入到内存中。这个附加的扇区可能是某个分区的启动扇区，也可能是安装MBR时在MBR中硬编码的某个指定扇区。</li>
<li>MBR代码加上上一步中载入的代码之后会从磁盘中读出包含第二阶段启动器的文件，在GRUB中为GRUB Stage 2，在Windows中为c:\NTLDR（如果这一步失败了你会看到像“NTLDR is missing”这样的错误提示）。第二阶段启动器运行后会读取一个启动配置文件（GRUB中的grub.conf，Windows中的boot.ini），并在启动选择多于一个时呈现出一个启动选择界面。</li>
<li>运行到这一步，boot loader需要启动操作系统内核了，因此它必须知道在启动分区的文件系统中如何读出内核。在Linux中boot loader从文件系统中读取类似“vmlinuz-2.6.22-14-server”这样的包含内核的文件，将文件载入到内存中并且跳转到内核启动代码开始执行。在Windows中启动代码和内核镜像本身是分离的，启动代码嵌入在了NTLDR中，在执行了一系列初始化工作后，NTDLR从文件c:\Windows\System32\ntoskrnl.ext中载入内核镜像，和GRUB一样跳转到内核入口处。</li>
</ol>

这里有一点值得关注的地方，现在的Linux内核镜像即使经过压缩后也不能够放在实模式的640K内存空间中，我使用的普通Ubuntu内核镜像是1.7MB，然而boot loader为了能够调用BIOS来读取磁盘必须工作在实模式中，因此在这样的情况下内核是无法载入的。采用<a href="http://en.wikipedia.org/wiki/Unreal_mode" title="unreal mode" target="_blank">unreal mode</a>可以解决这个问题。unreal mode并不是真正的处理器模式，而是一种程序在实模式和保护模式之间不断切换的技术，由此获得了超过1MB的内存空间并且同时还可以使用BIOS。如果你阅读GRUB的源代码，你会看到这些切换过程（在stage2中的函数real_to_prot和prot_to_real）。当这些艰难的过程结束后loader成功的将整个内核载入了内存中，并最终将处理器停留在实模式中。

我们现在处在了第一张图的“Boot Loader”和“Early Kernel Initialization”中间的阶段，内核即将开始工作。下一篇文章中我会根据<a href="http://lxr.linux.no/" title="Linux Cross Reference" target="_blank">Linux参考手册</a>对Linux内核的初始化过程进行描述，而对于Windows，我会指出一些关键的过程。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2014-03-24 17:12:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-24 09:12:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e8%bf%87%e7%a8%8b-how-computers-boot-up]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751941497]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[译]主板芯片组和存储地址映射 - Motherboard Chipsets and the Memory Map</title>
		<link>http://blog.kongfy.com/2014/03/%e8%af%91%e4%b8%bb%e6%9d%bf%e8%8a%af%e7%89%87%e9%9b%86%e5%92%8c%e5%ad%98%e5%82%a8%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84-motherboard-chipsets-and-the-memory-map/</link>
		<pubDate>Sat, 29 Mar 2014 15:07:48 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://duartes.org/gustavo/blog/post/motherboard-chipsets-memory-map/" title="Motherboard Chipsets and the Memory Map" target="_blank">原文在此</a>，翻译仅供参考。

<hr />

我计划写一些关于计算机内部的文章来解释现代的操作系统内核是如何运行的。我希望这些文章会对那些对此类东西感兴趣而没有相关经验的程序猿有所帮助，我会集中关注Linux、Windows和Intel处理器。探究计算机的内部运行原理是我的爱好,我已经写了一些内核态的代码但是还没有怎么写过相关的文章。我的第一篇文章将会对现代Intel系列的主板构造、CPU存储访问、存储地址映射进行描述。

作为开始，我们先来看一下现在的Intel体系的计算机是如何连接起来的。下图中包含了主板中的主要部件：

[caption id="attachment_142" align="aligncenter" width="668"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/6D264DDD-CB93-47A6-995E-B18F84AA12FC.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/6D264DDD-CB93-47A6-995E-B18F84AA12FC.jpg" alt="主板示意图，北桥和南桥构成了芯片组" width="668" height="468" class="size-full wp-image-142" /></a> 主板示意图，北桥和南桥构成了芯片组[/caption]

当你在理解上图时，需要重点注意的一点是CPU并不知道它和什么东西连接在一起，它通过<a href="http://en.wikipedia.org/wiki/Image:Intel_80486DX2_bottom.jpg" title="pins" target="_blank">引脚（pins）</a>和外部交流，但并不关心外部环境是什么：可能是主板，但也可能是烤面包机、路由器、植入大脑或者是CPU测试器。CPU主要通过三种方式与外部环境通信：存储地址空间、I/O地址空间和中断。现在我们只关注主板和存储。

<!--more-->

在一块主板中，CPU与外部通信的通道为连接在北桥（northbridge）上的前端总线（front-side bus），无论何时CPU需要读写数据，都需要通过前端总线。CPU使用一些引脚来传输它要读写的物理存储地址，还有一些引脚传送要写入的数据或是接受读取到的数据。一个Intel Core 2 QX6600有33个用来传送物理地址的引脚（所有有2<sup>33</sup>个可以表示的地址）和64个用来传送和接受数据的引脚（所以被传输的数据为64位即8个字节），因此CPU可以使用64GB的物理地址空间（2<sup>33</sup>个地址 * 8字节）虽然大多数的芯片组只支持最大8GB的内存。

这里有一个可能会和你的认识冲突的事实：我们总是认为存储空间只是指内存（RAM），就是程序一直在读写的那个东西，实际上大部分处理器的读写请求也确实是被北桥转发给了内存模块，但并不是所有的。物理存储地址空间同时也被用来和一些主板上的其他设备通信（这种通信被称为<a href="http://en.wikipedia.org/wiki/Memory-mapped_IO" title="memory-mapped I/O" target="_blank">memory-mapped I/O</a>），比如显卡和大部分的PCI设备（扫描仪、SCSI设备之类的），还有存储有BIOS的闪存。

当北桥接收到一个物理地址请求，北桥会决定这个请求该转向哪里：内存？还是显卡？北桥根据存储地址映射表来决定。对物理存储地址的每一个区域，存储地址映射表都知道究竟是哪一个设备拥有这些地址。大部分的地址都映射到内存中，但当地址不属于内存时，存储地址映射表会告诉芯片组哪个设备该响应这些地址的请求。这种将地址分配到其他设备的映射导致了在老式PC存储中640KB到1MB之间的空洞，而保留给显卡和PCI设备的地址又造城了一个更大的空洞，这也是为什么32位操作系统<a href="http://support.microsoft.com/kb/929605" target="_blank">不能完全使用4GB内存的原因</a>。在Linux中/proc/iomem文件清楚的列出了这些被映射的地址。下图展示了Intel PC的前4GB地址空间中典型的映射关系：

[caption id="attachment_143" align="aligncenter" width="285"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/03/1BD64BA1-2A96-4289-B293-9587881FE0AF.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/03/1BD64BA1-2A96-4289-B293-9587881FE0AF.jpg" alt="Intel体系中前4GB存储空间的布局情况" width="285" height="604" class="size-full wp-image-143" /></a> Intel体系中前4GB存储空间的布局情况[/caption]

实际的地址和范围取决于电脑中使用的主板和设备，不过大部分的Core 2系统和上图中展示的非常相似。所有棕色的区域都不属于内存，这里要明确一点，这里所说的地址是在主板总线中实际的物理地址，在CPU内部（例如程序中的运行、读写地址）使用的地址都是逻辑地址，并且在实际访问之前都必须被CPU转换成物理地址。

将逻辑地址转换成物理地址的规则十分复杂，并且依赖于CPU运行时处于的模式（实模式、32位保护模式以及64位保护模式）。抛开地址转换硬件不谈，CPU的运行模式决定了究竟能够访问多少物理地址。举例来说，如果CPU运行在32位保护模式中，则它最多只能够使用4GB的物理地址（有一个例外叫做<a href="http://en.wikipedia.org/wiki/Physical_address_extension" title="PAE" target="_blank">physical address extension</a>，不过在这里我们先忽略它），因为最顶部的1GB地址空间被映射给了主板上的设备，CPU只能有效利用不到3GB的内存（有时候会更少-我有一台Vista机器只能使用2.4GB内存）；如果CPU运行在<a href="http://en.wikipedia.org/wiki/Real_mode" title="real mode" target="_blank">实模式（real mode）</a>中，则它只能使用1MB的物理地址（实模式是早期Intel CPU唯一能够使用的模式）；而如果CPU运行在64位保护模式中，它可以使用64GB的物理地址（虽然仅仅只有少数芯片组支持这么多的内存），在64位模式中使用超过内存总容量的物理地址空间是可能的，系统通过对那些被主板设备偷走的存储地址对应的内存区域的访问来实现这点，这叫做内存回收（reclaiming memory），是在主板芯片组的支持下完成的。

以上就是在下一篇文章前我们需要的所有关于存储的知识了。下一篇文章将会讲解从计算机通电到boot loader即将跳转到内核之间的过程。如果你还想了解更多关于存储的知识，强烈推荐阅读Intel手册，Intel的手册写的很好，而且非常准确，下面给出一些：
<ul>
	<li><a href="http://download.intel.com/design/chipsets/datashts/31760701.pdf" target="_blank">Datasheet for Intel G35 Chipset</a>中给出了Core 2系列处理器具有代表性的芯片组的文档，是本文的主要参考。</li>
	<li><a href="http://download.intel.com/design/processor/datashts/31559205.pdf" target="_blank">Datasheet for Intel Core 2 Quad-Core Q6000 Sequence</a>是处理器的文档，详细的讲解了处理器的每一个引脚（实际上并没有那么多，并且在对它们分组之后更加没有多少了），虽然有些难懂，但还是非常赞。</li>
	<li>广为人知的<a href="http://www.intel.com/products/processor/manuals/index.htm" target="_blank">Intel Software Developer’s Manuals</a>，易于理解，非常优美的解释了很多体系结构上的问题。卷1和卷3A里有很多有用的东西（别被名字吓到了，“卷”其实并不长而且你也可以选择性的进行阅读）。
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2014-03-29 23:07:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-29 15:07:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%91%e4%b8%bb%e6%9d%bf%e8%8a%af%e7%89%87%e9%9b%86%e5%92%8c%e5%ad%98%e5%82%a8%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84-motherboard-chipsets-and-the-memory-map]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752178828]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>860</wp:comment_id>
			<wp:comment_author><![CDATA[主板芯片组和存储地址映射 | JiShuShu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.jishushu.com/motherboard-chipsets-memory-map/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[107.170.53.209]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-03-04 14:08:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-03-04 06:08:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 译文链接  原文链接 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Nanos note 1 : bootloader</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/</link>
		<pubDate>Sat, 03 May 2014 15:03:06 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[Nanos是JYY大神为南大计算机系操作系统课程专门设计的实验用操作系统。出于对操作系统的好奇和对JYY大神的敬仰，我又再次踏上了DIY玩具内核的道路。和本科时候不同，这次希望能对操作系统有更深的理解，而不是仅仅局限于完成实验，也希望能留下一些笔记作为积淀。这是第一篇note，从分析Nanos的bootloader开始再好不过了。

Nanos的框架代码都可以在github上找到(<a href="https://github.com/NJUOS" title="NJUOS" target="_blank">点我</a>)，为了方便起见，一份打包的仅包含bootloader的代码在<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/bootloader.tar.gz">这里</a>。

<hr />

正如<a href="http://blog.kongfy.com/2014/03/%e8%af%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%90%af%e5%8a%a8%e8%bf%87%e7%a8%8b-how-computers-boot-up/" title="[译]计算机启动过程 – How Computers Boot Up" target="_blank">之前</a>提到的，在计算机的启动过程中当完成了POST之后，BIOS会从可启动磁盘中读出头512个字节(MBR)并将其载入内存地址0x7c00的位置并开始执行，MBR中的代码通常被称为bootloader，负责将操作系统内核载入到内存中。在Nanos中，bootloader极其简单，仅由MBR中的512字节组成(即仅包含stage 1)，麻雀虽小五脏俱全，Nanos的bootloader完成了bootloader所需要做的所有基本任务：为操作系统内核设置运行环境、载入内核到内存、跳转到内核开始执行。

下面具体分析一下Nanos的bootloader是如何完成的。首先看一下bootloader的源文件目录结构：
<code>
.
├── Makefile
├── asm.h
├── boot.h
├── genboot.pl
├── main.c
└── start.S
</code>

<!--more-->

我们从Makefile文件入手：
<code>
bootblock: start.S main.c asm.h boot.h
	gcc -c -m32 start.S
	gcc -c -m32 -O1 main.c
	ld -melf_i386 -e start -Ttext 0x7C00 start.o main.o -o bootblock.o
	@objcopy -S -O binary -j .text bootblock.o bootblock
	@./genboot.pl bootblock

clean:
	rm -rf bootblock *.o
</code>
从Makefile中我们可以明白bootloader是如何编译生成的，在编译目标bootblock中：
<ol>
	<li>首先编译了start.S和main.c文件(注意此处并没有执行链接)</li>
	<li>在链接过程中通过-e start指定了可执行文件的入口为符号start(这个符号出现start.S中，我们之后会看到)，通过-Ttext 0x7c00指定了代码段的起始位置(实际运行的bootloader并不是一个ELF格式的文件，所以这里指定的起始位置仅用来指导链接程序做地址的解析使用)，最终生成bootblock.o文件</li>
	<li>运行objcopy指令将上一步中生成的bootblock.o文件中的text代码段拷贝出来，生成bootblock，至此脱离了ELF格式</li>
	<li>运行genboot.pl脚本，该脚本只是很简单的将bootblock拓展到512字节，并将末尾两个字节改写为魔数0x55aa</li>
</ol>
了解了bootloader是如何生成的之后，接下来我们跟随程序的入口，从start.S看起：
<code lang="asm">
# 从此开始是16位代码
.code16
.globl start
start:
	cli                       # 关闭外部中断

	# 设置正确的段寄存器
	xorw    %ax, %ax          # %AX = 0
	movw    %ax, %ds          # %DS = AX (data segment)
	movw    %ax, %es          # %ES = AX (extra segment)
	movw    %ax, %ss          # %SS = AX (stack segment)

	# 打开A20地址线
	movw    $0x2401, %ax
	int     $0x15

	lgdt    gdtdesc           # 设置GDT(段描述符表地址为$gdt)
	movl    %cr0, %eax        # %CR0 |= PROTECT_ENABLE_BIT
	orl     $0x1, %eax
	movl    %eax, %cr0        # 设置PE bit

	# 长跳转进入保护模式，设置%CS为GDT中的第一项，%EIP为start32所对应地址
	ljmp    $GDT_ENTRY(1), $start32
</code>
在start.S的一开始就是我们在Makefile中看到的程序入口标记start。当计算机将512个字节载入到内存后，代码就是从这里开始运行的。

当计算机开始运行bootloader时，计算机仍处于实模式，所以start中为16位代码。在一开始，首先关闭外部中断，然后将段寄存器都设置为0、打开A20地址线(如果你不明白这是什么，请移步<a href="http://wiki.osdev.org/A20_Line" title="A20地址线" target="_blank">这里</a>)、利用lgdt命令设置GDT(同样，请移步<a href="http://wiki.osdev.org/GDT_Tutorial" title="GDT" target="_blank">这里</a>)、设置控制寄存器的PE位，打开保护模式(你懂的，<a href="http://wiki.osdev.org/Protected_Mode" title="保护模式" target="_blank">这里</a>)，最后执行一个ljmp指令，跳转到start32开始执行保护模式中的代码。

在这里我们稍微停留一下，来仔细的研究一下Nanos是如何设置GDT的。假定你已经大致理解了GDT是如何工作的，我们把注意力集中到下面这行代码上：
<code lang="asm">
	lgdt    gdtdesc           # 设置GDT(段描述符表地址为$gdt)
</code>
lgdt指令实际上设置了gdtr寄存器，指明了GDT在内存中的位置。lgdt命令需要GDT描述符的地址作为操作数，GDT描述符的结构如下：

[caption id="attachment_174" align="aligncenter" width="465"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/Gdtr.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/Gdtr.png" alt="GDT描述符" width="465" height="204" class="size-full wp-image-174" /></a> GDT描述符[/caption]

其中offset字段为GDT起始位置的线性地址，size字段为GDT的大小减1(注：之所以要减去1是因为GDT的最大长度为65536，而不存在长度为0的GDT)，在Nanos中lgdt的操作数gdtdesc详细定义：
<code>
# GDT
.p2align 2                         # 对齐
gdt:
	# 确保段选择子不能为0
	SEG_NULLASM                    # GDT第一项必须为空
	# type 0xA 代表设置了Ex&Rw，表示代码段可执行&可读
	SEG_ASM(0xA, 0x0, 0xffffffff)  # 代码段描述符
	# type 0x2 代表设置了Rw，表示数据段可写
	SEG_ASM(0x2, 0x0, 0xffffffff)  # 数据段描述符
	# 参见 http://wiki.osdev.org/Global_Descriptor_Table

gdtdesc:                           # GDT描述符
	.word   (gdtdesc - gdt - 1)    # GDT长度，留意地址运算
	.long   gdt                    # GDT地址
</code>
可以看到gdtdesc起始的内存中存放了GDT描述符，而具体的段描述符表则存放在标号gdt开始的内存单元中。每一个段描述符占8字节，其结构如下：

[caption id="attachment_177" align="aligncenter" width="512"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/GDT_Entry.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/GDT_Entry.png" alt="段描述符" width="512" height="192" class="size-full wp-image-177" /></a> 段描述符[/caption]

段描述符中Base字段表示该段的段基址(32位线性地址)，Limit字段表示该段可寻址的最大单元(注意：这里的单元可能是1byte，也可能是一个页，见Gr位)。Flags和Access Byte要稍微复杂些：

[caption id="attachment_218" align="aligncenter" width="427"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/Gdt_bits.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/Gdt_bits.png" alt="Flags &amp; Access Byte" width="427" height="115" class="size-full wp-image-218" /></a> Flags & Access Byte[/caption]

对这些位的解释引自<a href="http://wiki.osdev.org/GDT" title="GDT" target="_blank">OSDev</a>:
<ul>
<li><b>Pr : </b>保护位，总是为<b>1</b></li>
<li><b>Privl : </b>2位的权限位(ring)，0为最高，3为最低</li>
<li><b>Ex : </b>执行位，如果该位为<b>1</b>代表该段中的代码可以被执行，该段是一个代码段，如果该位为<b>0</b>则该段是一个数据段</li>
<li><b>DC : </b>方向/适应位：
<ul>
<li>对数据段来说该位为方向位：<b>0</b>代表数据段从低地址向高地址增长，<b>1</b>代表数据段从高地址向低地址增长</li>
<li>对代码段来说该位为适应位：
<ul>
<li>如果该位为<b>1</b>则该段中的代码可以由相等或更低的权限执行。例如：ring 3中的代码可以far-jump到设置了适应位的ring 2代码段中执行，privl位表示了可以执行该代码段的最高权限</li>
<li>如果该位为<b>0</b>则该段中的代码只能由privl中标明的权限执行</li>
</ul>
</li>
</ul>
</li>
<li><b>RW : </b>可读/可写位：
<ul>
<li>对代码段来说该位为可读位：代表当前段是否可读，代码段不具有写权限</li>
<li>对数据段来说该位为可写位：代表当前段是否可写，数据段总是可读的</li>
</ul>
</li>
<li><b>Ac : </b>Accessed bit. 设置为<b>0</b>即可，CPU访问该段时将其改写为<b>1</b></li>
<li><b>Gr : </b>Granularity bit. 如果该位为<b>0</b>则Limit表示的单元为1byte，否则为4KB(一页)</li>
<li><b>Sz : </b>如果该位为<b>0</b>则该段为16位保护模式，如果该位为<b>1</b>表示该段为32位保护模式</li>
</ul>
在Nanos中通过asm.h中的相关宏来实现GDT条目的定义：
<code lang="c">
/* 参考：i386手册 */
#define GDT_ENTRY(n)  \
	((n) << 3)

#define SEG_NULLASM   \
	.word 0, 0;       \
	.byte 0, 0, 0, 0

#define SEG_ASM(type,base,lim)                              \
	.word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
	.byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
	(0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
</code>
我们可以看到Nanos实际上定义了2个段，并将GDT条目0留空以确保段选择子为0是非法的。第一个段为代码段，具有可执行、可读权限；第二个段为数据段，具有可写权限(对于GDT更详细的描述，参考<a href="http://wiki.osdev.org/Global_Descriptor_Table" title="GDT" target="_blank">这里</a>)。两个段的段基址都是0x0，长度也都是0xffffffff，实际上是共用了相同的线性地址空间。

回到主线，现在我们已经切换到了保护模式，并跳转到start32处开始执行。这里值得注意的一点是最后执行的ljmp指令，宏GDT_ENTRY只是简单的将参数n左移三位，这是因为在保护模式中段寄存器中并不像实模式那样直接存放段基址，而是存放了一个叫做段选择子的结构来指出选择的段，段选择子结构如下：

[caption id="attachment_198" align="aligncenter" width="712"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/selector.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/selector.jpg" alt="段选择子" width="712" height="183" class="size-full wp-image-198" /></a> 段选择子[/caption]

结构中TI位用于标识该段是GDT还是LDT中的段(0为GDT，1为LDT)、RPL表示运行的权限等级(0-3，0为最高权限)、高13位表示段描述符的标号。因此ljmp的操作数$GDT_ENTRY(1)表示选择了GDT中的第一个段描述符，并具有最高权限。跳转成功后执行的start32中32位代码如下：
<code>
.code32
start32:
	# 设置数据访问所用的段寄存器(%DS, %ES, %SS)
	movw    $GDT_ENTRY(2), %ax
	movw    %ax, %ds          # %DS = %AX
	movw    %ax, %es          # %ES = %AX
	movw    %ax, %ss          # %SS = %AX

	# 设置栈位置。栈从此没有切换过，请注意栈的大小！
	movl    $0x8000, %esp     # %ESP = $0x8000
	call    bootmain          # 跳转到C代码执行，此处不会返回
</code>
这段代码所做的事情非常简单，首先设置了ds、es、ss段寄存器，使其指向GDT中的第二项——数据段，然后设置栈顶指针为0x8000，最后跳转到C函数bootmain执行。

之后的事情相对来说就简单多了，我们已经为内核运行布置了良好的环境，现在只要将内核载入到内存中就可以了，值得庆幸的是这部分代码可以用C来完成，Nanos的bootmain函数如下:
<code lang="c">
void
bootmain(void) {
	struct ELFHeader *elf;
	struct ProgramHeader *ph, *eph;
	unsigned char *pa, *i;

	/* 因为引导扇区只有512字节，我们设置了堆栈从0x8000向下生长。
	 * 我们需要一块连续的空间来容纳ELF文件头，因此选定了0x8000。 */
	elf = (struct ELFHeader*)0x8000;

	/* 读入ELF文件头 */
	readseg((unsigned char*)elf, 4096, 0);

	/* 把每个program segement依次读入内存 */
	ph = (struct ProgramHeader*)((char *)elf + elf->phoff);
	eph = ph + elf->phnum;
	for(; ph < eph; ph ++) {
		pa = (unsigned char*)ph->paddr; /* 获取物理地址 */
		readseg(pa, ph->filesz, ph->off); /* 读入数据 */
		for (i = pa + ph->filesz; i < pa + ph->memsz; *i ++ = 0);
	}

	((void(*)(void))elf->entry)(); // 离开bootloader
}
</code>
因为Nanos的内核被编译成ELF格式，所以bootloader所做的事情就是将ELF格式的内核按照ELF规定的描述载入到内存中(如果你不清楚ELF是什么，请移步<a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format" title="ELF" target="_blank">这里</a>)。C语言代码很容易理解，整体的bootmain流程如下：
<ol>
	<li>将内核的ELF头读入0x8000起始的内存空间中(0x8000向下为栈空间，在start.S中设置的)</li>
	<li>按照ELF头的描述依次将每一个段拷贝到对应的内存空间中</li>
	<li>跳转到ELF头所规定的程序入口(即内核入口)开始执行</li>
</ol>
运行到这里，bootloader终于完成了使命，功成身退了。

<hr />

<h3>参考资料</h3>
<ul>
	<li><a href="http://wiki.osdev.org/Main_Page" title="OSDev" target="_blank">OSDev Wiki</a></li>
	<li>《深入理解Linux内核》</li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2014-05-03 23:03:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-03 15:03:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nanos-note-1-bootloader]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nanos"><![CDATA[Nanos]]></category>
		<category domain="post_tag" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751053015]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.98.63.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-05-26 09:18:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-05-26 01:18:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[赞！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229489]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Nanos note 2 : 内核初始化</title>
		<link>http://blog.kongfy.com/2014/05/nanos-note-2-%e5%86%85%e6%a0%b8%e5%88%9d%e5%a7%8b%e5%8c%96/</link>
		<pubDate>Mon, 19 May 2014 15:08:21 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[在<a href="http://blog.kongfy.com/2014/05/nanos-note-1-bootloader/" title="Nanos note 1 : bootloader" target="_blank">上一篇文章中</a>，我们已经完成了bootloader的运行：设置内核段描述符、进入保护模式、载入ELF格式内核，并将控制交给内核代码。
但是，此时操作系统的启动过程并未完全完成，本篇文章接着bootloader完成的工作，还是以Nanos为范例，具体的分析一下操作系统内核的初始化过程（内核初始化所使用的代码可以在Nanos的github找到，见<a href="https://github.com/NJUOS/Lab1" title="Nanos" target="_blank">这里</a>）。
内核初始化主要完成了下面这些工作：
<ol>
	<li>初始化时钟</li>
	<li>初始化可编程中断控制器</li>
	<li>初始化中断描述符表(IDT)</li>
</ol>

<!--more-->

还是从Makefile文件入手，内核的Makefile指定了kernel的生成方式如下：
<code lang="bash">
kernel: $(OBJS)
	$(LD) $(LDFLAGS) -e entry -Ttext 0x00100000 -o kernel $(OBJS)
</code>
参数的含义是以符号entry代表的函数作为程序入口，并且代码段定位从0x00100000地址开始。也就是说，当bootloader将内核载入到内存后，会将控制交给0x00100000处的代码，即内核入口entry()函数。entry()函数极其简单：
<code lang="c">
void
entry(void) {
    init_timer();                // 初始化时钟
    init_idt();                  // 初始化中断描述符表(IDT)
    init_intr();                 // 初始化可编程中断控制器
    init_serial();
    enable_interrupt();
    while (1) {
        wait_for_interrupt();
    }
    assert(0);
}
</code>
在依次执行了几个初始化函数之后，入口函数进入死循环状态，之后我们会看到，它实际上成为了操作系统的0号IDLE线程。
<hr />
<h3>I/O Port</h3>
在进入具体初始化函数的分析之前，我们先开个小差，看一下两个嵌入式汇编函数in_byte和out_byte:
<code lang="c">
/* 读I/O端口 */
static inline uint8_t
in_byte(uint16_t port) {
    uint8_t data;
    asm volatile("in %1, %0" : "=a"(data) : "d"(port));
    return data;
}

/* 写I/O端口 */
static inline void
out_byte(uint16_t port, int8_t data) {
    asm volatile("out %%al, %%dx" : : "a"(data), "d"(port));
}
</code>
因为之后的初始化工作有很多需要使用in、out汇编指令操作I/O端口的步骤，因此为了能够在C语言中完成这些工作，上面的代码使用嵌入式汇编定义了这两个函数，其功能是显而易见的，如果你不熟悉嵌入式汇编的指示，请参考<a href="http://wiki.osdev.org/Inline_Assembly" title="inline assembly" target="_blank">这里</a>和<a href="http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html" title="inline assembly" target="_blank">这里</a>。
<hr />
<h3>关于中断</h3>
中断在现代操作系统中扮演了极其重要的角色，可以说现代操作系统基本是由中断所驱动的。因此在内核初始化过程中，初始化中断环境是非常重要的一环，也是Nanos内核初始化的主要工作。
如果你还不太熟悉什么是中断，那么下面这段摘自<a href="http://cslab.nju.edu.cn/opsystem/#OS2014_3" title="中断、I/O和分时多线程" target="_blank">Nanos实验主页</a>的简要介绍可能会帮到你：
<blockquote>
随着计算机能力的增强，分时成为了自然的需求。多个终端可以共享昂贵的处理器和内存，而总是通过轮询方式访问设备也带来了很大的浪费。而且如果有程序不幸出错陷入死循环，整个机器都面临重启的命运。中断的诞生解决了这一问题。中断本质来说就是一种来自计算机外的通知机制，它可以在外部事件到来时，暂停CPU当前的工作，跳转到一个预先指定的地点执行。
</blockquote>
总的来说，中断可以分为硬件中断和异常。其中硬件中断分为不可屏蔽中断NMI(Non-Maskable Interrupt)和可屏蔽硬件中断INTR。异常来源于CPU内部，比如软件指令执行异常（比如被0除），或者CPU芯片硬件异常，以及编程异常(软中断）。NMI和异常都是不可屏蔽的，状态寄存器IF位的设置对它们没有影响。只有可屏蔽硬件中断INTR是可以屏蔽的，是否屏蔽取决于状态寄存器IF的设置。关于中断更详细的介绍在<a href="http://en.wikipedia.org/wiki/Interrupt" title="中断" target="_blank">这里</a>。

[caption id="attachment_256" align="aligncenter" width="426"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/intr_source.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/intr_source.jpg" alt="CPU和中断" width="426" height="367" class="size-full wp-image-256" /></a> CPU和中断[/caption]

<hr />
<h3>初始化时钟</h3>
回到正题，内核接管控制后，我们首先要执行init_timer函数来设置计算机时钟生成的频率，虽然代码乍一看似乎不知所云，但实际上都是硬件通信的简单协定而已：
<code lang="c">
/* 8253输入频率为1.193182MHz */
// PIT输出Channel 0在x86的I/O ports中编号为0x40
#define TIMER_PORT 0x40
#define FREQ_8253 1193182

void
init_timer(void) {
    int counter = FREQ_8253 / HZ;
    // 寄存器（16位Reload register）最高不能超过65536
    assert(counter < 65536);

    // 将PIC的0x43 Mode/Command register写为: 00 11 010 0
    // Select channel : Channel 0
    // Access mode : lobyte/hibyte
    // Operating mode : Mode 2 (rate generator), 通常操作系统使用Mode 3(square wave generator)产生IRQ0时钟中断，但使用Mode 2可以得到更精确的时钟频率
    // BCD/Binary mode: 0 = 16-bit binary
    out_byte(TIMER_PORT + 3, 0x34);

    // 下面两个写操作写入PIT的Channel 0，设置counter
    // 因为Access mode为lobyte/hibyte，所以两次先后分别写入低8位和高8位
    out_byte(TIMER_PORT + 0, counter % 256);
    out_byte(TIMER_PORT + 0, counter / 256);
}
</code>
简单来说，init_timer函数完成的工作就是把时钟中断产生的频率设置为100Hz(代码中HZ为宏定义100)。具体的PIT协定见<a href="http://wiki.osdev.org/Programmable_Interval_Timer" title="Programmable Interval Timer" target="_blank">这里</a>。
<hr />
<h3>初始化中断控制器</h3>
接下来，我们需要为内核设置中断环境。在intel CPU中，硬件中断如时钟、键盘中断等由8259可编程中断控制器（PIC）进行控制，8259PIC接受这些中断并按照一定的顺序将这些中断传递给CPU处理。例如：当你通过敲击键盘触发一个键盘中断，键盘通过它预设的中断线路（IRQ 1）传递给PIC一个信号，接下来PIC会将这个信号转换为系统中断并传递给CPU进行处理，如下图所示：

[caption id="attachment_228" align="aligncenter" width="500"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/22fig09.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/22fig09.jpg" alt="硬件设备通过8259s将中断传递到CPU" width="500" height="337" class="size-full wp-image-228" /></a> 硬件设备通过8259s将中断传递到CPU[/caption]

因此在内核启动初期，我们必须对PIC进行初始化，使PIC可以按照内核期望的方式处理硬件中断。初始化PIC的原理和初始化PIT的原理相同，只是PIC的控制协定复杂了许多，初始化代码如下：
<code lang="c">
#define PORT_PIC_MASTER 0x20
#define PORT_PIC_SLAVE  0xA0
#define PORT_PIC_MASTER_COMMAND PORT_PIC_MASTER
#define PORT_PIC_MASTER_DATA (PORT_PIC_MASTER + 1)
#define PORT_PIC_SLAVE_COMMAND PORT_PIC_SLAVE
#define PORT_PIC_SLAVE_DATA (PORT_PIC_SLAVE + 1)
#define IRQ_SLAVE       2

/* 初始化8259中断控制器：
 * 硬件中断IRQ从32号开始，自动发送EOI */
void
init_intr(void) {
    out_byte(PORT_PIC_MASTER_DATA, 0xFF);
    out_byte(PORT_PIC_SLAVE_DATA , 0xFF);

    // 0x11为PIC初始化请求，PIC接受请求后会等待三条data port上的"initialisation words"
    // 分别设置IRQ的偏移、PIC连接方式和附加信息
    // 初始化MASTER PIC
    out_byte(PORT_PIC_MASTER_COMMAND, 0x11);
    out_byte(PORT_PIC_MASTER_DATA, 32);           // Master PIC vector offset
    out_byte(PORT_PIC_MASTER_DATA, 1 << 2);       // tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
    out_byte(PORT_PIC_MASTER_DATA, 0x3);          // 0x01 | 0x02, 0x01:8086/88 (MCS-80/85) mode; 0x02:Auto (normal) EOI
    // 初始化SLAVE PIC
    out_byte(PORT_PIC_SLAVE_COMMAND, 0x11);
    out_byte(PORT_PIC_SLAVE_DATA, 32 + 8);        // Slave PIC vector offset
    out_byte(PORT_PIC_SLAVE_DATA, 2);             // tell Slave PIC its cascade identity (0000 0010)
    out_byte(PORT_PIC_SLAVE_DATA, 0x3);           // 0x01 | 0x02, 0x01:8086/88 (MCS-80/85) mode; 0x02:Auto (normal) EOI

    out_byte(PORT_PIC_MASTER_COMMAND, 0x68);
    out_byte(PORT_PIC_MASTER_COMMAND, 0x0A);
    out_byte(PORT_PIC_SLAVE_COMMAND, 0x68);
    out_byte(PORT_PIC_SLAVE_COMMAND, 0x0A);
}
</code>
通过代码你大概也能猜到，现代的intel体系中多采用两个8259中断控制器：Master和Slave级联组成，就像这样:

[caption id="attachment_229" align="aligncenter" width="402"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/irq_cascade.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/irq_cascade.gif" alt="slave芯片的输出连接到master芯片的IRQ 2" width="402" height="470" class="size-full wp-image-229" /></a> slave芯片的输出连接到master芯片的IRQ 2[/caption]

初始化代码中首先告知Master芯片在IRQ2上存在级联的Slave芯片，之后分别对两个芯片各设置了32和40的偏移量，使得总体的IRQ有了32的偏移量。这样做的原因是因为CPU已经使用了0-31的中断号供CPU异常使用，为了避免冲突，所以需要对PIC设置32的偏移量，例如：时钟中断IRQ 0在通过PIC传递给CPU时为32号中断，对PIC更详细的讲解在<a href="http://wiki.osdev.org/PIC" title="PIC" target="_blank">这里</a>。
<hr />
<h3>初始化中断描述符表</h3>
当中断到来后，机器硬件会负责跳转到对应的中断处理程序执行。那么，机器是如何知道中断处理程序在哪里呢？在保护模式中，我们通过设置正确的中断描述符表（Interrupt descriptor table）来指导硬件的工作。
中断描述符表和全局描述符表十分相似，在中断描述符表中，由CPU的不可见寄存器idtr存放中断描述符表的起始线性地址(32位)和大小限制(16位)(是不是和gdtr很像？)，当中断到来时，硬件通过idtr中的起始线性地址和中断号计算对应的中断描述符地址：

[caption id="attachment_238" align="aligncenter" width="423"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/05/idt.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2014/05/idt.gif" alt="计算中断描述符地址" width="423" height="364" class="size-full wp-image-238" /></a> 计算中断描述符地址[/caption]

中断描述符表中最多有256个表项，每项占64位，其中每个表项的结构如下：
<code lang="c">
typedef struct GateDescriptor {
    uint32_t offset_15_0      : 16; // offset的低16位
    uint32_t segment          : 16;
    uint32_t pad0             : 8;  // 0
    uint32_t type             : 4;  // Task gate, interrupt gate or trap gate
    uint32_t system           : 1;  // = 0 for interrupt gates.
    uint32_t privilege_level  : 2;  // 调用需要的最低特权等级，防止特权指令被用户空间调用
    uint32_t present          : 1;  // can be set to 0 for unused interrupts or for Paging.
    uint32_t offset_31_16     : 16; // offset的高16位
} GateDescriptor;
</code>
其中最主要的字段为segment和offset，分别为中断处理程序的段选择子和线性地址。下面我们为Nanos设置中断描述符表：
<code lang="c">
#define INTERRUPT_GATE_32   0xE
#define TRAP_GATE_32        0xF

/* the global IDT list
   in Nanos, each entry of the IDT is either an interrupt gate, or a trap gate */
static GateDesc idt[NR_IRQ];

/* setup a interrupt gate for interrupt handlers */
static void set_intr(GateDesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {
	ptr->offset_15_0 = offset & 0xFFFF;
	ptr->segment = selector;
	ptr->pad0 = 0;
	ptr->type = INTERRUPT_GATE_32;
	ptr->system = false;
	ptr->privilege_level = dpl;
	ptr->present = true;
	ptr->offset_31_16 = (offset >> 16) & 0xFFFF;
}

/* setup a trap gate for cpu exceptions */
static void set_trap(GateDesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {
	ptr->offset_15_0 = offset & 0xFFFF;
	ptr->segment = selector;
	ptr->pad0 = 0;
	ptr->type = TRAP_GATE_32;
	ptr->system = false;
	ptr->privilege_level = dpl;
	ptr->present = true;
	ptr->offset_31_16 = (offset >> 16) & 0xFFFF;
}

void init_idt() {
	int i;
	for (i = 0; i < NR_IRQ; i ++) {
		set_trap(idt + i, SEG_KERNEL_CODE << 3, (uint32_t)irq_empty, DPL_KERNEL);
	}
	set_trap(idt + 0, SEG_KERNEL_CODE << 3, (uint32_t)vec0, DPL_KERNEL);
	set_trap(idt + 1, SEG_KERNEL_CODE << 3, (uint32_t)vec1, DPL_KERNEL);
	set_trap(idt + 2, SEG_KERNEL_CODE << 3, (uint32_t)vec2, DPL_KERNEL);
	set_trap(idt + 3, SEG_KERNEL_CODE << 3, (uint32_t)vec3, DPL_KERNEL);
	set_trap(idt + 4, SEG_KERNEL_CODE << 3, (uint32_t)vec4, DPL_KERNEL);
	set_trap(idt + 5, SEG_KERNEL_CODE << 3, (uint32_t)vec5, DPL_KERNEL);
	set_trap(idt + 6, SEG_KERNEL_CODE << 3, (uint32_t)vec6, DPL_KERNEL);
	set_trap(idt + 7, SEG_KERNEL_CODE << 3, (uint32_t)vec7, DPL_KERNEL);
	set_trap(idt + 8, SEG_KERNEL_CODE << 3, (uint32_t)vec8, DPL_KERNEL);
	set_trap(idt + 9, SEG_KERNEL_CODE << 3, (uint32_t)vec9, DPL_KERNEL);
	set_trap(idt + 10, SEG_KERNEL_CODE << 3, (uint32_t)vec10, DPL_KERNEL);
	set_trap(idt + 11, SEG_KERNEL_CODE << 3, (uint32_t)vec11, DPL_KERNEL);
	set_trap(idt + 12, SEG_KERNEL_CODE << 3, (uint32_t)vec12, DPL_KERNEL);
	set_trap(idt + 13, SEG_KERNEL_CODE << 3, (uint32_t)vec13, DPL_KERNEL);
	set_trap(idt + 14, SEG_KERNEL_CODE << 3, (uint32_t)vec14, DPL_KERNEL);

	set_intr(idt+32 + 0, SEG_KERNEL_CODE << 3, (uint32_t)irq0, DPL_KERNEL);
	set_intr(idt+32 + 1, SEG_KERNEL_CODE << 3, (uint32_t)irq1, DPL_KERNEL);

	/* the ``idt'' is its virtual address */
	write_idtr(idt, sizeof(idt));
}
</code>
代码中像vec()这样的函数就是内核中相应的中断处理程序，init_idt函数首先将所有中断/陷阱门都设置为irq_empty()，防止出现未处理的中断，之后设置了硬件中断和异常的门结构。中断门和异常门极其相似，但他们的重要区别在于：当硬件通过一个中断门时，硬件会清除控制寄存器的IF位（关中断），而异常门则不会，在之后的内核实现中我们会发现这是十分重要的！Nanos（以及通常的操作系统）为外部硬件中断设置中断门（时钟、键盘中断），为CPU异常和软中断使用异常门。

最后执行write_idtr()函数将idt线性地址和长度通过lidt指令载入到idtr寄存器中：
<code lang="c">
/* 修改IDRT */
static inline void
save_idt(void *addr, uint32_t size) {
    static volatile uint16_t data[3];
    data[0] = size - 1;
    data[1] = (uint32_t)addr;
    data[2] = ((uint32_t)addr) >> 16;
    asm volatile("lidt (%0)" : : "r"(data));
}
</code>
对于IDT更详细的讲解见<a href="http://wiki.osdev.org/IDT" title="IDT" target="_blank">这里</a>和<a href="http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT.html" title="GDT&IDT" target="_blank">这里</a>。
<hr />
<h3>中断处理</h3>
当完成了上面这些繁杂初始化工作后，Nanos的内核初始化工作便完成了！之后entry函数打开了硬件中断，进入死循环并开始响应硬件中断。最后让我们来看看Nanos响应中断的具体过程吧：
<ol>
	<li>当一个时钟中断由我们设置的PIT发出，PIC收到IRQ 0，因为我们所设置的偏移量，PIC会向CPU发出32号中断</li>
	<li>当CPU执行完当前的语句后发现了PIC送达的中断，此时硬件首先将eflags、cs、eip寄存器依次压栈</li>
	<li>通过中断描述符表找到中断处理函数irq0()，修改cs、eip寄存器指向irq0()的线性地址，修改eflags的IF位(因为这是一个中断门)，转至irq0()函数执行中断处理</li>
	<li>irq0()函数见下方代码，irq0以汇编的形式定义，首先压栈0作为error code（注:之所以这么做是因为当发生部分中断时会由硬件自动压栈一个error code，而部分中断硬件没有这么做，为了统一栈中的空间布局，硬件没有自动压栈error code的中断Nanos在中断处理函数中手动压栈0作为error code，Linux中也是这样实现的），再压栈一个内部定义的中断码，然后jmp至asm_do_irq函数</li>
	<li>asm_do_irq函数中首先保存了大量的寄存器现场信息，之后修改段基址寄存器，将运行环境切换至内核空间，最后压栈sp指针作为参数调用C函数irq_handle</li>
	<li>irq_handle函数的参数为保存的sp指针，实际上指向了Nanos的TrapFrame（保存了进程的寄存器上下文），irq_handle通过tf指针访问之前压栈的中断码，根据不同的中断码做出响应处理中断</li>
	<li>当irq_handle返回到asm_do_irq后，汇编代码继而执行大量的pop指令对保存的进程寄存器上下文进行恢复，最后通过iret语句恢复最初由硬件压栈的eflags、cs、eip寄存器，内核中断响应路径至此结束，控制又交回了中断发生前在运行的进程</li>
</ol>
<p><br /></p>
<code lang="asm">
.globl irq0;     irq0:  pushl $0;  pushl $1000; jmp asm_do_irq

.globl asm_do_irq
.extern irq_handle
asm_do_irq:
    pushl %ds; pushl %es; pushl %fs; pushl %gs
    pushal # 依次把寄存器AX、CX、DX、BX、SP、BP、SI和DI压栈
    movw $SELECTOR_KERNEL(SEG_KERNEL_DATA), %ax
    movw %ax, %ds
    movw %ax, %es

    pushl %esp # 作为irq_handle函数的指针参数使用
    call irq_handle

    addl $4, %esp

    popal
    popl %gs; popl %fs; popl %es; popl %ds
    addl $8, %esp
    iret # ISR（Interrupt Service Routines）必须以iret返回
</code>
irq_handle函数：
<code lang="c">
typedef struct TrapFrame {
    uint32_t edi, esi, ebp, esp_;
    uint32_t ebx, edx, ecx, eax;   // Register saved by pushal
    uint32_t gs, fs, es, ds;       // Segment register
    int32_t  irq;                  // # of irq
    uint32_t err, eip, cs, eflags; // Execution state before trap
} TrapFrame;

void irq_handle(struct TrapFrame *tf) {
    if (tf->irq == 1000) {
        printf(".");
    } else if (tf->irq == 1001) {
        uint32_t code = in_byte(0x60);
        uint32_t val = in_byte(0x61);
        out_byte(0x61, val | 0x80);
        out_byte(0x61, val);
        printf("%d\n", code);
    } else {
        if (tf->irq == -1) {
            printf("\nUnhandled exception!\n");
        } else {
            printf("\nUnexpected exception #%d\n", tf->irq);
        }
        assert(0);
    }
}
</code>
到这里为止Nanos的框架代码部分全部分析完毕了，之后的文章中将针对我自己对Nanos的实现进行记录。
坚持不懈：）
<hr />
<h3>参考资料</h3>
<ul>
	<li><a href="http://wiki.osdev.org/Main_Page" title="OSDev" target="_blank">OSDev Wiki</a></li>
	<li><a href="http://cslab.nju.edu.cn/opsystem/#OS2014_3" title="Nanos" target="_blank">Nanos课程主页</a></li>
	<li><a href="http://docs.huihoo.com/gnu_linux/own_os/interrupt-vectors_2.htm" title="IDT" target="_blank">Developing Your Own OS On IBM PC --Darwin yuan</a>
	<li>《现代操作系统》</li>
	<li>《深入理解Linux内核》</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2014-05-19 23:08:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-19 15:08:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nanos-note-2-%e5%86%85%e6%a0%b8%e5%88%9d%e5%a7%8b%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nanos"><![CDATA[Nanos]]></category>
		<category domain="post_tag" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751926418]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>来自Swift的hello,world!</title>
		<link>http://blog.kongfy.com/2014/06/%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld/</link>
		<pubDate>Tue, 03 Jun 2014 11:14:30 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=273</guid>
		<description></description>
		<content:encoded><![CDATA[一觉醒来，所有的新闻媒体都充斥着<strong>Swift</strong>，不过这个Swift可不是那个女歌手<a href="http://en.wikipedia.org/wiki/Taylor_Swift">Swift</a>，而是apple在WWDC2014上刚刚发布的新编程语言：<a href="https://developer.apple.com/swift/">Swift</a>。

[caption id="attachment_277" align="aligncenter" width="1024"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/rdn_538cc786563e1.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/rdn_538cc786563e1.jpg" alt="WWDC2014推出Swift编程语言" width="1024" height="682" class="size-full wp-image-277" /></a> WWDC2014推出Swift编程语言[/caption]

<h3>Swift是什么？</h3>

突然冒出一个新语言，这感觉...还是先来看看苹果怎么说：

<blockquote>
  Swift is an innovative new programming language for Cocoa and Cocoa Touch. Writing code is interactive and fun, the syntax is concise yet expressive, and apps run lightning-fast. Swift is ready for your next iOS and OS X project — or for addition into your current app — because Swift code works side-by-side with Objective-C.
</blockquote>

是不是有一种不明觉厉的感觉！简单来说Swift是一个运行效率高、并且具有多种现代语言特性、可以和Objective-C一起使用的用来开发iOS和OS X应用的新语言。

<!--more-->

<h3>Swift是不是运行效率很低？</h3>

很多人在看到Swift的动态解释特性的时候很自然的认为Swift运行效率很低。但这并说不通，因为Swift并不是一个脚本语言，虽然在apple新推出的playground中，你可以像一个脚本语言一样来运行它，但是它却不是一个脚本语言。<em>Using the high-performance LLVM compiler, Swift code is transformed into optimized native code.</em>Swift和Objective-C一样，是由LLVM编译成native code运行的。同时，Swift在内存管理方面依然沿用了ARC机制，并没有垃圾回收造成的效率损失。在WWDC上展示了其运行效率甚至已经超越了其前辈Objective-C！(不过这个...我感觉只能信一半)

[caption id="attachment_285" align="aligncenter" width="580"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/wwdc-31.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/wwdc-31.jpg" alt="Swift运行效率" width="580" height="327" class="size-full wp-image-285" /></a> Swift运行效率[/caption]

<h3>大明湖畔的Objective-C</h3>

[caption id="attachment_304" align="aligncenter" width="416"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/538d0f1cdec3c.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/538d0f1cdec3c.jpg" alt="长江后浪推前浪，前浪死在沙滩上" width="416" height="362" class="size-full wp-image-304" /></a> 长江后浪推前浪，前浪死在沙滩上[/caption]

相信不止我一个人在第一次看到的Swift的时候心中一声咆哮：“我*，这Objective-C是白学了么！”

Objective-C作为Swift的大哥，而Swift作为Objective-C官方出品的继任者，我相信在未来很有可能会取代Objective-C现在的地位，但是不是现在，在未来一段时间内也不会替代Objective-C。毕竟现在如此众多基于Objective-C的项目还是要继续维护和发展的，而另一方面，Swift也远远还没有成熟到足够取代老大哥的地步。不过Swift的特性确实足够出色，相信取代Objective-C也只是时间上的问题。

不过apple对Swift和Objective-C的关系也比较模糊，似乎并没有明确的表态，而更像是试探性的发布Swift来试探开发者的反应。也就是说，目前情况下apple并不认为Swift已经足以取代Objective-C，一个比较靠谱的说法是：如果有一天apple用Swift重写了iOS内置应用，那才算得上是apple对Swift官方语言身份的认可。

<h3>hello, world!</h3>

看了半天热闹，也该上手感受感受了。apple同时放出了Xcode 6 beta来支持Swift的开发，所以首先安装Xcode 6 beta（同时放出的还有OS X Yosemite，这个如果不是急需建议还是先等等，笔者上次太早更新Maverick导致发生了一些不愉快的体验）。

[caption id="attachment_288" align="aligncenter" width="611"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/8DCE2F8B-8BC5-4B2E-9B5D-168A9EFEEFE8.jpg" alt="安装Xcode 6 beta" width="611" height="388" class="size-full wp-image-288" /></a> 安装Xcode 6 beta[/caption]

打开Xcode，还是熟悉的感觉，创建一个项目，选择语言为Swift:

[caption id="attachment_291" align="aligncenter" width="730"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/8AA06695-5ED4-43D5-A5EC-D7F0DA81CC66.jpg" alt="使用Swift创建项目" width="730" height="430" class="size-full wp-image-291" /></a> 使用Swift创建项目[/caption]

看的出来apple对待Swift还是很认真的，UIKit的文档全部都针对Swift做了重写：

[caption id="attachment_293" align="aligncenter" width="1400"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/5AED08BC-3C28-4AFC-B735-BD695D1F8426.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/5AED08BC-3C28-4AFC-B735-BD695D1F8426.jpg" alt="UIView文档中的Swift部分" width="1400" height="757" class="size-full wp-image-293" /></a> UIView文档中的Swift部分[/caption]

找准位置，写下helloworld代码~

<code>
    override func viewDidLoad() {
        super.viewDidLoad()
        println("hello, world")
    }
</code>

运行后就可以看到华丽丽的hello, world输出了~

<h3>官方教程</h3>

目测现在已经有一大批人要开始Swift语言入门教程的写作工作了...不过目前能看到最好的教程还是apple自己的文档：

<ul>
<li><a href="https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11">The Swift Programming Language</a></li>
<li><a href="http://itunes.apple.com/cn/book/swift-programming-language/id881256329?mt=11">Welcome to Swift</a></li>
</ul>

抽空看看，虽然只是一个半吊子iOS开发，也得跟得上潮流不是~]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2014-06-03 19:14:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-03 11:14:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9d%a5%e8%87%aaswift%e7%9a%84helloworld]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="ios-development"><![CDATA[iOS开发]]></category>
		<category domain="post_tag" nicename="swift"><![CDATA[Swift]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052759]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.110.234.170]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-06-03 23:04:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-06-03 15:04:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>大赞！！！！！！！！</strong>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229316]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Single Number</title>
		<link>http://blog.kongfy.com/2014/06/single-number/</link>
		<pubDate>Thu, 05 Jun 2014 15:16:50 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  Given an array of integers, every element appears twice except for one. Find that single one.
  
  Note:
  Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
</blockquote>

题目链接在<a href="https://oj.leetcode.com/problems/single-number/">这里</a>。

这是一道很有意思的题目，大意是说在一个整型数组中，所有的数字都出现了两次，只有一个数是例外，找出这个数。

乍一看感觉很简单啊，开个数组计数就好了~可惜题目还要求要在不使用额外空间的情况下找到解，这就有点蛋疼了...如果使用二分查找倒是不会用到额外空间，可是时间复杂度为O(nlogn)，又不符合题目要求的线性复杂度...

该怎么办呢？该怎么办呢？

<!--more-->

其实这个题目的解法非常的巧妙，也非常简单，主要用到了<strong>异或</strong>运算的性质：
<code>
a xor a = 0
0 xor a = a
a xor b = b xor a
</code>
非常非常简单...使用上面的性质可以很容易知道，把数组中所有的数异或起来，得到的结果就是仅出现了一次的数！！！！！

<code lang="cpp">
class Solution
{
public:
    int singleNumber(int A[], int n)
    {
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans ^= A[i];
        }
        return ans;
    }
};
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2014-06-05 23:16:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-05 15:16:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[single-number]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="leetcode"><![CDATA[leetcode]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753592818]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Copy List with Random Pointer</title>
		<link>http://blog.kongfy.com/2014/06/copy-list-with-random-pointer/</link>
		<pubDate>Fri, 06 Jun 2014 16:16:56 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
  
  Return a deep copy of the list.
</blockquote>

题目链接在<a href="https://oj.leetcode.com/problems/copy-list-with-random-pointer/">这里</a>。

题目要求对链表进行复制，不过这个链表稍微有点特殊：在每一个节点中除了指向下一个节点的指针，还有一个指向链表中随机节点的指针，如下：
<code lang="cpp">
struct RandomListNode {
    int label;
    RandomListNode *next, *random;
    RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
};
</code>

这个链表看起来大概是这个样子：

[caption id="attachment_330" align="aligncenter" width="300"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/0.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/0.png" alt="带有随机指针的链表" width="300" height="125" class="size-full wp-image-330" /></a> 带有随机指针的链表[/caption]

这个随机指针对链表的拷贝造成了不小的麻烦...

<!--more-->

最朴素的做法是先按照next指针将链表主链复制出来，然后对每一个节点计算出random指针所处的索引，并根据索引给对应的新链表中的指针赋值。这个方法是显然的，同时也是低效的，时间复杂度为O(n<sup>2</sup>)。

基于朴素解法，对遍历做一定改进的算法是在复制主链表时使用散列表来记录两个链表对应节点地址之间的关联关系，这样通过查询散列表可以实现快速找到原链表节点random指针对应的新链表节点random指针值，将时间复杂度降为O(n)，使用了O(n)的额外空间用于散列表。

而最为巧妙的，也是不太容易想到的一种方法可以使用O(n)的时间复杂度，并且在不是用额外空间的情况下解决这个问题。步骤如下：
<ol>
	<li>对链表进行遍历，对每个节点，复制一个新节点，并将其插入到链表中该节点后面的位置上</li>
[caption id="attachment_331" align="aligncenter" width="607"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/1.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/1.png" alt="Step 1" width="607" height="149" class="size-full wp-image-331" /></a> Step 1[/caption]
	<li>再次对链表进行遍历，k = 1...n，将2k节点的random指针指向(2k - 1)节点的random指针所指向节点的后继节点</li>
[caption id="attachment_332" align="aligncenter" width="607"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/2.png" alt="Step 2" width="607" height="150" class="size-full wp-image-332" /></a> Step 2[/caption]
	<li>最后一次对链表进行遍历，k = 1...n，将2k节点顺序抽出组成新链表</li>
[caption id="attachment_333" align="aligncenter" width="608"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/3.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/3.png" alt="Step3" width="608" height="127" class="size-full wp-image-333" /></a> Step3[/caption]
</ol>

<code lang="cpp">
class Solution
{
public:
    RandomListNode *copyRandomList(RandomListNode *head)
    {
        if (!head) {
            return NULL;
        }
        
        RandomListNode *p = head, *q = NULL;
        while (p) {
            q = new RandomListNode(p->label);
            q->next = p->next;
            p->next = q;
            p = q->next;
        }

        p = head;
        q = NULL;
        while (p) {
            q = p->next;
            if (p->random) {
                q->random = p->random->next;
            }
            p = q->next;
        }

        p = head;
        q = NULL;
        RandomListNode *new_head = NULL, *tail = NULL;
        while (p) {
            q = p->next;
            p->next = q->next;
            
            q->next = NULL;
            if (!new_head) {
                new_head = q;
            } else {
                tail->next = q;
            }
            tail = q;
            
            p = p->next;
        }
        
        return new_head;
    }
};
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2014-06-07 00:16:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-06 16:16:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[copy-list-with-random-pointer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="leetcode"><![CDATA[leetcode]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752173156]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Largest Rectangle in Histogram</title>
		<link>http://blog.kongfy.com/2014/06/largest-rectangle-in-histogram/</link>
		<pubDate>Sun, 08 Jun 2014 03:16:51 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
  <a href="http://blog.kongfy.com/wp-content/uploads/2014/06/histogram.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/histogram.png" alt="histogram" width="188" height="204" class="aligncenter size-full wp-image-339" /></a>
  Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
  <a href="http://blog.kongfy.com/wp-content/uploads/2014/06/histogram_area.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/histogram_area.png" alt="histogram_area" width="188" height="204" class="aligncenter size-full wp-image-340" /></a>
  The largest rectangle is shown in the shaded area, which has area = 10 unit.
  
  For example,
  Given height = [2,1,5,6,2,3],
  return 10.
</blockquote>

题目链接在<a href="https://oj.leetcode.com/problems/largest-rectangle-in-histogram/">这里</a>

<!--more-->

<hr />

<h2>O(n<sup>2</sup>)</h2>

这道题目最为朴素的解法时间复杂度为O(n<sup>2</sup>)，简单的枚举所有的点对作为区间的起点和终点，并计算所围成的最大矩形面积并找到最大值即可。
但是显然，这样做太<strong>低效</strong>了。

<hr />

<h2>O(nlogn)</h2>

更近一步，我们可以得到一个基于分治思想时间复杂度为O(nlogn)解法：
对于任何一个区间，我们首先找到这个区间中的<strong>最低点</strong>，则这个区间中最大的矩形面积为如下三种情况的最大值：

<ol>
<li><strong>最低点</strong>左边区间中的最大矩形面积</li>
<li><strong>最低点</strong>右边区间中的最大矩形面积</li>
<li><strong>最低点</strong>作为矩形的高所围成的矩形面积</li>
</ol>

这样我们就得到了一个分治解法，如下：
<code lang="cpp">
class Solution
{
public:
    int largestRectangleArea(vector<int> &height)
    {
        return maxArea(height, 0, height.size());
    }

private:
    int maxArea(vector<int> &height, int l, int r)
    {
        if (l >= r) {
            return 0;
        }

        int min = height[l];
        int index = l;

        if (l >= r) {
            return 0;
        }

        for (int i = l; i < r; ++i) {
            if (height[i] < min) {
                min = height[i];
                index = i;
            }
        }

        int left = maxArea(height, l, index);
        int right = maxArea(height, index + 1, r);
        int ans = (r - l) * min;

        if (left > ans) {
            ans = left;
        }

        if (right > ans) {
            ans = right;
        }

        return ans;
    }
};
</code>

O(nlogn)的解法对这道题目来说还不够好，更悲剧的上面的O(nlogn)解法存在最差情况：当输入序列为递增序列时，这个解法会退化为O(n<sup>2</sup>)，这是我们不能够接受的。

<hr />

<h2>O(n)</h2>

O(n)算法相比上面两种方法来说更加的巧妙，其基本思路是：对输入序列中的每一项，都得到以该项作为最低点所能围成的最大矩形面积，并得到其中的最大值作为解。
这个思路的正确性是显然的，为了有效的实现这个思路，在过程中维护了一个存放序列索引的栈，对输入序列依次遍历：

<ol>
<li>当输入项大于栈顶索引对应的输入项时，将输入项索引入栈</li>
<li>当输入项小于栈顶索引对应的输入项时，不断出栈栈顶索引直到输入项大于栈顶索引对应的输入项。同时，对每个出栈的栈顶索引：以该索引对应的输入项为最低点的矩形的左边界为栈内前一个元素--新的栈顶（因为栈内元素的递增的），而右边界就是当前正在遍历的输入项，因此可以在O(1)的时间内计算出这个矩形的面积。</li>
<li>当遍历结束后如果栈不为空，则对栈依次出栈并执行步骤2</li>
</ol>

看下代码就明白了：
<code lang="cpp">
class Solution
{
public:
    int largestRectangleArea(vector<int> &height)
    {
        return getMaxArea(height, height.size());
    }

private:
    // The main function to find the maximum rectangular area under given
    // histogram with n bars
    // http://www.geeksforgeeks.org/largest-rectangle-under-histogram/
    int getMaxArea(vector<int> &hist, int n)
    {
        // Create an empty stack. The stack holds indexes of hist[] array
        // The bars stored in stack are always in increasing order of their
        // heights.
        stack<int> s;

        int max_area = 0; // Initalize max area
        int tp;  // To store top of stack
        int area_with_top; // To store area with top bar as the smallest bar

        // Run through all bars of given histogram
        int i = 0;
        while (i < n)
        {
            // If this bar is higher than the bar on top stack, push it to stack
            if (s.empty() || hist[s.top()] <= hist[i])
                s.push(i++);

            // If this bar is lower than top of stack, then calculate area of rectangle
            // with stack top as the smallest (or minimum height) bar. 'i' is
            // 'right index' for the top and element before top in stack is 'left index'
            else
            {
                tp = s.top();  // store the top index
                s.pop();  // pop the top

                // Calculate the area with hist[tp] stack as smallest bar
                area_with_top = hist[tp] * (s.empty() ? i : i - s.top() - 1);

                // update max area, if needed
                if (max_area < area_with_top)
                    max_area = area_with_top;
            }
        }

        // Now pop the remaining bars from stack and calculate area with every
        // popped bar as the smallest bar
        while (s.empty() == false)
        {
            tp = s.top();
            s.pop();
            area_with_top = hist[tp] * (s.empty() ? i : i - s.top() - 1);

            if (max_area < area_with_top)
                max_area = area_with_top;
        }

        return max_area;
    }
};
</code>

<hr />

<h2>参考资料</h2>

<ol>
<li><a href="http://www.geeksforgeeks.org/largest-rectangle-under-histogram/">Largest Rectangular Area in a Histogram</a></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2014-06-08 11:16:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-08 03:16:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[largest-rectangle-in-histogram]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="leetcode"><![CDATA[leetcode]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753137621]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinkedIn</title>
		<link>http://blog.kongfy.com/2015/09/linkedin-2/</link>
		<pubDate>Wed, 09 Sep 2015 13:36:18 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1424</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1424</wp:post_id>
		<wp:post_date><![CDATA[2015-09-09 21:36:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-09 13:36:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linkedin-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="social-network"><![CDATA[social network]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1424]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://cn.linkedin.com/in/kongfy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>在LVM上修改卷大小</title>
		<link>http://blog.kongfy.com/2014/06/%e5%9c%a8lvm%e4%b8%8a%e4%bf%ae%e6%94%b9%e5%8d%b7%e5%a4%a7%e5%b0%8f/</link>
		<pubDate>Thu, 12 Jun 2014 15:41:46 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=361</guid>
		<description></description>
		<content:encoded><![CDATA[实验室的服务器是CentOS6.4的系统，默认采用了LVM。这带来了很大的便利，灵活的卷调整是其中之一。有关于LVM的介绍在<a href="https://wiki.archlinux.org/index.php/LVM_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" title="LVM" target="_blank">这里</a>。

碰巧需要对卷大小进行一次调整，CentOS默认安装为"/home"分配了较大的卷而"/"分配了较小的卷，这不符合目前实验室的使用需求，因此需要对卷大小进行调整，过程记录如下。

<code>
操作系统：CentOS6.4
文件系统：LVM + Ext4
</code>

<!--more-->

查看当前LVM相关信息
<code>
[root@server003 ~]# pvdisplay
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               vg_server003
  PV Size               418.14 GiB / not usable 3.00 MiB
  Allocatable           yes (but full)
  PE Size               4.00 MiB
  Total PE              107042
  Free PE               0
  Allocated PE          107042
  PV UUID               GTugxC-XdOn-zkAv-gacM-jtWo-0dJf-OsxoD1

[root@server003 ~]# vgdisplay
  --- Volume group ---
  VG Name               vg_server003
  System ID
  Format                lvm2
  Metadata Areas        1
  Metadata Sequence No  4
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                3
  Open LV               3
  Max PV                0
  Cur PV                1
  Act PV                1
  VG Size               418.13 GiB
  PE Size               4.00 MiB
  Total PE              107042
  Alloc PE / Size       107042 / 418.13 GiB
  Free  PE / Size       0 / 0
  VG UUID               qknhd2-bSCt-70Is-FCt8-jawb-fKn9-xAfSRr

[root@server003 ~]# lvdisplay
  --- Logical volume ---
  LV Path                /dev/vg_server003/lv_root
  LV Name                lv_root
  VG Name                vg_server003
  LV UUID                WUin0B-g3tq-P9To-cekJ-T266-afwO-ySxhN1
  LV Write Access        read/write
  LV Creation host, time server003, 2014-06-12 15:47:01 +0800
  LV Status              available
  # open                 1
  LV Size                50.00 GiB
  Current LE             12800
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:0

  --- Logical volume ---
  LV Path                /dev/vg_server003/lv_home
  LV Name                lv_home
  VG Name                vg_server003
  LV UUID                fFPJRF-V58y-N0qV-88YG-pz9I-w2Pe-kaX2cJ
  LV Write Access        read/write
  LV Creation host, time server003, 2014-06-12 15:47:08 +0800
  LV Status              available
  # open                 1
  LV Size                344.51 GiB
  Current LE             88194
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:2

  --- Logical volume ---
  LV Path                /dev/vg_server003/lv_swap
  LV Name                lv_swap
  VG Name                vg_server003
  LV UUID                NTRZJO-ydBo-SbVq-hcI3-AmVU-oui0-8PTgoP
  LV Write Access        read/write
  LV Creation host, time server003, 2014-06-12 15:47:50 +0800
  LV Status              available
  # open                 1
  LV Size                23.62 GiB
  Current LE             6048
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:1
</code>

缩小/home所使用的卷大小
<code>
[root@server003 ~]# umount /home
[root@server003 ~]# resize2fs /dev/vg_server003/lv_home 18G
resize2fs 1.41.12 (17-May-2010)
请先运行 'e2fsck -f /dev/vg_server003/lv_home'.

[root@server003 ~]# e2fsck -f /dev/vg_server003/lv_home
e2fsck 1.41.12 (17-May-2010)
第一步: 检查inode,块,和大小
第二步: 检查目录结构
第3步: 检查目录连接性
Pass 4: Checking reference counts
第5步: 检查簇概要信息
/dev/vg_server003/lv_home: 246/22585344 files (3.7% non-contiguous), 1471842/90310656 blocks
[root@server003 ~]# resize2fs /dev/vg_server003/lv_home 18G
resize2fs 1.41.12 (17-May-2010)
Resizing the filesystem on /dev/vg_server003/lv_home to 4718592 (4k) blocks.
The filesystem on /dev/vg_server003/lv_home is now 4718592 blocks long.

[root@server003 ~]# lvreduce -L 118.13G /dev/vg_server003/lv_home
  Rounding size to boundary between physical extents: 118.13 GiB
  WARNING: Reducing active logical volume to 118.13 GiB
  THIS MAY DESTROY YOUR DATA (filesystem etc.)
Do you really want to reduce lv_home? [y/n]: y
  Reducing logical volume lv_home to 118.13 GiB
  Logical volume lv_home successfully resized
[root@server003 ~]# resize2fs /dev/vg_server003/lv_home
resize2fs 1.41.12 (17-May-2010)
Resizing the filesystem on /dev/vg_server003/lv_home to 30967808 (4k) blocks.
The filesystem on /dev/vg_server003/lv_home is now 30967808 blocks long.
</code>

重新挂载卷，大小以修改成功
<code>
[root@server003 ~]# mount /dev/vg_server003/lv_home /home
[root@server003 ~]# df -h
Filesystem                        Size  Used Avail Use% Mounted on
/dev/mapper/vg_server003-lv_root   50G  2.8G   44G   6% /
tmpfs                              24G  236K   24G   1% /dev/shm
/dev/sda1                         485M   40M  421M   9% /boot
/dev/mapper/vg_server003-lv_home  117G  206M  111G   1% /home
</code>

修改"/"所使用的卷大小
<code>
[root@server003 ~]# lvextend -l +100%FREE /dev/vg_server003/lv_root
  Extending logical volume lv_root to 276.38 GiB
  Logical volume lv_root successfully resized
[root@server003 ~]# resize2fs /dev/vg_server003/lv_root
resize2fs 1.41.12 (17-May-2010)
Filesystem at /dev/vg_server003/lv_root is mounted on /; on-line resizing required
old desc_blocks = 4, new_desc_blocks = 18
Performing an on-line resize of /dev/vg_server003/lv_root to 72450048 (4k) blocks.
The filesystem on /dev/vg_server003/lv_root is now 72450048 blocks long.

[root@server003 ~]# df -h
Filesystem                        Size  Used Avail Use% Mounted on
/dev/mapper/vg_server003-lv_root  273G  2.8G  256G   2% /
tmpfs                              24G  236K   24G   1% /dev/shm
/dev/sda1                         485M   40M  421M   9% /boot
/dev/mapper/vg_server003-lv_home  117G  206M  111G   1% /home
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date><![CDATA[2014-06-12 23:41:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-12 15:41:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9c%a8lvm%e4%b8%8a%e4%bf%ae%e6%94%b9%e5%8d%b7%e5%a4%a7%e5%b0%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="lvm"><![CDATA[LVM]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052710]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.110.235.12]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-06-15 17:24:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-06-15 09:24:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你的6月份好高产吖。。。。写了这么多篇了已经]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229286]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.kongfy.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.94.142.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-06-15 22:14:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-06-15 14:14:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[就是做做记录，不是啥有价值的东西...充充数~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>31</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229286]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229348]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>OpenStack奇葩配置：Flat network with external DHCP</title>
		<link>http://blog.kongfy.com/2014/06/openstack%e5%a5%87%e8%91%a9%e9%85%8d%e7%bd%ae%ef%bc%9aflat-network-with-external-dhcp/</link>
		<pubDate>Sun, 22 Jun 2014 14:26:03 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=368</guid>
		<description></description>
		<content:encoded><![CDATA[最近对实验室的实验用OpenStack环境进行调整，遇到的最大的阻力来自于系楼网络的特殊性：系楼网络采用强制DHCP的模式，这就意味着我没有办法通过手工设定IP地址的方式来使用虚拟机——即使这个IP地址是可用的。

OpenStack似乎没有针对这种情况的网络模式（即使FlatManager也不行），因为所有的网络模式都需要在虚拟机创建时就可以确定虚拟机的IP，这一点在系楼的网络中是做不到的，同时在系楼中也不能做到拥有可以自己管理的预留IP，所以floating IP的概念也拜拜了。

折腾了一段时间以后总算是找到了一种非常规的解决方案：在FlatManager的基础上通过合并内部网和外部网来达到把虚拟机和物理服务器置于同一网络中的目的。

<strong>注：下文中所有配置均针对icehouse版本。</strong>

<!--more-->
<hr />

<h2>网络配置</h2>
首先我们要按照标准的Flat网络模型配置计算节点网络：

[caption id="attachment_370" align="aligncenter" width="255"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/06/generic-bridge-config-2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/06/generic-bridge-config-2.png" alt="Flat网络模型" width="255" height="296" class="size-full wp-image-370" /></a> Flat网络模型[/caption]

在Flat模式中需要手工建立Linux网桥，网上这方面的资料很多了，在此不进行赘述。值得注意的一点是如果创建的网桥名称不是默认的br100，那么在配置的过程中仅仅按照文档描述的修改配置文件中的
<code>
flat_network_bridge=vmbr
</code>
是不够的，还需要在创建网络时指定网桥的名字才可以...（所以说还是按照默认的br100比较好）

进行了上面的配置之后虚拟机已经可以通过系楼DHCP获取到IP了，但是仍然不能正常的进行网络通信...经过一段时间的挣扎（抓包抓包抓包），发现似乎虚拟机的ARP报文被什么东西拦截了，原来这是OpenStack的防火墙机制，因为DHCP获取到的IP和OpenStack认为的IP不同，所以被判断为IP欺诈报文！So...干掉防火墙：
<code>
firewall_driver = nova.virt.firewall.NoopFirewallDriver
</code>
因为OpenStack的防火墙实际上是使用了libvirt的nwfilter机制，如果已经创建的规则关闭防火墙后没有失效，你可能需要在virsh中手动undefine对应的nwfilter才可以。

到这一步配置已经全部完成了，网络也可以正常访问了，完整的网络配置如下：
<code>
network_manager = nova.network.manager.FlatManager
firewall_driver = nova.virt.firewall.NoopFirewallDriver
multi_host = True
flat_network_bridge = vmbr
allow_same_net_traffic = true
</code>

<hr />
<h2>有得有失</h2>
做这样类似于trick的配置必然是有得有失的，<strong>优点</strong>在于：
<ul>
	<li>完成了特别的需求，将所有虚拟机置于了与物理服务器相同的网络中</li>
	<li>因为没有了内外网的区别，节省了一个网口（如果这能算是优点的话...）</li>
</ul>

这样的配置也带来了很多<strong>缺点</strong>：
<ul>
	<li>最严重的一点：metadata-api不能使用了（因为虚拟机的网关不再是计算节点，因此169.254.169.254的IP不能正常访问了），这带来的直接麻烦就是虚拟机中cloud-init也不能使用了...</li>
	<li>OpenStack记录的IP地址与真实的IP地址不一致，这个主要是不方便，可以忍</li>
	<li>没有内部网和外部网的隔离，虚拟机安全性下降，且网络流量会互相影响，增大了带宽压力</li>
	<li>...</li>
</ul>

所以说这样奇葩的配置虽然满足了最初的诡异需求，但也造成了不小的副作用，一般不建议使用这样的配置，不过为了适应系楼的特殊网络环境，似乎我也没有什么别的选择了...

<hr />
<h2>参考资料</h2>
<a href="http://www.mirantis.com/blog/openstack-networking-flatmanager-and-flatdhcpmanager/http://" title="OpenStack Networking – FlatManager and FlatDHCPManager" target="_blank">OpenStack Networking – FlatManager and FlatDHCPManager</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date><![CDATA[2014-06-22 22:26:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 14:26:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[openstack%e5%a5%87%e8%91%a9%e9%85%8d%e7%bd%ae%ef%bc%9aflat-network-with-external-dhcp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="category" nicename="cloud-computing"><![CDATA[云计算]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1414171015;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:166;}i:1;a:1:{s:2:"id";i:110;}i:2;a:1:{s:2:"id";i:35;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052701]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.98.63.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-06-26 20:39:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-06-26 12:39:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[没碰到这种场景，没怎么看懂。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229278]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>EXC_BAD_ACCESS : UIScrollView crash on iOS7</title>
		<link>http://blog.kongfy.com/2014/08/exc_bad_access-uiscrollview-crash-on-ios7/</link>
		<pubDate>Sat, 23 Aug 2014 03:45:38 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[在我的应用运行在iOS7上时，当用户点击后退退出一个列表时，有可能会导致应用崩溃，错误信息是：EXC_BAD_ACCESS。

其实这个问题存在很久了，但一直不能稳定复现所以放着没管。这一次版本更新似乎出现概率大了很多，所以追了一下终于找到了原因。

<a href="http://blog.kongfy.com/wp-content/uploads/2014/08/B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/08/B3EEA236-8C70-4CED-BFA6-6FECD7C1DDA5.jpg" alt="EXC_BAD_ACCESS" width="650" height="136" class="aligncenter size-full wp-image-388" /></a>

<!--more-->

<h2>EXC_BAD_ACCESS</h2>

<strong>EXC_BAD_ACCESS</strong>这个错误应该是相当普遍也很让人头疼的问题了，按照字面意思理解就是说代码访问了不应该访问的内存地址，类似于C中的悬空指针，即使设置了All Exceptions BreakPoint，也没办法定位到错误的位置——这很合理，毕竟错误发生的地址是"Bad"...

观察发生错误发生错误的线程的stack trace如下：
<a href="http://blog.kongfy.com/wp-content/uploads/2014/08/A1F21BB4-2A5E-4386-848C-492A0653A8FA.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/08/A1F21BB4-2A5E-4386-848C-492A0653A8FA.jpg" alt="objc_msgSend" width="291" height="80" class="aligncenter size-full wp-image-391" /></a>

有进展！看来导致应用Crash的罪魁祸首就是这个objc_msgSend函数！这个函数是Objective-C中的runtime消息发送实现，我们所使用的 [MyClass function] 这样的“函数调用”在Objective-C中实际上都是在运行时由Objective-C使用消息传递来实现的，就像这样： objc_msgSend(MyClass, @selector(function)) 。也就是说我的问题是由于在运行时给一个不存在的对象发送了消息所以导致了Crash。

那么该怎么找到这个不存在的对象呢？很简单，使用Zombie Objects！Apple的命名还是很形象的，如果你在build时开启了这个选项，那么运行时释放的对象都不会被完全释放，而是留在内存中，就像Zombie一样~
在"Product"-"Scheme"-"Edit Scheme"中打开Zombie Objects:
<a href="http://blog.kongfy.com/wp-content/uploads/2014/08/7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/08/7517BBB0-8A1A-4D00-B8FF-E3FEFCA15276.jpg" alt="Zombie" width="700" height="475" class="aligncenter size-full wp-image-394" /></a>

再次运行调试，观察控制台输出：
<code lang="objc">
-[CommentTableViewController scrollViewDidScroll:]: message sent to deallocated instance 0x19397130
</code>

OK，这个不存在的对象终于被我们找到了！

<h2>Why UIScrollView?</h2>

接下来就要好好分析一下错误的原因了，上面的输出告诉我们Crash是因为scrollViewDidScroll消息发送给了已经被释放的对象，但这怎么会发生嘞？一番Google之后发现遇到这个问题的人为数不少，在iOS7中确实存在这个问题，但也没有说明为什么出现，只是给出了<a href="http://stackoverflow.com/questions/15216245/uicollectionview-calling-scrollviewdidscroll-when-popped-from-the-navigation-st" title="解决方法" target="_blank">解决方法</a>，在对象dealloc时，一定将scrollView delegate置为nil：

<code lang="objc">
- (void)dealloc
{
    // iOS7中 EXC_BAD_ACCESS
    // message sent to deallocated instance
    // http://stackoverflow.com/questions/15216245/uicollectionview-calling-scrollviewdidscroll-when-popped-from-the-navigation-st
    self.tableView.delegate = nil;
}
</code>

再次运行，问题解决。

<h2>原因</h2>

这个问题的根本原因应该是因为我没有使用UITableViewController，而是自己基于UIViewController在其中添加UITableView“山寨”了一个UITableViewController，这样做的原因是因为UITableViewController中仅有一个UITableView类型的self.view，而我更需要一个作为Container的UIView，相信这样的需求不仅仅是我一个人遇到过。

但是我这样的山寨就会出现种种问题，总是会出现一些小问题。比如这次的Crash，当我的山寨版UITableViewController退出后，在dealloc的过程中是先释放View Controller和self.view，之后由于引用计数为0，原先作为self.view的subview的UITableView才会被释放，就在这两次释放之间scrollViewDidScroll消息由UITableView发送给了作为delegate的已释放的山寨版UITableViewController...所以...而在UIKit中UITableViewController可以正确处理这些问题。

作为建议：不要自己山寨UITableViewController，更好的实践是将UITableViewController作为Child View Controller加入到自己的View Controller中，血的教训...在<a href="http://www.objc.io/issue-1/table-views.html" title="ojbc.io" target="_blank">objc.io</a>中也提到了这个问题。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date><![CDATA[2014-08-23 11:45:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-23 03:45:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[exc_bad_access-uiscrollview-crash-on-ios7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="ios-development"><![CDATA[iOS开发]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052676]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>120</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2620:0:ed0:4920:18bc:bcb1:e8e2:b04f]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-25 20:26:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-25 12:26:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[赞！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229258]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>[转]What is a Full Stack developer?</title>
		<link>http://blog.kongfy.com/2014/08/%e8%bd%acwhat-is-a-full-stack-developer/</link>
		<pubDate>Sat, 23 Aug 2014 16:18:14 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=405</guid>
		<description></description>
		<content:encoded><![CDATA[临睡前转一篇文章，经常看看，提醒自己：<strong>不要给自己设限！我可以做的更多更好。</strong>
本文转自：<a href="http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/" title="What is a Full Stack developer?" target="_blank">Laurence Gellert's Blog</a>
<hr />

Is it reasonable to expect mere mortals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean?

To me, a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology.

<strong>Good developers who are familiar with the entire stack know how to make life easier for those around them. </strong>This is why I’m so against silos in the work place. Sure, politics and communication challenges get in the way in large organizations. I think the point Facebook is going for with their hiring policy is, if smart people use their heads and their hearts, a better product gets built in less time.

<!--more-->

<h2>Layers of the Full Stack:</h2>
<hr />

<ol>
<li><strong>Server, Network, and Hosting Environment.</strong><ol style="list-style: upper-alpha outside none;">
<li>This involves understanding what can break and why, taking no resource for granted.</li>
<li>Appropriate use of the file system, cloud storage, network resources, and an understanding of data redundancy and availability is necessary.</li>
<li>How does the application scale given the hardware constraints?</li>
<li>What about multi-threading and race conditions? Guess what, you won’t see those on your development machine, but they can and do happen in the real world.</li>
<li>Full stack developers can work side by side with DevOps. The system should provide useful error messages and logging capabilities. DevOps will see the messages before you will, so make them count.</li></ol>
</li>
<li>
<strong>Data Modeling</strong><ol style="list-style: upper-alpha outside none;">
<li>If the data model is flawed, the business logic and higher layers start to need strange (ugly) code to compensate for corner cases the data model doesn’t cover.</li>
<li>Full stack developers know how to create a reasonably normalized relational model, complete with foreign keys, indexes, views, lookup tables, etc.</li>
<li>Full stack developers are familiar with the concept of non-relational data stores and understand where they shine over relational data stores.</li></ol></li>
<li><strong>Business Logic</strong><ol style="list-style: upper-alpha outside none;">
<li>The heart of the value the application provides.</li>
<li>Solid object oriented skills are needed here.</li>
<li>Frameworks might be needed here as well.</li></ol></li>
<li><strong>API layer / Action Layer / MVC</strong><ol style="list-style: upper-alpha outside none;">
<li>How the outside world operates against the business logic and data model.</li>
<li>Frameworks at this level should be used heavily.</li>
<li>Full stack developers have the ability to write clear, consistent, simple to use interfaces. The heights to which some APIs are convoluted repel me.</li></ol></li>
<li><strong>User Interface</strong><ol style="list-style: upper-alpha outside none;">
<li>Full stack developers: a) understand how to create a readable layout, or b) acknowledge they need help from artists and graphic designers. Either way, implementing a good visual design is key.</li>
<li>Can include mastery of HTML5 / CSS.</li>
<li>JavaScript is the up and coming language of the future and lots of exciting work is being done in the JavaScript world (node, backbone, knockout…)</li></ol></li>
<li><strong>User Experience</strong><ol style="list-style: upper-alpha outside none;">
<li>Full stack developers appreciate that users just want things to work.</li>
<li>A good system doesn’t give its users carpal tunnel syndrome or sore eyes. A full stack developer can step back and look at a process that needs 8 clicks and 3 steps, and get it down to one click.</li>
<li>Full stack developers write useful error messages. If something breaks, be apologetic about it. Sometimes programmers inadvertently write error messages that can make people feel stupid.</li></ol></li>
<li><strong>Understanding what the customer and the business need.</strong><ol style="list-style: upper-alpha outside none;">
<li>Now we are blurring into the line of architect, but that is too much of a hands off role.</li>
<li>Full stack developers have a grasp of what is going on in the field when the customer uses the software. They also have a grasp of the business.</li></ol></li>
</ol>
 
<h2>Other Pieces of the Puzzle:</h2>
<ol>
<li>
    Ability to write quality unit tests. By the way, even JavaScript can have unit tests these days.
</li>
<li>
    Understanding of repeatable automated processes for building the application, testing it, documenting it, and deploying it at scale.
</li>
<li>
    An awareness of security concerns is important, as each layer presents its own possible vulnerabilities.
</li>
</ol>

<h2>Closing Thoughts:</h2>

It is very bad practice to tightly couple code to a specific implementation (library, OS, hardware, etc). Just because a full stack developer understands the entire spectrum doesn’t mean they have license to take shortcuts. Well, actually they do if it is a build and throw away prototype.

Technology start-ups need full stack developers for their versatility!  However, as an organization matures, it needs more and more focused skills.

I’m not sure you can call yourself a full stack developer until you have worked in multiple languages, platforms, and even industries in your professional career. Full stack goes beyond a ‘senior engineer’, as it is along the same lines as a polyglot programmer but with a higher view of all the connecting pieces. Note that on my list, only items 3-5 involve writing code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date><![CDATA[2014-08-24 00:18:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-23 16:18:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%acwhat-is-a-full-stack-developer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="thinking"><![CDATA[胡思乱想]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753136232]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++中实现多线程安全的单体类</title>
		<link>http://blog.kongfy.com/2014/10/c%e4%b8%ad%e5%ae%9e%e7%8e%b0%e5%a4%9a%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e5%8d%95%e4%bd%93%e7%b1%bb/</link>
		<pubDate>Mon, 06 Oct 2014 13:05:45 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=420</guid>
		<description></description>
		<content:encoded><![CDATA[最近看了一些算是比较高大上的C++代码，被内力震伤了，赶紧记录下来！最最基础的就是这个：单体类。单体是面向对象中一种非常流行的设计模式，C++的实现百度一下可以找到一坨，但这个稍稍有点特殊——多线程安全。

普通版本的单体类实现如下：

<pre class="lang:c++ decode:true " ># Singleton.h
class Singleton  
{  
public:  
    static Singleton * Instance();
    static bool IsCreated(); 
private:  
    //Singleton模式，隐藏构造函数  
    Singleton();  
    static Singleton * m_Instance;
};</pre>

<pre class="lang:c++ decode:true " ># Singleton.cpp
#include "Singleton.h"

Singleton * Singleton::m_Instance = NULL;  

Singleton::Singleton()  
{
}

//返回Singleton的唯一实例  
Singleton * Singleton::Instance()  
{  
    if (NULL == m_Instance) {  
        m_Instance = new Singleton();  
    }  
    return m_Instance;  
}

bool Singleton::IsCreated()
{
    return (NULL != m_Instance);
}</pre>

乍一看似乎完全没有问题，不过如果这个单体类运行在多线程环境中，将会有可能创建多个实例。临界区出现在Instance()函数中创建单体对象的部分,即静态变量m_Instance！当访问该变量判断单体是否已被创建时，如果不进行临界区保护，很有可能会造成多个线程同时进入临界区，创建了多个Singleton对象，Boom...

<!--more-->

知道了问题解决方法也就明了了，对临界区m_Instance进行保护即可：

<pre class="lang:c++ decode:true " ># Singleton.h
class Singleton  
{  
public:  
    static Singleton * Instance();
    static bool IsCreated(); 
private:  
    //Singleton模式，隐藏构造函数  
    Singleton();  
    static Singleton * m_Instance;
    static volatile int m_lock;
};</pre>

<pre class="lang:c++ decode:true " ># Singleton.cpp

#include "Singleton.h"
#include "spinlock.h"

Singleton * Singleton::m_Instance = NULL;
volatile int classname::sm_lock = 0;

Singleton::Singleton()  
{
}

//返回Singleton的唯一实例  
Singleton * Singleton::Instance()  
{
    if (NULL != m_Instance) {
        return m_Instance;
    }
    spin_lock(&m_lock);
    if (NULL == m_Instance) {
        m_Instance = new Singleton(); 
    }
    spin_unlock(&m_lock);
    return m_Instance;
}

bool Singleton::IsCreated()
{
    bool b;
    spin_lock(&m_lock);
    b = (NULL != m_Instance);
    spin_unlock(&m_lock);
    return b;
}</pre>

原理非常简单，对m_Instance变量的访问使用自旋锁进行了加锁，这样使多线程的访问不会同时进入临界区，消除了隐患。这里做一点思考：

<ol>
    <li>为什么使用自旋锁而不用互斥锁？</li>
    <li>为什么不使用pthread中提供的自旋锁实现？</li>
</ol>

第一个问题实际上涉及到一些trade off的问题，自旋锁和互斥锁虽然都起到了互斥访问的作用，但是行为并不相同，互斥锁当无法获取锁时挂起线程，锁被释放后由系统将线程唤醒，是一个sleep, wake up的过程。而自旋锁则不放弃CPU，不断循环直到锁被释放后获得锁继续执行。

互斥锁的优点很明显，当无法获取锁时立即挂起线程，将CPU交给其他线程，有效利用了CPU时间，但是缺点在于sleep, wake up过程本身就有不小的开销；自旋锁避免了sleep, wake up造成的开销，但因为一直占用CPU直到获得锁，也带来了CPU时间的浪费。

那么如果<strong>在单核的条件下</strong>，自旋锁不会主动释放CPU，则锁的持有者必然无法释放锁，自旋锁只能不断循环直到CPU时间耗尽系统执行线程调度，如果不巧临界区执行时间又比较长，那么造成的CPU资源浪费反而会超过互斥锁的sleep, wake up的代价；然而<strong>在多核的条件下</strong>，即使自旋锁占据了CPU，锁仍然有可能会被其他CPU上执行的线程释放，这样对于像单体这样临界区极短的环境，自旋锁的性能就会优于互斥锁。

不过如今pthread提供的互斥锁都使用了优化，在极短时间内先进行自旋，如果没有获得锁再将线程挂起，因此采用互斥锁往往是比较优先的选择，这也是后话了...

第二个问题我也并不是十分理解，难道是出于移植性的考虑么？既然看到这了，那么顺藤摸瓜看看在用户空间的自旋锁是如何实现的：

<pre class="lang:c++ decode:true " ># spinlock.h

#ifndef _SPINLOCK_H_
#define _SPINLOCK_H_

#include "atomic.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Compile read-write barrier */
#define barrier() asm volatile("": : :"memory")
 
/* Pause instruction to prevent excess processor bus usage */ 
#define cpu_relax() asm volatile("pause\n": : :"memory")

static inline void 
spin_lock(volatile int *lock)
{
    while (1)
    {
        int i = 0;
        if (!atomic_swap(lock, EBUSY)) return;
        while (*lock) {
            i++;
            if (i == 4000) {
                i = 0;
                sched_yield();
            }
            cpu_relax();
        }
    }
}

static inline void
spin_unlock(volatile int *lock)
{
    barrier();
    *lock = 0;
}
#ifdef __cplusplus
}
#endif

#endif</pre>

static inline、内存屏障、原子操作...似乎有种回到了Linux内核代码的感觉，内存屏障是为了避免CPU对指令进行多线程不安全的重排（见<a href="https://en.wikipedia.org/wiki/Memory_barrier" title="内存屏障" target="_blank">这里</a>），而原子操作则是为了保证获得锁操作的原子性，如果没有这个保证，我们自旋锁的实现就变得没有意义了。除去这些特殊的技巧，代码本身的运行逻辑简单直接:不断循环直到获得锁。并且为了减少对CPU时间的浪费，每运行一段时间后都要调用sched_yield()来主动让出CPU。

到这还不算完，自旋锁中的原子操作居然也是自己实现的...难道真是为了可移植性么？

<pre class="lang:c++ decode:true " >static inline int       // return old value
atomic_swap(volatile void *lockword, int value)
{
    __asm__ __volatile__(
        "xchg %0, (%1);"
        : "=a"(value)
        : "r"(lockword), "a"(value)
        : "memory"
        );
    return value;
}</pre>

这一段代码实际上就是一条嵌入式汇编指令，调用了xchg指令，我对指令集的了解还仅仅停留在《深入理解计算机系统》里面讲的一些粗浅的入门知识，不能胡乱分析，待以后学习深入了再回来补上。

<hr />

学艺不精，随便看看别人的代码就各种惊叹。
痛改前非，准备好好复习+学习下C++，感觉自己弱弱哒！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date><![CDATA[2014-10-06 21:05:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-06 13:05:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c%e4%b8%ad%e5%ae%9e%e7%8e%b0%e5%a4%9a%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e5%8d%95%e4%bd%93%e7%b1%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052659]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>365</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.kongfy.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:250:5002:398d:fa:ccf:b498:54a6]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-10-08 10:17:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-10-08 02:17:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用的挺多的，就是看到这个多线程安全的实现感觉很屌，代码还是厂里lsd写的...
IsCreated()这个相当于是读写者问题，没有读写锁用自旋锁解决还是锁上好一点，可以保证在写入的时候不会被读出无效值，用读写锁来解决应该是更好的解决方法。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>354</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229246]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229248]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>354</wp:comment_id>
			<wp:comment_author><![CDATA[胡萝卜]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[36.36.208.17]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-10-07 01:45:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-10-06 17:45:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1. IsCreated() 这个函数应该是可以不用加锁的吧，加锁只是为了保持代码的一致性？.. 
2. 看C/C++里面嵌入的汇编代码很捉急+1. ;-)
3. Singleton 这种模式用的还是很广，熟悉一些现用的案例很有用的，比如spring框架就用了这个中，我被问道过，当时傻了......]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229246]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1283</wp:comment_id>
			<wp:comment_author><![CDATA[panda]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ipandayu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.172.67.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-06-29 10:56:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-06-29 02:56:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个单例仍然是有问题的，临界区内的创建运行时乱序没有考虑到]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3965776892]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1284</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[35.201.167.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-06-29 14:37:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-06-29 06:37:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[具体什么样的乱序？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1283</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3965776892]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3965920922]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Machine Learning小结(1)：线性回归、逻辑回归和神经网络</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/</link>
		<pubDate>Mon, 10 Nov 2014 01:11:45 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=447</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_459" align="aligncenter" width="500"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/CE58CE85-71A0-493C-ACCA-4EBEAE917603.jpg"><img class="size-full wp-image-459" src="http://blog.kongfy.com/wp-content/uploads/2014/11/CE58CE85-71A0-493C-ACCA-4EBEAE917603.jpg" alt="machine learning" width="500" height="640" /></a> Coursera上machine learning课程的图标[/caption]

跟风学习<a title="Coursera" href="http://www.coursera.org" target="_blank">Coursera</a>上<a title="Andrew Ng" href="http://www-cs-faculty.stanford.edu/people/ang/" target="_blank">Andrew Ng</a>叔的数据挖掘课程已经一个多月了，刚开始在Coursera上看到这门课的时候还有些犹豫，因为研一的时候已经修过学校的数据挖掘课了，那为什么还要再学习这个课程呢？现在想想真是庆幸自己还是选择听听看，原因如下：
<ol>
	<li>一年没用数据挖掘，好多知识都忘记了，正好当做复习</li>
	<li>Ng确实很厉害，把看上去非常复杂的理论讲得十分简单清楚，这一定是对问题的本质有很深的理解才能做到的</li>
	<li>lamda的课也是很有水平的，翻翻收藏的ppt，理论功底不可谓不深，但我学艺不精，除去实验外还是不明白在实践中该如何去使用这些工具，Ng的课恰好在这方面是个很好的补充</li>
</ol>
写到这都和一篇广告软文似的，还是赶紧进入正题吧，趁着脑袋里东西还热乎，赶紧总结一下。PS：本文绝非教程类的文章，而是给自己写的Tips，一则作为学习的记录，二则为以后回忆时方便。如果对这些内容感兴趣，强烈建议直接在Coursera上学习该课程。

<!--more-->

<hr />

<h2>线性回归（Linear regression）</h2>
<h3>符号表示</h3>
<ul>
	<li>训练集：$latex x$，其中$latex x^{(i)}$为第$latex i$个训练样本，$latex x_j^{(i)}$代表该样本的第$latex j$个属性；$latex y^{(i)}$表示其对应的正确的回归值</li>
</ul>
<h3>算法概要</h3>
[caption id="attachment_489" align="aligncenter" width="632"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/C090DAA6-96C6-4517-A650-F4D4EBA4A045.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/C090DAA6-96C6-4517-A650-F4D4EBA4A045.jpg" alt="Linear Regression" width="632" height="474" class="size-full wp-image-489" /></a> Linear Regression[/caption]

线性回归是一种基本的回归算法，当给出相应的训练集后，通过线性回归来寻找合适参数$latex \theta$（向量）使得Hypothesis函数的Cost function最小：

<center>[latex]\displaystyle Hypothesis: h_\theta(x)=\theta^{T}x=\theta_0x_0+\cdots+\theta_nx_n[/latex]</center>

<center>[latex] \displaystyle Cost\ function: J(\theta)=\frac{1}{2m}\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})^2[/latex]</center>

Cost function所表示的是对应参数$latex \theta$刻画的Hypothesis函数与真实数据的距离，最小化这个距离可以使我们的模型和真实值更加接近。同时，通过增加高次项特征，我们可以使模型更加复杂。

[caption id="attachment_492" align="aligncenter" width="629"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/D32D48BB-8141-4051-A1DB-4465C9054A91.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/D32D48BB-8141-4051-A1DB-4465C9054A91.jpg" alt="Polynomial regression" width="629" height="471" class="size-full wp-image-492" /></a> Polynomial regression[/caption]

<h3>梯度下降（Gradient descent)</h3>
有很多方法可以实现最小化Cost function，梯度下降是其中最为简单直接的一种。
<center>[latex] \displaystyle
\begin{aligned}
&Repeat\ \{\\
&\qquad\theta_j=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta)\\
&\qquad(simultaneously\ update\ for\  every\ j=0,\ldots,n)\\
&\}
\end{aligned}
[/latex]</center>

可以看到，梯度下降的思想非常的简单：每次迭代中向梯度最大的方向按照learning rate$latex \alpha$下降，直到到达整个函数的局部/全局最优点，Ng的slides中的示意图很好的表示了这个思想：

[caption id="attachment_512" align="aligncenter" width="1067"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/1A7706DD-2E06-4371-924B-DCD1D4EBB381.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/1A7706DD-2E06-4371-924B-DCD1D4EBB381.jpg" alt="Gradient descent" width="1067" height="556" class="size-full wp-image-512" /></a> Gradient descent[/caption]

通过不断的调整参数，使其不断的朝着Cost function下降的方向改变，最终达到一个最小点。在线性回归中，由于Cost function没有局部最优解，所以梯度下降一定会得到全局最优解。

[caption id="attachment_514" align="aligncenter" width="620"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/E4D41A4C-F48E-47EF-B9AE-27B29CCA51C8.jpg" alt="Gradient descent in linear regression" width="620" height="462" class="size-full wp-image-514" /></a> Gradient descent in linear regression[/caption]

梯度下降并不是唯一的降低Cost function的方法，还有更多更加高级的解法可以达到相同的效果，在之后的project中Ng更多的使用fminunc而非梯度下降来获得更好的实现效率。
<h3>特征缩放（Feature scaling）</h3>
当多个特征的取值范围不同并且相差很大时，会给梯度下降带来不小的麻烦，梯度下降过程会变得非常的缓慢，因此在多个特征取值范围相差较大时，我们首先应该对这些特征进行缩放以确保他们具有相同的取值范围。

[caption id="attachment_517" align="aligncenter" width="1209"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/CF26D801-A17F-4CF8-892C-7A128BDEAD10.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/CF26D801-A17F-4CF8-892C-7A128BDEAD10.jpg" alt="Feature scaling" width="1209" height="574" class="size-full wp-image-517" /></a> Feature scaling[/caption]

<hr />
<h2>逻辑回归（Logistic regression）</h2>
在线性回归的基础上解释逻辑回归非常的简单。逻辑回归和名字所暗示的不同，逻辑回归是一个分类算法！首先讨论二分类的情况，即判断样本$latex x$是否属于正类型。

逻辑回归的Hypothesis和线性回归非常相似
<center>[latex] \displaystyle
\begin{aligned}
h_\theta(x)=&g(\theta^{T}x)\\
g(z)=&\frac{1}{1+e^{-z}}
\end{aligned}
[/latex]</center>

唯一的区别在于外层的sigmoid function，详情戳<a href="http://en.wikipedia.org/wiki/Sigmoid_function" title="Sigmoid function" target="_blank">这里</a>。

[caption id="attachment_522" align="aligncenter" width="569"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/5B807B59-5930-47C7-8341-27D524ABBA1B.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/5B807B59-5930-47C7-8341-27D524ABBA1B.jpg" alt="Sigmoid function" width="569" height="396" class="size-full wp-image-522" /></a> Sigmoid function[/caption]

简单来说，当参数大于0时，则函数值趋近于1，而当参数值小于0时，函数值趋近于0。因此逻辑回归的Hypothesis可以解释为样本$latex x$属于正类型的概率。当$latex \theta^{T}x>0$后，概率趋近于1，反之则趋近于0。由此得到Cost function如下：

<center>[latex] \displaystyle J(\theta)=-\frac{1}{m}\left[\sum_{i=1}^{m}y^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log (1-h_\theta(x^{(i)}))\right][/latex]</center>

Cost function看上去复杂，实际上如果仔细分析，其实函数表示的意义非常简单：当预测的概率越接近真实情况，代价函数越接近0，反之则趋近于无穷大。

之后可以和线性回归一样，采用梯度下降或其他方法来寻找合适的参数$latex \theta$使Cost function最小化，得到训练后的模型。

[caption id="attachment_533" align="aligncenter" width="629"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/291F8223-4629-4D43-BDE3-CEF9E3E786D3.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/291F8223-4629-4D43-BDE3-CEF9E3E786D3.jpg" alt="Logistic regression" width="629" height="472" class="size-full wp-image-533" /></a> Logistic regression[/caption]

<h3>One-vs-all</h3>
在二分类的基础上，通过one-vs-all的方法得到多类别的分类器。one-vs-all的基本思想是为每一个类$latex i$都训练一个二分类分类器$latex h_\theta^{(i)}(x)$，当分类预测时选择概率最大的类别作为结果。
<center>[latex] \displaystyle \max _i h_\theta^{(i)}(x)[/latex]</center>

[caption id="attachment_539" align="aligncenter" width="1227"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/C36E2BAD-B94E-4736-A88B-713E41523470.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/C36E2BAD-B94E-4736-A88B-713E41523470.jpg" alt="One-vs-all" width="1227" height="710" class="size-full wp-image-539" /></a> One-vs-all[/caption]

<hr />
<h2>Bias、Variance以及Regularization</h2>
接下来需要讨论一个前面一直避而不谈的问题：Bias和Variance。这两个词意思都不是很直白，简单来说，high Bias的含义就是模型太过于简单，不能很好对训练集进行学习，属于under-fitting；而high Variance则相反，代表了模型太过于复杂，甚至拟合了训练集中的噪声，属于over-fitting，虽然training error很低但是泛化误差大，会有很高的test error。

[caption id="attachment_547" align="aligncenter" width="622"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/C24570FC-0A66-4F28-BAD5-C70BB71F24D0.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/C24570FC-0A66-4F28-BAD5-C70BB71F24D0.jpg" alt="Bias vs Variance" width="622" height="404" class="size-full wp-image-547" /></a> Bias vs Variance[/caption]

如上图所示，当模型非常简单时，训练误差和验证误差都很大，说明模型under-fitting（high Bias），随着模型越来越复杂（次数越来越高），对训练集的学习越来越到位，训练误差和验证误差都逐渐减小，然而在超过某一程度后，模型过于复杂，出现了over-fitting（high Variance），验证误差开始增大。

Regularization正是为了让我们在模型的复杂性和泛化能力之间做出一个平衡。通过在Cost function后增加一个Regularization项来避免训练出过于复杂的模型，线性回归Regularization之后的Cost function如下：

<center>[latex]\displaystyle
J(\theta)=\frac{1}{2m}\left[\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_j^2\right]
[/latex]</center>

逻辑回归Regularization之后的Cost function如下：

<center>[latex] \displaystyle 
\begin{aligned}
J(\theta)=&-\frac{1}{m}\left[\sum_{i=1}^{m}y^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log (1-h_\theta(x^{(i)}))\right]\\
&+\frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2
\end{aligned}
[/latex]</center>

Regularization parameter的作用相当于对每一个参数增加了惩罚，以避免模型变得过于复杂，另外注意对常数参数$latex \theta_0$不做Regularization。

总的来说，Ng所建议的数据挖掘实践是首先写出一个最为简单粗糙的模型，然后根据模型的learning curve，观察模型处于high Bias还是high Variance状态，然后做出对模型进行改进的决策，如果模型处于high Bias，我们可以：
<ul>
	<li>增加更多特征</li>
	<li>减小$latex \lambda$</li>
</ul>
而如果模型处于high Variance中，我们可以：
<ul>
	<li>收集更多的训练数据集</li>
	<li>减少特征</li>
	<li>增大$latex \lambda$</li>
</ul>
<hr />
<h2>神经网络（Neural network）</h2>
终于写到了神经网络，窃以为Ng之所以要讲线性回归和逻辑回归完全是为了讲他最爱的神经网络...如Ng所说，神经网络是现在“most powerful”的学习算法，可以学习非常非常复杂的模型。
<h3>神经元</h3>
[caption id="attachment_559" align="aligncenter" width="1201"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/C8DC0939-2233-469B-86B5-DD7779D6BCBF.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/C8DC0939-2233-469B-86B5-DD7779D6BCBF.jpg" alt="Neuron model" width="1201" height="474" class="size-full wp-image-559" /></a> Neuron model[/caption]

每次学习神经网络总是在第一步看到神经元的地方就愣住了，“这是啥...为啥要这么做...这能训练出啥...”，当在Ng课上再次看到这个神经元模型，终于恍然大悟，这货不就是个逻辑回归么！！！输入为$latex x$，神经元的输入边权构成参数$latex \theta$，激活函数sigmoid函数...和逻辑回归的Hypothesis一样样的...

<center>[latex] \displaystyle
\begin{aligned}
h_\theta(x)=&g(\theta^{T}x)\\
g(z)=&\frac{1}{1+e^{-z}}
\end{aligned}
[/latex]</center>

<h3>神经网络</h3>
[caption id="attachment_561" align="aligncenter" width="1080"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/6657A266-DF61-4F08-937D-6B08528D94A7.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/6657A266-DF61-4F08-937D-6B08528D94A7.jpg" alt="Neural network" width="1080" height="676" class="size-full wp-image-561" /></a> Neural network[/caption]

于是神经网络似乎也就不是那么难以理解了，神经网络的第一层是输入层，值为$latex x_i$，最后一层是输出层，如果作为分类算法训练则有多少个类别就应该有多少个对应的输出单元，对应的输出单元被激活代表着分类的结果。有意思的事情发生在中间的隐藏层，隐藏层可以有多层，每层可以有多个单元，规模越大训练的模型越复杂。而对于隐藏层中的每个单元本身都是一个逻辑回归的过程，也就是说每个隐藏单元都训练出了一个比前一层更加复杂的特征，这样一层接一层我们就可以训练出越来越复杂的特征，直到得到结果。
<h3>前向传播</h3>
在已经训练好权值的神经网络上，预测的工作是通过前向传播来实现的，所谓的“前向”就是从输入层到输出层的方向。整个传播过程就是沿着神经网络的方向在每个神经元上做逻辑回归，不断训练出更加复杂的特征，最后得到输出。以上图的神经网络为例：
<center>[latex] \displaystyle 
\begin{aligned}
z^{(2)}=&\Theta^{(1)}a^{(1)}\\
a^{(2)}=&g(z^{(2)})\\
Add\ a_0^{(2)}=&1\\
z^{(3)}=&\Theta^{(2)}a^{(2)}\\
h_\Theta(x)=&a^{(3)}=g(z^{(3)})
\end{aligned}
[/latex]</center>

其中$latex z^{(i)}$表示第$latex i$层神经元的输入，$latex a^{(i)}$表示第$latex i$层神经元的输出，$latex \Theta^{(i)}$表示第$latex i$层神经元输入边的权值。
<h3>后向传播</h3>
虽然神经网络比逻辑回归要复杂的多，但训练的基本思路还是相同的，即修改参数$latex \Theta$来获得最小的Cost function。那么首先来看看神经网络的Cost function:
<center>[latex] \displaystyle 
\begin{aligned}
J(\Theta)=&-\frac{1}{m}\left[\sum_{i=1}^{m}\sum_{k=1}^{K}y_k^{(i)}\log (h_\Theta(x^{(i)}))_k+(1-y_k^{(i)})\log (1-(h_\Theta(x^{(i)}))_k)\right]\\
&+\frac{\lambda}{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{s_l}\sum_{j=1}^{s_{l+1}}(\Theta_{ji}^{(l)})^2
\end{aligned}
[/latex]</center>

看上去是不是复杂到爆表...别着急，对应逻辑回归的Cost function，神经网络的版本只是把$latex K$个类的代价加起来了而已，后面的Regularization项也只是针对神经网络的特点对$latex \Theta$中每一项进行了惩罚。

那么接下来该如何最小化Cost function呢？还是梯度下降的老办法，不过在神经网络的训练中$latex \frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)$就不像前面两种算法中那么容易求了。后向传播就是为了解决这个问题而提出的。后向传播的基本思想是对每一个训练样本，根据这个样本的预测结果误差从后向前的计算出这次预测中每个神经元的误差，$latex \delta_j^{(l)}$表示第$latex l$层上$latex j$神经元的误差，还是以上图中神经网络为例，我们可以后向求出整个神经网络中所有神经元的误差：
<center>[latex] \displaystyle 
\begin{aligned}
\delta^{(4)}=&a^{(4)}-y\\
\delta^{(3)}=&(\Theta^{(3)})^{T}\delta^{(4)}.*g'(z^{(3)})\\
\delta^{(2)}=&(\Theta^{(2)})^{T}\delta^{(3)}.*g'(z^{(2)})
\end{aligned}
[/latex]</center>

整体的后向传播算法就是对每一个训练样本执行上面的过程，并不断积累$latex a_j^{(l)}\delta_i^{(l+1)}$（略过复杂的数学证明）如下：

[caption id="attachment_586" align="aligncenter" width="1211"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/53C728D0-9321-4ACD-8D6F-920FCB720AD8.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/53C728D0-9321-4ACD-8D6F-920FCB720AD8.jpg" alt="Backpropagation" width="1211" height="693" class="size-full wp-image-586" /></a> Backpropagation[/caption]

最后的等式$latex \frac{\partial}{\partial{\Theta_{ij}^{(l)}}}J(\Theta)=D_{ij}^{(l)}$涉及到复杂的数学证明，Ng也没有详细解释。总之通过一通计算我们得到了想要的$latex \frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)$，然后使用梯度下降或是更高级的算法来对Cost function进行最小化，这里特别注意虽然神经网络中Cost function并不是convex函数，即存在局部最优解，但Ng说这不碍事，通常即使是局部最优解也会得到相当不错的效果。
PS.后向传播算法的原理相当复杂，我是没能力讲清楚了...请参见Ng的课程吧。
<h3>随机初始化</h3>
在神经网络中训练初始化时，要特别注意不能使$latex \Theta$中的值都相同，这样会使每一层的神经元都训练出完全相同的特征，神经网络就完全无法工作了。因此，在训练开始前，应该对$latex \Theta$进行随机的初始化。
<h3>举个栗子</h3>
Ng课程的编程作业中给出了一个蛮好玩的例子：识别手写数字。

[caption id="attachment_592" align="aligncenter" width="420"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/9888D333-93C6-4833-A31D-7C6DD63EDDCF.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/9888D333-93C6-4833-A31D-7C6DD63EDDCF.jpg" alt="numbers" width="420" height="420" class="size-full wp-image-592" /></a> numbers[/caption]

数字识别过程首先将20*20的数字图片转换为400维的灰度向量输入神经网络，使用下面结构的神经网络进行训练，输入层有401个节点（包括1个Bias节点），隐藏层包含25个神经元，输出层有10个神经元对应10个数字类别，最终获得了非常赞的效果~

[caption id="attachment_594" align="aligncenter" width="535"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/823006AE-89BD-477B-835F-DAA7B8D9EC14.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/823006AE-89BD-477B-835F-DAA7B8D9EC14.jpg" alt="Neural network model" width="535" height="321" class="size-full wp-image-594" /></a> Neural network model[/caption]

下图对训练好的隐藏层25个神经元参数进行了可视化，可以看到每个神经元都训练出了一个更加复杂的特征，神经网络就是通过不断训练出这些比原始灰度特征更加复杂的特征才能得到如此优秀的效果。

[caption id="attachment_595" align="aligncenter" width="420"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/99BA29D7-B7AE-4628-A926-ADE03298FFCC.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/99BA29D7-B7AE-4628-A926-ADE03298FFCC.jpg" alt="Hidden layer" width="420" height="420" class="size-full wp-image-595" /></a> Hidden layer[/caption]

<hr />
<h2>参考资料</h2>
<ul>
	<li>Machine Learning by Andrew Ng on Coursera</li>
</ul>
<hr />
<h2>啰嗦两句</h2>
感谢Coursera，感谢MOOC让我们能享受到这么高质量的课程。我要努力成为一个终身学习者！！！
感谢院士提供$latex \LaTeX$语法支持。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date><![CDATA[2014-11-10 09:11:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-10 01:11:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning%e5%b0%8f%e7%bb%931%ef%bc%9a%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92%e3%80%81%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92%e5%92%8c%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d"><![CDATA[梯度下降]]></category>
		<category domain="post_tag" nicename="%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c"><![CDATA[神经网络]]></category>
		<category domain="post_tag" nicename="%e7%ba%bf%e6%80%a7%e5%9b%9e%e5%bd%92"><![CDATA[线性回归]]></category>
		<category domain="post_tag" nicename="%e9%80%bb%e8%be%91%e5%9b%9e%e5%bd%92"><![CDATA[逻辑回归]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052639]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>607</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.98.63.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-10 13:24:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-10 05:24:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这篇图太多了.............公式不用图片表示，还真是个问题。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229230]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>608</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.kongfy.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.94.142.57]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-10 15:21:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-10 07:21:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[公式都是LaTeX写的，不过wp的插件转换成图片了。也可以用其他的方法解释，懒得弄了...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>607</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229230]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229309]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1234</wp:comment_id>
			<wp:comment_author><![CDATA[QuinWu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wukuan1995@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.88.46.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-15 16:12:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-15 08:12:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[求lambda课程的ppt]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3306305878]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>广告慎入</title>
		<link>http://blog.kongfy.com/2014/11/%e5%b9%bf%e5%91%8a%e6%85%8e%e5%85%a5/</link>
		<pubDate>Sun, 09 Nov 2014 15:23:24 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[<center>这真的只是一篇广告...</center>
<!--more-->
Github真乃业界良心，不仅可以使用edu邮箱认证获得免费两年的micro plan，最近还联合了很多知名网站一起向学生提供Student Pack，其中就包括最近很火的IaaS提供商DigitalOcean。

[caption id="attachment_571" align="aligncenter" width="600"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/logo-digitalocean-1ef0424a297748e3bf744992c123db7b.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/logo-digitalocean-1ef0424a297748e3bf744992c123db7b.jpg" alt="DigitalOcean" width="600" height="200" class="size-full wp-image-571" /></a> DigitalOcean[/caption]

Student Pack中包含了$100的优惠码，感觉不用白不用啊，就把我的Blog迁移到DigitalOcean的主机上了，目前自我感觉良好，哈哈

DigitalOcean和之前使用的VPS最大的不同在于提供的服务更加的灵活，可以自助的创建虚拟机，并且支持进行Resize、Snapshots等操作，而不仅仅是提供一台固定的VPS，有些IaaS的意思了。

而且DigitalOcean的主机性能真是不错，虽然我只创建了一个$5/mo的小机器....

网络测试，下载一个Linux内核源码56.6MB/s，G口无疑
<code lang="bash">
[kongfy@kongfy-vps ~]$ wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.17.2.tar.xz
--2014-11-12 11:02:11--  https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.17.2.tar.xz
正在解析主机 www.kernel.org... 198.145.20.140, 149.20.4.69, 199.204.44.194, ...
正在连接 www.kernel.org|198.145.20.140|:443... 已连接。
已发出 HTTP 请求，正在等待回应... 200 OK
长度：80331268 (77M) [application/x-xz]
正在保存至: “linux-3.17.2.tar.xz”

100%[=====================================================================================================>] 80,331,268  56.6M/s   in 1.4s

2014-11-12 11:02:13 (56.6 MB/s) - 已保存 “linux-3.17.2.tar.xz” [80331268/80331268])
</code>

I/O测试，写入速度467MB/s，读取速度921MB/s，SSD无疑
<code lang="bash">
[kongfy@kongfy-vps ~]$ dd if=/dev/zero bs=4096 count=250000 of=file_1GB
记录了250000+0 的读入
记录了250000+0 的写出
1024000000字节(1.0 GB)已复制，2.19336 秒，467 MB/秒

[kongfy@kongfy-vps ~]$ dd if=file_1GB of=/dev/null bs=4096
记录了250000+0 的读入
记录了250000+0 的写出
1024000000字节(1.0 GB)已复制，1.11215 秒，921 MB/秒
</code>

<h2>心动不如行动！</h2>你可以通过我的<strong><a href="https://www.digitalocean.com/?refcode=12b0d4e80ee5" title="digitalocean" target="_blank">推广链接</a></strong>注册，可以获得$10的credits，我也可以因此获益，大家好才是真的好！

<hr />
PS. I/O测试有内核的缓冲，数据有水分，不过都说了是广告，切勿当真~]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>569</wp:post_id>
		<wp:post_date><![CDATA[2014-11-09 23:23:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-09 15:23:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b9%bf%e5%91%8a%e6%85%8e%e5%85%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[杂七杂八]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752164230]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twisted和Reactor模式</title>
		<link>http://blog.kongfy.com/2014/11/twisted%e5%92%8creactor%e6%a8%a1%e5%bc%8f/</link>
		<pubDate>Sun, 30 Nov 2014 15:30:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=609</guid>
		<description></description>
		<content:encoded><![CDATA[因为项目关系，接触学习了大名鼎鼎的Python网络编程框架Twised，Twisted是以高性能为目标的异步（event-driven）网络编程框架。

[caption id="attachment_817" align="aligncenter" width="379"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/518wm5u3TjL.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/518wm5u3TjL.jpg" alt="Twisted book" width="379" height="500" class="size-full wp-image-817" /></a> Twisted book[/caption]

图中是Twisted官方推荐的学习书籍的封面，我觉得封面设计的非常贴切：Twisted就是很多Python（蟒蛇）纠缠在一起。

很多人说Twisted太复杂了，不易于使用，而我<strong>并不这么认为</strong>。虽然代码流程和朴素的代码流程大相径庭，但复杂性源自于异步编程的思想，而Twisted通过优秀的封装已经极大了减轻了我们的工作量。如果你之前没有接触过异步编程模型，我认为从Twisted入手不失为一个很好的选择。

学习Twisted的最好方式就是阅读Twisted的<a href="http://twistedmatrix.com/documents/current/core/howto/index.html" target="_blank">最新官方指南</a>，有详尽的解释和代码示例，网络上其他的教程都是浪费时间（包括本文，前提是如果本文算得上是教程的话...）。

<!--more-->

<hr />
<h2>什么是异步？</h2>
异步编程模型在追求性能的服务器编程中大行其道，但异步编程并不等于高性能。下文中以I/O为例尝试分析异步的行为，但实际上异步的思想无处不在：信号、文件系统等等都是异步运行的例子。

异步编程为什么可以带来性能的提高？答案在于I/O。大体上我们可以把程序运行所消耗的时间分为两部分：占用CPU进行计算的时间和等待I/O操作完成的时间。同步和异步模型在前一种场景中的行为是相同的，区别在于后者，当用户进程执行I/O操作时，基于同步模型的程序被系统调用阻塞（内核态，操作系统执行进程切换），直到I/O操作完成，驱动程序通知内核，用户进程得以从内核态返回；而基于异步模型的用户进程执行非阻塞的I/O系统调用，直接从内核态返回，但这时I/O的数据并没有准备好，用户进程可以继续进行其他的计算工作，当I/O数据准备好时，用户进程通过异步通知（aio或I/O多路复用）的机制获取数据执行数据处理操作。

因此，异步编程利用等待I/O的时间去做其他的工作，更加充分的利用了CPU资源，有得必有失，使用异步编程模型意味着你需要把原本连续的流程切分为多个不被阻塞的小代码块，然后以一种非常反人类的逻辑流程编写代码来换取计算机执行的高性能。

顺便一提，另外一种常用的性能优化模型：多线程/多进程模型经常被拿来和异步模型做对比，实际上两者并不是一个概念。多线程/多进程模型使得程序可以更加有效的利用多核的优势，和同步、异步模型并不冲突。我们可以在使用多线程/多进程模型的基础上同时使用异步模型进行I/O：Nginx就是通过多进程+基于epoll的I/O多路复用才达到了如此优秀的性能。

<hr />
<h2>Reactor模式</h2>
在大量的实践中，似乎我们总是通过类似的方式来使用异步编程：
<ol>
	<li>监听事件</li>
	<li>事件发生执行对应的回调函数</li>
	<li>回调完成（可能产生新的事件添加进监听队列）</li>
	<li>回到1，监听事件</li>
</ol>

因此我们将这样的异步模式称为Reactor模式，例如在iOS开发中的Run Loop概念，实际上非常类似于Reactor loop，主线程的Run Loop监听屏幕UI事件，一旦发生UI事件则执行对应的事件处理代码，还可以通过GCD等方式产生事件至主线程执行。

[caption id="attachment_825" align="aligncenter" width="524"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/event_model.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/event_model.png" alt="Event model" width="524" height="364" class="size-full wp-image-825" /></a> Event model[/caption]

上图是<a href="http://www.boost.org" title="boost" target="_blank">Boost</a>对Reactor模式的描绘，Twisted的设计就是基于这样的Reactor模式，Twisted程序就是在等待事件、处理事件的过程中不断循环。

<code lang="python">
from twisted.internet import reactor
reactor.run()
</code>

reactor是Twisted程序中的单例对象。

<hr />
<h2>Twisted中的Factory和Protocol</h2>
有了Twisted的Reactor之后，我们只需要编写对应事件的事件处理过程即可。Twisted网络框架中通过Factory和Protocol对事件处理过程进行了抽象。

Factory如名字所暗示的，是抽象工厂。在Twisted中把一个工厂对象绑定到特定的端口中，当连接到来，Twisted使用该工厂创建工厂指定的Protocol对象，Protocol对象表明了连接的处理流程（协议），每个Protocol对象按照预定的协议处理连接，当连接关闭后销毁。

[caption id="attachment_829" align="aligncenter" width="474"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/protocols-1.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/protocols-1.png" alt="Factory and Protocol" width="474" height="352" class="size-full wp-image-829" /></a> Factory and Protocol[/caption]

因为Protocol仅处理一条连接，所以一些全局持久保存的数据都存储在Factory中，每个Protocol对象中都有一个指向创建自己的Factory对象的成员变量factory。

下面是官网指南中一个简单的例子，可以清楚的看到Factory和Protocol的关系。Protocol实例的transport成员变量表示对应的网络连接。

<code lang="python">
# Read username, output from non-empty factory, drop connections

from twisted.internet import protocol, reactor
from twisted.protocols import basic

class FingerProtocol(basic.LineReceiver):
    def lineReceived(self, user):
        self.transport.write(self.factory.getUser(user)+"\r\n")
        self.transport.loseConnection()

class FingerFactory(protocol.ServerFactory):
    protocol = FingerProtocol

    def __init__(self, **kwargs):
        self.users = kwargs

    def getUser(self, user):
        return self.users.get(user, "No such user")

reactor.listenTCP(1079, FingerFactory(moshez='Happy and well'))
reactor.run()
</code>

<hr />
<h2>神奇的Deferred</h2>
Deferred是Twisted对Callback的实现方式，Deferred非常灵活，代表了“推迟”。下面的例子展示了Deferred对象的基本用法：

<code lang="python">
from twisted.internet.defer import Deferred
 
def got_poem(res):
    print 'Your poem is served:'
    print res
 
def poem_failed(err):
    print 'No poetry for you.'
 
d = Deferred()
 
# add a callback/errback pair to the chain
d.addCallbacks(got_poem, poem_failed)
 
# fire the chain with a normal result
d.callback('This poem is short.')
 
print "Finished"
</code>

<ol>
	<li>创建Deferred对象</li>
	<li>将callback和errback函数添加到Deferred对象上</li>
	<li>在Deferred对象上执行回调</li>
</ol>

当我们想执行一个异步操作时，我们可以使用Deferred来代替数据立即返回。Deferred的含义是：你想要的数据还没有到，不过你可以告诉我你接下来想要执行的操作，当我得到数据以后会调用你想要执行的函数。

[caption id="attachment_834" align="aligncenter" width="240"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/deferred-process.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/deferred-process.png" alt="Deferred process" width="240" height="382" class="size-full wp-image-834" /></a> Deferred process[/caption]

如上图，我们把想要的回调函数添加到Deferred对象上，当数据准备好后会按我们设置好的回调函数链一层一层的进行回调。

回调函数链分为两条：正常回调链和错误回调链，方便我们进行错误处理。当然Deferred的强大之处远不止于此，还有包括DeferredList在内的很多有用的特性，按照你的使用方式不同，Deferred可以非常简单也可以极为复杂。这些东西作为Twisted初学者就不班门弄斧了。

<hr />
<h2>twistd</h2>
很多时候我们编写网络程序都需要程序可以作为<a href="http://en.wikipedia.org/wiki/Daemon_(computing)" title="守护进程" target="_blank">守护进程</a>运行，在UNIX环境中这需要做2次fork的魔法（见APUE第13章），twist（注意，比Twisted少了一个字母e）为我们跨平台的封装了这一过程，通过编写Twisted Application Configuration文件（.tac）指定所运行的application，就可以通过twistd命令运行守护进程了！

<code lang="shell">
root% twistd -ny finger11.tac # just like before
root% twistd -y finger11.tac # daemonize, keep pid in twistd.pid
root% twistd -y finger11.tac --pidfile=finger.pid
root% twistd -y finger11.tac --rundir=/
root% twistd -y finger11.tac --chroot=/var
root% twistd -y finger11.tac -l /var/log/finger.log
root% twistd -y finger11.tac --syslog # just log to syslog
root% twistd -y finger11.tac --syslog --prefix=twistedfinger # use given prefix
</code>

<code lang="python">
# Read username, output from non-empty factory, drop connections
# Use deferreds, to minimize synchronicity assumptions
# Write application. Save in 'finger.tpy'

from twisted.application import internet, service
from twisted.internet import protocol, reactor, defer
from twisted.protocols import basic

class FingerProtocol(basic.LineReceiver):
    def lineReceived(self, user):
        d = self.factory.getUser(user)

        def onError(err):
            return 'Internal error in server'
        d.addErrback(onError)

        def writeResponse(message):
            self.transport.write(message + '\r\n')
            self.transport.loseConnection()
        d.addCallback(writeResponse)

class FingerFactory(protocol.ServerFactory):
    protocol = FingerProtocol

    def __init__(self, **kwargs):
        self.users = kwargs

    def getUser(self, user):
        return defer.succeed(self.users.get(user, "No such user"))

application = service.Application('finger', uid=1, gid=1)
factory = FingerFactory(moshez='Happy and well')
internet.TCPServer(79, factory).setServiceParent(
    service.IServiceCollection(application))
</code>

<hr />
<h2>更多工具</h2>
除了这些优秀的特性，Twisted还为我们封装了大部分常用操作的非阻塞实现，如数据库查询（使用了线程池实现）、子进程、RPC等有力的工具。例子和文档都详细的列在官方文档中，我就不再继续搬运了。

<hr />
<h2>参考资料</h2>
<ul>
	<li><a href="http://twistedmatrix.com/documents/current/core/howto/index.html" title="Twisted" target="_blank">Twisted官方指南</a></li>
	<li><a href="http://krondo.com/?page_id=1327" title="Twisted introduction" target="_blank">Twisted introduction</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>609</wp:post_id>
		<wp:post_date><![CDATA[2014-11-30 23:30:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-30 15:30:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twisted%e5%92%8creactor%e6%a8%a1%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python-2"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="twisted"><![CDATA[Twisted]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[Twisted]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052610]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>665</wp:comment_id>
			<wp:comment_author><![CDATA[胡萝卜]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[36.36.208.17]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-12-01 22:23:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-12-01 14:23:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[虽然我还没看这个框架.........]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229218]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Linux内核同步</title>
		<link>http://blog.kongfy.com/2014/11/linux%e5%86%85%e6%a0%b8%e5%90%8c%e6%ad%a5/</link>
		<pubDate>Thu, 13 Nov 2014 09:44:36 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=613</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_616" align="aligncenter" width="448"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/data-protection.jpg"><img class="size-full wp-image-616" src="http://blog.kongfy.com/wp-content/uploads/2014/11/data-protection.jpg" alt="Data protection" width="448" height="316" /></a> Data protection[/caption]

Linux内核中有很多同步机制，这篇文章主要总结一下在《Linux Kernel Development》看到的部分内核同步机制，依旧是备忘。

内核同步机制和用户空间的同步机制并不是一一对应的，但是基本的思想都是相同的：保护临界区，只是内核同步机制更适合于在解决内核中的同步问题。先思考下自己的Nanos内核中使用了什么同步机制？Nanos中使用了关中断和信号量机制。

Nanos中的信号量主要用来实现消息传递机制；lock()方法封装了基本的关中断操作，即通过关闭CPU中断（设置IF位）使得不会有线程切换发生，也就保护了临界区。但这在支持多核环境的内核中明显是不适用的，因为每个CPU都有自己的控制寄存器（eflags)，关中断仅能保证当前CPU不会发生线程切换，而不能保证其他CPU上运行的线程不会进入临界区，因此，在Linux的SMP环境中需要更多粒度不同、开销不同的同步手段。

注：文中引用的Linux内核代码版本为<a href="https://www.kernel.org/pub/linux/kernel/v2.6/longterm/v2.6.32/linux-2.6.32.63.tar.xz" title="kernel" target="_blank">2.6.32.63</a>

<!--more-->

<hr />
<h2>原子操作（Atomic Operations）</h2>

原子操作是所有内核同步机制中粒度最细，开销最小的一种。也是其他同步机制的基础，例如如果没有原子操作，则无法保证自旋锁获取操作的原子性，自旋锁也就无法工作了。

首先要理解为什么要保证单独一个操作的原子性？难道一条语句还能再分么？这里有一个误区，虽然单条语句在高级语言层次上看上去是原子的，但是实际上我们所使用的变量都存放在内存中，对变量的单条操作实际上涉及到读取内存到寄存器、修改寄存器、写会内存中三个步骤，在这些机器指令之间是有可能发生线程切换的。

Linux中原子操作的操作对象的定义如下（&lt;linux/types.h&gt;）：
<code lang="c">
typedef struct {
volatile int counter;
} atomic_t;
</code>
一个实际使用的例子：
<code lang="c">
atomic_t v;
atomic_t u = ATOMIC_INIT(0);

atomic_set(&v, 4);
atomic_add(2, &v);
atomic_inc(&v);
</code>

实际上原子操作的实现并不复杂，但大部分的原子操作依赖于硬件指令集，所以不同的平台都有不同的实现，以x86平台中的整数原子操作为例，实现在&lt;asm/atomic_32.h&gt;
<code lang="c">
/**
 * atomic_read - read atomic variable
 * @v: pointer of type atomic_t
 *
 * Atomically reads the value of @v.
 */
static inline int atomic_read(const atomic_t *v)
{
	return v->counter;
}

/**
 * atomic_set - set atomic variable
 * @v: pointer of type atomic_t
 * @i: required value
 *
 * Atomically sets the value of @v to @i.
 */
static inline void atomic_set(atomic_t *v, int i)
{
	v->counter = i;
}

/**
 * atomic_add - add integer to atomic variable
 * @i: integer value to add
 * @v: pointer of type atomic_t
 *
 * Atomically adds @i to @v.
 */
static inline void atomic_add(int i, atomic_t *v)
{
	asm volatile(LOCK_PREFIX "addl %1,%0"
		     : "+m" (v->counter)
		     : "ir" (i));
}

/**
 * atomic_sub - subtract integer from atomic variable
 * @i: integer value to subtract
 * @v: pointer of type atomic_t
 *
 * Atomically subtracts @i from @v.
 */
static inline void atomic_sub(int i, atomic_t *v)
{
	asm volatile(LOCK_PREFIX "subl %1,%0"
		     : "+m" (v->counter)
		     : "ir" (i));
}

/**
 * atomic_sub_and_test - subtract value from variable and test result
 * @i: integer value to subtract
 * @v: pointer of type atomic_t
 *
 * Atomically subtracts @i from @v and returns
 * true if the result is zero, or false for all
 * other cases.
 */
static inline int atomic_sub_and_test(int i, atomic_t *v)
{
	unsigned char c;

	asm volatile(LOCK_PREFIX "subl %2,%0; sete %1"
		     : "+m" (v->counter), "=qm" (c)
		     : "ir" (i) : "memory");
	return c;
}

/**
 * atomic_inc - increment atomic variable
 * @v: pointer of type atomic_t
 *
 * Atomically increments @v by 1.
 */
static inline void atomic_inc(atomic_t *v)
{
	asm volatile(LOCK_PREFIX "incl %0"
		     : "+m" (v->counter));
}
</code>

<hr />
<h2>自旋锁（Spin Locks）</h2>

自旋锁即忙等待，当发现无法获取锁时，内核执行路径不断循环检查锁直到锁被释放。
<code lang="c">
# <linux/spinlock_types.h>
typedef struct {
	raw_spinlock_t raw_lock;
} spinlock_t;

# <asm/spinlock_types.h>
typedef struct raw_spinlock {
	unsigned int slock;
} raw_spinlock_t;
</code>
锁结构的定义分为两部分，第一部分为实际使用的结构，定义在&lt;linux/spinlock_types.h&gt;中，另一部分为体系结构相关的具体实现，定义在&lt;asm/spinlock_types.h&gt;中，来个例子：
<code lang="c">
DEFINE_SPINLOCK(mr_lock);
spin_lock(&mr_lock);
/* critical region ... */
spin_unlock(&mr_lock);
</code>

除了简单的lock和unlock，内核还提供了其他的自旋锁操作，比如下面两个：
<code lang="c">
spin_lock_irqsave()
spin_unlock_irqrestore()
</code>
这两个方法除了自旋之外，还附加了关/开中断的操作：当lock时记录当前IF位状态并关闭中断，unlock时恢复IF位。（尼玛好像Nanos中的lock、unlock有木有）

x86的实现中slock字段标记该锁是否已被获取，如果已被获取为1，反之为0。
说到自旋锁就不得不提到互斥锁，其在用户空间的使用分析在<a href="http://blog.kongfy.com/2014/10/c%e4%b8%ad%e5%ae%9e%e7%8e%b0%e5%a4%9a%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e5%8d%95%e4%bd%93%e7%b1%bb/" title="C++中实现多线程安全的单体类" target="_blank">之前的文章中</a>已经有了分析，在内核空间中，自旋锁和互斥锁以及信号量有一个更为重要的不同：由于自旋锁不会导致阻塞（sleep），因此自旋锁是可以用在中断处理路径中的，而互斥锁和信号量都不行（中断上下文不允许sleep）。

<hr />
<h2>读写自旋锁（Reader-Writer Spin Locks）</h2>

读写自旋锁和自旋锁一样以忙等待方式工作。但是读写自旋锁针对读写者问题提供更好的并发性：读写自旋锁允许读者并发执行，而对写者互斥，且保证在写者占有锁的情况下不会有读者进入临界区。
<code lang="c">
# <linux/spinlock_types.h>
typedef struct {
	raw_rwlock_t raw_lock;
} rwlock_t;

# <asm/spinlock_types.h>
typedef struct {
	unsigned int lock;
} raw_rwlock_t;
</code>
锁结构的定义和自旋锁非常类似，不过lock字段的含义并不仅仅是锁的状态了。lock字段分为两个部分：
<ul>
	<li>0-23位：计数器，临界区内读者的数量</li>
	<li>24位：锁标记位，当有写者进入临界区时置1，离开时置为0</li>
</ul>
通过计数器和标记的组合，Linux可以很方便的实现读写者问题。但是有额外的一点要注意：读写者自旋锁是读者亲和（favor）的，也就是说只要有读者不断的获取锁，写者只能一直保持在忙等待状态，有些时候这可能不是我们需要的行为，在Cocoa中有一个写者亲和的读写锁实现，之后有机会具体分析一下。

差点忘了例子：
<code lang="c">
DEFINE_RWLOCK(&mr_rwlock);

# readers
read_lock(&mr_rwlock);
/* critical section (read only) ... */
read_unlock(&mr_rwlock);

# writers
write_lock(&mr_rwlock);
/* critical section (read and write) ... */
write_unlock(&mr_rwlock);
</code>

<hr />
<h2>信号量（Semaphores）</h2>

信号量的概念在操作系统中课程中非常重要，还记得当时用信号量来解决各种同步问题...在Nanos中也实现了信号量的基本PV操作，看看Linux是如何定义Semaphore的：
<code lang="c">
/* Please don't access any members of this structure directly */
struct semaphore {
	spinlock_t		lock;
	unsigned int		count;
	struct list_head	wait_list;
};
</code>
结构体包含三个变量，count和wati_list都和Nanos中的实现类似：一个计数器以及在该信号量上挂起的进程task_struct队列，不同的是Linux内核中还增加了自旋锁来保护这个条件变量。另外，Linux对task_struct队列进行了封装，包装进了semaphore_waiter结构中:
<code lang="c">
struct semaphore_waiter {
	struct list_head list;
	struct task_struct *task;
	int up;
};
</code>
down和up方法中包含了很多进程调度方面的细节和内核中的黑魔法：
<code lang="c">
/**
 * up - release the semaphore
 * @sem: the semaphore to release
 *
 * Release the semaphore.  Unlike mutexes, up() may be called from any
 * context and even by tasks which have never called down().
 */
void up(struct semaphore *sem)
{
	unsigned long flags;

	spin_lock_irqsave(&sem->lock, flags);
	if (likely(list_empty(&sem->wait_list)))
		sem->count++;
	else
		__up(sem);
	spin_unlock_irqrestore(&sem->lock, flags);
}

static noinline void __sched __up(struct semaphore *sem)
{
	struct semaphore_waiter *waiter = list_first_entry(&sem->wait_list,
						struct semaphore_waiter, list);
	list_del(&waiter->list);
	waiter->up = 1;
	wake_up_process(waiter->task);
}

/**
 * down - acquire the semaphore
 * @sem: the semaphore to be acquired
 *
 * Acquires the semaphore.  If no more tasks are allowed to acquire the
 * semaphore, calling this function will put the task to sleep until the
 * semaphore is released.
 *
 * Use of this function is deprecated, please use down_interruptible() or
 * down_killable() instead.
 */
void down(struct semaphore *sem)
{
	unsigned long flags;

	spin_lock_irqsave(&sem->lock, flags);
	if (likely(sem->count > 0))
		sem->count--;
	else
		__down(sem);
	spin_unlock_irqrestore(&sem->lock, flags);
}

static noinline void __sched __down(struct semaphore *sem)
{
	__down_common(sem, TASK_UNINTERRUPTIBLE, MAX_SCHEDULE_TIMEOUT);
}

/*
 * Because this function is inlined, the 'state' parameter will be
 * constant, and thus optimised away by the compiler.  Likewise the
 * 'timeout' parameter for the cases without timeouts.
 */
static inline int __sched __down_common(struct semaphore *sem, long state,
								long timeout)
{
	struct task_struct *task = current;
	struct semaphore_waiter waiter;

	list_add_tail(&waiter.list, &sem->wait_list);
	waiter.task = task;
	waiter.up = 0;

	for (;;) {
		if (signal_pending_state(state, task))
			goto interrupted;
		if (timeout <= 0)
			goto timed_out;
		__set_task_state(task, state);
		spin_unlock_irq(&sem->lock);
		timeout = schedule_timeout(timeout);
		spin_lock_irq(&sem->lock);
		if (waiter.up)
			return 0;
	}

 timed_out:
	list_del(&waiter.list);
	return -ETIME;

 interrupted:
	list_del(&waiter.list);
	return -EINTR;
}

</code>

likely是内核中非常常见的黑魔法，用来对条件判断语句进行编译优化的，简单说就是告诉编译器这个条件很可能为真，还有一个对应的宏unlike，你懂的。除此以外代码相当直观，就不多解释了。

<hr />
<h2>读写信号量（Reader-Writer Semaphores）</h2>

读写信号量是信号量的好兄弟，和读写自旋锁一样，是为解决读写者问题编写的特化版本。
<code lang="c">
/*
 * the semaphore definition
 */
struct rw_semaphore {
	signed long		count;
	spinlock_t		wait_lock;
	struct list_head	wait_list;
};
</code>
结构体的定义非常相似，不过wait_list队列中存放的结构变成了rwsem_waiter：
<code lang="c">
struct rwsem_waiter {
	struct list_head list;
	struct task_struct *task;
	unsigned int flags;
#define RWSEM_WAITING_FOR_READ	0x00000001
#define RWSEM_WAITING_FOR_WRITE	0x00000002
};
</code>
当信号量已经被写者占用时，新来的读者和写者被添加到wait_list队列中，并标明是读事件还是写事件。当信号量被释放时，按顺序唤醒队列首部的所有事件，直到唤醒一个写事件。

来个例子：
<code lang="c">
static DECLARE_RWSEM(mr_rwsem);

# readers
down_read(&mr_rwsem);
/* critical section (read only) ... */
up_read(&mr_rwsem);

# writers
down_write(&mr_rwsem);
/* critical section (read and write) ... */
up_write(&mr_rwsem);

</code>

<hr />
<h2>互斥锁（Mutexes）</h2>
互斥锁即“sleeping lock”，和用户空间的互斥锁一样，会导致获取锁失败的进程阻塞。因此如上文所分析的，互斥锁不能够用在中断上下文中。

<code lang="c">
struct mutex {
	/* 1: unlocked, 0: locked, negative: locked, possible waiters */
	atomic_t		count;
	spinlock_t		wait_lock;
	struct list_head	wait_list;
};

/*
 * This is the control structure for tasks blocked on mutex,
 * which resides on the blocked task's kernel stack:
 */
struct mutex_waiter {
	struct list_head	list;
	struct task_struct	*task;
#endif
};
</code>
可以看到自旋锁的定义和信号量的定义多么相似，只是count的作用变为了记录锁状态。

<hr />
<h2>大内核锁（The Big Kernel Lock）</h2>
大内核锁可以说是Linux版本过渡时期的产物（2.0-2.2），为了适应SMP的变更，大内核锁提供了一种内核中全局的自旋锁机制，但是有一些有趣的特性：
<ul>
	<li>持有大内核锁的进程可以sleep，这和普通的自旋锁很不相同。这是因为大内核的实现在持有大内核锁的进程阻塞时会自动丢弃大内核锁，而在恢复运行时又获得大内核锁</li>
	<li>大内核锁是递归锁</li>
	<li>大内核锁不能在中断上下文中使用</li>
	<li>不要再使用新的大内核锁。如前文提到的，大内核锁是Linux版本过渡时期的产物，随着Linux的发展，大内核锁必然会越来越少，取而代之的是其他更加优化、粒度更为合适的锁</li>
</ul>

<hr />
<h2>屏障（Barriers）</h2>
屏障是一种特殊的同步机制，和其他几种同步机制不同，屏障所保护的不是程序中存在的数据临界区，而是程序没有按照我们想象的顺序执行所产生的同步问题。

那么为什么程序会不按照我们想象的顺序执行呢？
<ol>
	<li>编译器：在编译时期，编译器为了提高执行效率会对程序中没有明显关联的（至少在编译器眼中是没有关联的）语句进行重排以提高性能，这一过程是静态的，生成固定的、重新排序的机器指令</li>
	<li>CPU：在运行时处理器会动态的对机器指令的执行进行重排（为了高效的利用流水线）</li>

</ol>
知道了原因，解决方法也就简单了：明确告诉编译器或者处理器：“嘿！这个地方不是你想的那样的！不要乱动我的代码！”。

<strong>注意：由于屏障操作严重依赖于使用的编译器和运行的处理器体系结构，下面的例子中选取gcc编译器和x86体系结构的处理器为例。</strong>

对于编译器重排，Linux内核提供了barrier()方法：
<code lang="c">
/* Optimization barrier */
/* The "volatile" is due to gcc bugs */
#define barrier() __asm__ __volatile__("": : :"memory")
</code>
gcc编译器在遇到该内嵌汇编语句时将其作为一条屏障，重排序内存操作：即此语句之前的各种编译优化将不会持续到此语句之后。这样的操作作用于编译时期，对机器指令的执行无任何负担。

而对于处理器造成的乱序，则需要使用体系结构提供的机器指令直接阻止机器对指令进行重排：
<code lang="c">
/*
 * Force strict CPU ordering.
 * And yes, this is required on UP too when we're talking
 * to devices.
 */
#ifdef CONFIG_X86_32
/*
 * Some non-Intel clones support out of order store. wmb() ceases to be a
 * nop for these.
 */
#define mb() alternative("lock; addl $0,0(%%esp)", "mfence", X86_FEATURE_XMM2)
#define rmb() alternative("lock; addl $0,0(%%esp)", "lfence", X86_FEATURE_XMM2)
#define wmb() alternative("lock; addl $0,0(%%esp)", "sfence", X86_FEATURE_XMM)
#else
#define mb() 	asm volatile("mfence":::"memory")
#define rmb()	asm volatile("lfence":::"memory")
#define wmb()	asm volatile("sfence" ::: "memory")
#endif
</code>
lfence、sfence和mfence都是x86体系结构的指令。sfence是store fence，对其前后的store指令起屏障作用；lfence是load fence，对其前后的load指令其屏障作用，而mfence是两者的结合，

这一部分的更多内容参见<a href="http://zh.wikipedia.org/zh/内存屏障" title="内存屏障" target="_blank">这里</a>。
<hr />
<h2>其他</h2>
除了上述提到的内核同步工具，Linux内核中还提供了其他的几种内核同步机制，如Completion Variables、顺序锁（Sequential locks）等，鉴于作者能力有限，仅对感兴趣的几种同步方式做了探索，你可以在各种Linux图书和源码中探索其他同步方式。

<hr />
<h2>参考资料</h2>
<ul>
	<li>《Linux Kernel Development(Third Edition)》</li>
	<li>《深入理解Linux内核》</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>613</wp:post_id>
		<wp:post_date><![CDATA[2014-11-13 17:44:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-13 09:44:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e5%86%85%e6%a0%b8%e5%90%8c%e6%ad%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e5%86%85%e6%a0%b8%e5%90%8c%e6%ad%a5"><![CDATA[内核同步]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3753140847]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>APUE杂记：解释器文件</title>
		<link>http://blog.kongfy.com/2014/11/apue%e6%9d%82%e8%ae%b0%ef%bc%9a%e8%a7%a3%e9%87%8a%e5%99%a8%e6%96%87%e4%bb%b6/</link>
		<pubDate>Fri, 14 Nov 2014 02:17:01 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=637</guid>
		<description></description>
		<content:encoded><![CDATA[一个非常常见的Python脚本如下：
<code lang="python">
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys

def main():
    """
    main method for my test script~
    """
    print sys.argv

if __name__ == '__main__':
    main()
</code>

一直以来从来没考虑过为什么在脚本的第一行要写上 #!/usr/bin/env python 这样的注释，通常的解释是这样写就知道用什么来解释这个文件了，但是也没有深究为什么。其实这是一个Unix解释器文件的写法。

<!--more-->

对这种文件的解释是内核作为exec系统调用处理的一部分完成的。当我们执行这个脚本时，实际上发生的过程是这样的：
<ol>
	<li>sh程序执行fork系统调用生成子进程</li>
	<li>子进程执行exec系统调用，执行<em>/home/Documents/kongfy/args.py a b c</em></li>
	<li>内核执行exec，发现该文件不是可执行格式（如ELF），作为解释器文件执行，使用第一行的解释器执行解释器，并将原参数进行位移后附加在后面（在此处内核使用pathname代替argv[0]），实际执行的程序变为<em>/usr/bin/env python /home/Documents/kongfy/args.py a b c</em></li>
</ol>

当不添加解释器注释时，错误输出如下：
<code lang="bash">
kongfy@ubuntu:~/Documents$ ./args.py 
./args.py: line 1: import: command not found
./args.py: line 3: syntax error near unexpected token `('
./args.py: line 3: `def main():'
</code>
也就是说当内核找不到解释器文件的时候使用用户默认的sh执行脚本，自然会报错。

在实际解释器中执行该文件时，这一行作为注释不产生效果，也就是说，难道这就是为什么脚本语言中多采用#作为注释符的原因？

<hr />
<h2>拨乱反正</h2>
一种常见的误解是#！的开头是由bash等shell程序解释的，下面从几个方面验证解释器文件确实是由内核解释的。
<h3>shell</h3>
使用bash解释带有#!的python脚本文件：
<code lang="bash">
kongfy@ubuntu:~/Documents$ bash args.py 
args.py: line 4: import: command not found
args.py: line 6: syntax error near unexpected token `('
args.py: line 6: `def main():'
</code>
可见bash并不能理解解释器文件，#！在bash看来只是普通的注释而已。
<h3>strace</h3>
通过strace跟踪执行脚本文件时使用的系统调用：
<code lang="bash">
kongfy@ubuntu:~/Documents$ strace ./args.py
execve("./args.py", ["./args.py", "a", "b", "c", "2"], [/* 50 vars */]) = 0
execve("/usr/lib/lightdm/lightdm/python", ["python", "./args.py", "a", "b", "c", "2"], [/* 50 vars */]) = -1 ENOENT (No such 
execve("/usr/local/sbin/python", ["python", "./args.py", "a", "b", "c", "2"], [/* 50 vars */]) = -1 ENOENT (No such file or directory)
execve("/usr/local/bin/python", ["python", "./args.py", "a", "b", "c", "2"], [/* 50 vars */]) = -1 ENOENT (No such file or directory)
execve("/usr/sbin/python", ["python", "./args.py", "a", "b", "c", "2"], [/* 50 vars */]) = -1 ENOENT (No such file or directory)
execve("/usr/bin/python", ["python", "./args.py", "a", "b", "c", "2"], [/* 50 vars */]) = 0
</code>
如果脚本文件真的是由shell解释执行的，则不应该会产生对于<em>./args.py</em>的execve系统调用，后面的一连串系统调用都是由<em>/usr/bin/env</em>生成的寻找python位置的调用。
<h3>man</h3>
执行<em>man 2 execve</em>查看execve系统调用的手册文档：
<blockquote>
   Interpreter scripts
       An interpreter script is a text file that has execute permission enabled and whose first line is of the form:

           #! interpreter [optional-arg]

       The  interpreter  must be a valid pathname for an executable which is not itself a script.  If the filename argument of execve() specifies an
       interpreter script, then interpreter will be invoked with the following arguments:

           interpreter [optional-arg] filename arg...

       where arg...  is the series of words pointed to by the argv argument of execve().
</blockquote>
很明显，执行解释器文件是execve系统调用工作的一部分。
<h3>kernal code</h3>
实际上，对开源项目最明显最直接的验证方法必须是“read the fucking code”，只是Linux内核源码并不是那么直观，所以如果只想知道结果的话建议跳过这一小节，下面的相关内核源码贴给和我一样喜欢追根溯源的傻boy们。
注：代码摘自Linux内核2.6.32.63版本的x86部分
<code lang="c">
/*
 * sys_execve() executes a new program.
 */
int sys_execve(struct pt_regs *regs)
{
	int error;
	char *filename;

	filename = getname((char __user *) regs->bx);
	error = PTR_ERR(filename);
	if (IS_ERR(filename))
		goto out;
	error = do_execve(filename,
			(char __user * __user *) regs->cx,
			(char __user * __user *) regs->dx,
			regs);
	if (error == 0) {
		/* Make sure we don't return using sysenter.. */
		set_thread_flag(TIF_IRET);
	}
	putname(filename);
out:
	return error;
}
</code>
当在用户空间执行系统调用陷入内核后，通过<em>syscall_table</em>找到并调用函数<em>sys_execve</em>，函数简单的从用户空间拷贝了<em>filename</em>字符串，调用<em>do_execve</em>函数：
<code lang="c">
/*
 * sys_execve() executes a new program.
 */
int do_execve(char * filename,
	char __user *__user *argv,
	char __user *__user *envp,
	struct pt_regs * regs)
{
	struct linux_binprm *bprm;
	struct file *file;
	struct files_struct *displaced;
	bool clear_in_exec;
	int retval;

	retval = unshare_files(&displaced);
	if (retval)
		goto out_ret;

	retval = -ENOMEM;
	bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
	if (!bprm)
		goto out_files;

	retval = prepare_bprm_creds(bprm);
	if (retval)
		goto out_free;

	retval = check_unsafe_exec(bprm);
	if (retval < 0)
		goto out_free;
	clear_in_exec = retval;
	current->in_execve = 1;

	file = open_exec(filename);
	retval = PTR_ERR(file);
	if (IS_ERR(file))
		goto out_unmark;

	sched_exec();

	bprm->file = file;
	bprm->filename = filename;
	bprm->interp = filename;

	retval = bprm_mm_init(bprm);
	if (retval)
		goto out_file;

	bprm->argc = count(argv, MAX_ARG_STRINGS);
	if ((retval = bprm->argc) < 0)
		goto out;

	bprm->envc = count(envp, MAX_ARG_STRINGS);
	if ((retval = bprm->envc) < 0)
		goto out;

	retval = prepare_binprm(bprm);
	if (retval < 0)
		goto out;

	retval = copy_strings_kernel(1, &bprm->filename, bprm);
	if (retval < 0)
		goto out;

	bprm->exec = bprm->p;
	retval = copy_strings(bprm->envc, envp, bprm);
	if (retval < 0)
		goto out;

	retval = copy_strings(bprm->argc, argv, bprm);
	if (retval < 0)
		goto out;

	current->flags &= ~PF_KTHREAD;
	retval = search_binary_handler(bprm,regs);
	if (retval < 0)
		goto out;

	/* execve succeeded */
	current->fs->in_exec = 0;
	current->in_execve = 0;
	acct_update_integrals(current);
	free_bprm(bprm);
	if (displaced)
		put_files_struct(displaced);
	return retval;

out:
	if (bprm->mm) {
		acct_arg_size(bprm, 0);
		mmput(bprm->mm);
	}

out_file:
	if (bprm->file) {
		allow_write_access(bprm->file);
		fput(bprm->file);
	}

out_unmark:
	if (clear_in_exec)
		current->fs->in_exec = 0;
	current->in_execve = 0;

out_free:
	free_bprm(bprm);

out_files:
	if (displaced)
		reset_files_struct(displaced);
out_ret:
	return retval;
}
</code>
这个函数很长，你可以慢慢品读，注意中间调用了<em>search_binary_handler</em>函数，该函数负责寻找实际实行该文件的方式：
<code lang="c">
/*
 * cycle the list of binary formats handler, until one recognizes the image
 */
int search_binary_handler(struct linux_binprm *bprm,struct pt_regs *regs)
{
	unsigned int depth = bprm->recursion_depth;
	int try,retval;
	struct linux_binfmt *fmt;

	/* This allows 4 levels of binfmt rewrites before failing hard. */
	if (depth > 5)
		return -ELOOP;

	retval = security_bprm_check(bprm);
	if (retval)
		return retval;
	retval = ima_bprm_check(bprm);
	if (retval)
		return retval;

	retval = audit_bprm(bprm);
	if (retval)
		return retval;

	retval = -ENOENT;
	for (try=0; try<2; try++) {
		read_lock(&binfmt_lock);
		list_for_each_entry(fmt, &formats, lh) {
			int (*fn)(struct linux_binprm *, struct pt_regs *) = fmt->load_binary;
			if (!fn)
				continue;
			if (!try_module_get(fmt->module))
				continue;
			read_unlock(&binfmt_lock);
			bprm->recursion_depth = depth + 1;
			retval = fn(bprm, regs);
			bprm->recursion_depth = depth;
			if (retval >= 0) {
				if (depth == 0)
					tracehook_report_exec(fmt, bprm, regs);
				put_binfmt(fmt);
				allow_write_access(bprm->file);
				if (bprm->file)
					fput(bprm->file);
				bprm->file = NULL;
				current->did_exec = 1;
				proc_exec_connector(current);
				return retval;
			}
			read_lock(&binfmt_lock);
			put_binfmt(fmt);
			if (retval != -ENOEXEC || bprm->mm == NULL)
				break;
			if (!bprm->file) {
				read_unlock(&binfmt_lock);
				return retval;
			}
		}
		read_unlock(&binfmt_lock);
		if (retval != -ENOEXEC || bprm->mm == NULL) {
			break;
#ifdef CONFIG_MODULES
		} else {
#define printable(c) (((c)=='\t') || ((c)=='\n') || (0x20<=(c) && (c)<=0x7e))
			if (printable(bprm->buf[0]) &&
			    printable(bprm->buf[1]) &&
			    printable(bprm->buf[2]) &&
			    printable(bprm->buf[3]))
				break; /* -ENOEXEC */
			request_module("binfmt-%04x", *(unsigned short *)(&bprm->buf[2]));
#endif
		}
	}
	return retval;
}
</code>
Linux中有多个可执行的格式，这个函数就是在这些格式中循环查找，其中一个就是script格式，对应的执行代码：
<code lang="c">
/*
 *  linux/fs/binfmt_script.c
 *
 *  Copyright (C) 1996  Martin von Löwis
 *  original #!-checking implemented by tytso.
 */

static int load_script(struct linux_binprm *bprm,struct pt_regs *regs)
{
	char *cp, *i_name, *i_arg;
	struct file *file;
	char interp[BINPRM_BUF_SIZE];
	int retval;

	if ((bprm->buf[0] != '#') || (bprm->buf[1] != '!'))
		return -ENOEXEC;
	/*
	 * This section does the #! interpretation.
	 * Sorta complicated, but hopefully it will work.  -TYT
	 */

	allow_write_access(bprm->file);
	fput(bprm->file);
	bprm->file = NULL;

	bprm->buf[BINPRM_BUF_SIZE - 1] = '\0';
	if ((cp = strchr(bprm->buf, '\n')) == NULL)
		cp = bprm->buf+BINPRM_BUF_SIZE-1;
	*cp = '\0';
	while (cp > bprm->buf) {
		cp--;
		if ((*cp == ' ') || (*cp == '\t'))
			*cp = '\0';
		else
			break;
	}
	for (cp = bprm->buf+2; (*cp == ' ') || (*cp == '\t'); cp++);
	if (*cp == '\0') 
		return -ENOEXEC; /* No interpreter name found */
	i_name = cp;
	i_arg = NULL;
	for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++)
		/* nothing */ ;
	while ((*cp == ' ') || (*cp == '\t'))
		*cp++ = '\0';
	if (*cp)
		i_arg = cp;
	strcpy (interp, i_name);
	/*
	 * OK, we've parsed out the interpreter name and
	 * (optional) argument.
	 * Splice in (1) the interpreter's name for argv[0]
	 *           (2) (optional) argument to interpreter
	 *           (3) filename of shell script (replace argv[0])
	 *
	 * This is done in reverse order, because of how the
	 * user environment and arguments are stored.
	 */
	retval = remove_arg_zero(bprm);
	if (retval)
		return retval;
	retval = copy_strings_kernel(1, &bprm->interp, bprm);
	if (retval < 0) return retval; 
	bprm->argc++;
	if (i_arg) {
		retval = copy_strings_kernel(1, &i_arg, bprm);
		if (retval < 0) return retval; 
		bprm->argc++;
	}
	retval = copy_strings_kernel(1, &i_name, bprm);
	if (retval) return retval; 
	bprm->argc++;
	retval = bprm_change_interp(interp, bprm);
	if (retval < 0)
		return retval;

	/*
	 * OK, now restart the process with the interpreter's dentry.
	 */
	file = open_exec(interp);
	if (IS_ERR(file))
		return PTR_ERR(file);

	bprm->file = file;
	retval = prepare_binprm(bprm);
	if (retval < 0)
		return retval;
	return search_binary_handler(bprm,regs);
}
</code>
执行过程和APUE中描述的流程一致，Done。
<hr />
<h2>参考资料</h2>
<ul>
	<li>Unix环境高级编程</li>
	<li>Linux man page</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date><![CDATA[2014-11-14 10:17:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-14 02:17:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[apue%e6%9d%82%e8%ae%b0%ef%bc%9a%e8%a7%a3%e9%87%8a%e5%99%a8%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apue"><![CDATA[APUE]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python-2"><![CDATA[Python]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052596]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>622</wp:comment_id>
			<wp:comment_author><![CDATA[胡萝卜]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[36.36.208.17]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-14 23:20:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-14 15:20:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个应该是跟具体的shell解释器相关的，只是现在流行的bash、zsh、fish都是支持这种写法，第一行的 #! 这两个符号就是告诉shell应该调用后面的来执行，shell也只会判断第一行的第一个和第二个是这两个字符才行。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229208]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>623</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.kongfy.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.94.142.57]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-15 10:33:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-15 02:33:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你说的这是一种常见的误区，这个功能是系统调用的工作而非shell，shell的工作只是fork、exec、waitpid，我增加了验证部分，你可以看一下。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>622</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229208]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229209]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Machine Learning小结(2)：SVM</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm/</link>
		<pubDate>Tue, 18 Nov 2014 15:41:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=648</guid>
		<description></description>
		<content:encoded><![CDATA[继续总结Ng的课程内容，这次是SVM。Ng在课程中说：
<blockquote>Most people consider the SVM to be the most powerful "black box" learning algorithm. </blockquote>
在实践中，SVM也的确是一种非常流行的“黑盒”学习算法，下图为SVM标志性的概念图：

[caption id="attachment_650" align="aligncenter" width="464"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/Svm_max_sep_hyperplane_with_margin-e1417223870925.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/Svm_max_sep_hyperplane_with_margin-e1417223870925.png" alt="Support Vector Machine" width="464" height="500" class="size-full wp-image-650" /></a> Support Vector Machine[/caption]

<!--more-->

<hr />
<h2>SVM with hard constraints</h2>
SVM也是一种线性模型，为了与之前讲的几个线性模型分类器一致，Ng在课程中并没有使用SVM研究中所常用的符号（如上图），而大部分沿用了之前课程中的符号：
<ul>
	<li>训练集：$latex x$，其中$latex x^{(i)}$为第$latex i$个训练样本，$latex x_j^{(i)}$代表该样本的第$latex j$个属性；$latex y^{(i)}$表示其对应的正确的回归值</li>
	<li>$latex \theta$表示SVM训练得到的参数，也可以理解为超平面的一个法向量</li>
</ul>
首先来看不允许发生错误分类的条件下SVM是如何工作的，这往往被称为“SVM with hard constraints”。
<center>[latex] \displaystyle
\begin{aligned}
&\min _{\theta} \frac{1}{2} \sum _{j=1}^{n} \theta_{j}^{2} \\
s.t. \  &\theta^{T}x^{(i)} \ge 1 \qquad &if \  y^{(i)}=1 \\
&\theta^{T}x^{(i)} \le -1 \qquad &if \  y^{(i)}=0
\end{aligned}
[/latex]</center>

这个式子看上去很难理解，和之前优化Cost function的套路不同，这优化的是个啥？看Ng慢慢展开：$latex \frac{1}{2} \sum _{j=1}^{n} \theta_{j}^{2}=\frac{1}{2} {\left \| \theta \right \|}^2$，优化目标变成了最小化向量$latex \theta$的长度？那岂不是可以一直优化到无穷小？别忘了还有约束条件，如果我们将训练样本$latex x^{(i)}$看做一个向量，那么$latex \theta^{T}x^{(i)}$即为向量$latex \theta$和训练样本的内积，再写一步$latex \theta^{T}x^{(i)}=p^{(i)}\cdot{\left \| \theta \right \|}$，$latex p^{(i)}$为训练样本$latex x^{(i)}$在$latex \theta$上的投影，则我们得到了下面的优化目标：

<center>[latex] \displaystyle
\begin{aligned}
&\min _{\theta} \frac{1}{2} \sum _{j=1}^{n} \theta_{j}^{2}=\frac{1}{2} {\left \| \theta \right \|}^2\\
s.t. \  &p^{(i)}\cdot{\left \| \theta \right \|} \ge 1 \qquad &if \  y^{(i)}=1 \\
&p^{(i)}\cdot{\left \| \theta \right \|} \le -1 \qquad &if \  y^{(i)}=0
\end{aligned}
[/latex]</center>

上面的式子比起之前的形式更清楚的说明了SVM到底在做什么：通过最小化$latex \frac{1}{2} {\left \| \theta \right \|}^2$，SVM实际上是在寻找合适的$latex \theta$使得在各个训练样本$latex x^{(i)}$上获得更大的投影来满足限制条件，这也对应了更大的margin（所以SVM也叫Large margin classifier）,简单来说，SVM的目标不仅使找到可以分开正反类别的超平面，而且希望能找个“最好”的超平面，即距离正反类别样本距离最远的超平面，如下图：

[caption id="attachment_666" align="aligncenter" width="1208"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/69F86EE6-78B5-4620-A038-29D1A22D507D.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/69F86EE6-78B5-4620-A038-29D1A22D507D.jpg" alt="Larger margin" width="1208" height="379" class="size-full wp-image-666" /></a> Larger margin[/caption]
<hr />
<h2>错误惩罚</h2>
为了避免过拟合，我们需要容忍SVM训练中有一定的错误，和之前的思路相似，错误会造成Cost，因此需要在我们的优化目标中加入错误产生的代价：
<center>[latex] \displaystyle
\min _{\theta} C \sum_{i=1}^m \left[ y^{(i)}cost_1(\theta^{T}x^{(i)}) + (1-y^{(i)})cost_0(\theta^{T}x^{(i)}) \right] + \frac{1}{2} \sum _{j=1}^{n} \theta_{j}^{2} \\
[/latex]</center>

其中$latex C$是惩罚系数，后面的两项中$latex cost_1$和$latex cost_0$实际上是<a href="http://en.wikipedia.org/wiki/Hinge_loss" title="Hinge loss" target="_blank">Hinge loss</a>函数：

[caption id="attachment_670" align="aligncenter" width="1083"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/945126A2-3160-49B1-B4C2-5C9CB6EAA0C9.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/945126A2-3160-49B1-B4C2-5C9CB6EAA0C9.jpg" alt="Hinge Loss" width="1083" height="273" class="size-full wp-image-670" /></a> <a href="http://en.wikipedia.org/wiki/Hinge_loss" title="Hinge loss" target="_blank"></a>Hinge Loss[/caption]

到这里我们已经得到了线性核的SVM，训练个线性分类器看看效果：

[caption id="attachment_689" align="aligncenter" width="630"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/0A148944-9317-4BDA-BCB4-591148F131BE.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/0A148944-9317-4BDA-BCB4-591148F131BE.jpg" alt="Linear Kernel" width="630" height="475" class="size-full wp-image-689" /></a> Linear Kernel[/caption]
<hr />
<h2>Kernel</h2>
SVM的核（Kernel），本质上是把低维空间的样本映射到高维空间，在低维空间线性不可分的样本在高维空间可能会变为线性可分的，见下图：

[caption id="attachment_674" align="aligncenter" width="1038"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/77B83BE4-C6A6-4302-AEAD-CA9B85B3AF27.jpg" alt="Linearity v.s. dimensionality" width="1038" height="505" class="size-full wp-image-674" /></a> Linearity v.s. dimensionality[/caption]

在线性回归和逻辑回归中，我们通过添加高次项的方法将样本从低维空间映射到高维空间，在SVM中通过Kernel来完成映射，如果不使用任何Kernel，则称该SVM是线性核（Linear Kernel）。

核的作用十分简单，通过将所有的$latex m$个训练样本作为landmarks $latex l^{(i)}$，从而将样本映射到$latex m$维空间，特征为$latex f_i=similarity(x,l^{(i)})$，确实是映射到了很高维的空间有木有...

高斯核（RBF）是一种常用的SVM Kernel:
<center>[latex] \displaystyle
f_i=similarity(x,l^{(i)})=\exp\left( -\frac{\left \| x-l^{(i)} \right \|^2}{2\sigma^2} \right)
[/latex]</center>

在使用Gaussian kernel时要注意不要忘记做feature scaling！否则会导致规模较小的特征被忽略，相信这不会是你想要的结果。
直到最后Ng也没有将SVM具体是如何运行的，只是说虽然特征维度很高，但只要Kernel满足“Mercer's Theorem”，SVM的运算过程是非常有效的，看来SVM确实很适合被当做“黑盒”来使用...训练一个高斯核SVM分类器看看效果：

[caption id="attachment_690" align="aligncenter" width="630"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/82396B3F-C2F1-4F64-9DA3-CAB0C9BF250C.jpg" alt="Gaussian kernel" width="630" height="474" class="size-full wp-image-690" /></a> Gaussian kernel[/caption]
<hr />
<h2>参数选择和交叉验证</h2>
在实际使用SVM时，以Gaussian kernel为例，需要选择合适的参数$latex C$和$latex \sigma$：

[caption id="attachment_681" align="aligncenter" width="1199"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/61FBC408-0CBA-441A-917B-361D374CE8B9.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/61FBC408-0CBA-441A-917B-361D374CE8B9.jpg" alt="SVM parameters" width="1199" height="662" class="size-full wp-image-681" /></a> SVM parameters[/caption]

具体的建议Ng已经给出了，我们需要在实际的过程中在交叉验证集上选择合适的参数，最终在测试集上检验模型的泛化误差。因为如果在测试集上选择参数再测试泛化误差，本身参数就是针对测试集优化，这样做使得泛化误差的检验变得不公平，所以参数的选择必须在独立的交叉验证集中进行。
<hr />
<h2>模型选择</h2>
因为SVM是Ng课程中讲的最后一个监督学习算法，所以Ng在之后还给出了对问题如何选择合适的学习模型的建议：

[caption id="attachment_684" align="aligncenter" width="1257"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/13E72658-771D-489A-9233-17FA9120AE8E.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/13E72658-771D-489A-9233-17FA9120AE8E.jpg" alt="Model selection" width="1257" height="621" class="size-full wp-image-684" /></a> Model selection[/caption]

在另一门课程mmds中，也给出了SVM和决策树模型之间的选择建议，一并贴出留念：

[caption id="attachment_685" align="aligncenter" width="1152"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/B4E78099-7ADE-4C93-86DA-537E411F870A.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/B4E78099-7ADE-4C93-86DA-537E411F870A.jpg" alt="SVM vs Decision Tree" width="1152" height="699" class="size-full wp-image-685" /></a> SVM vs Decision Tree[/caption]

但是这些只能对选择模型做出一定的参考，而不能仅凭特征数量来选择模型，如俞扬老师说：
<blockquote>
简单以样本和特征数量来选择学习器不太合适吧，特征性质和样本分布更重要，是否使用核方法要看数据的可分性，如果特征远多于样本也许该先尝试特征选择和抽取
</blockquote>
在实际应用中模型的选择还是需要更多的考量和经验。

<hr />
<h2>参考资料</h2>
<ul>
	<li>Machine Learning by Andrew Ng on Coursera</li>
	<li>Mining Massive Datasets by Jure Leskovec, Anand Rajaraman, Jeff Ullman on Coursera</li>
	<li>Data Mining for M.Sc. students, CS, Nanjing University Fall, 2013, Yang Yu</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>648</wp:post_id>
		<wp:post_date><![CDATA[2014-11-18 23:41:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-18 15:41:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning%e5%b0%8f%e7%bb%932%ef%bc%9asvm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="svm"><![CDATA[SVM]]></category>
		<category domain="post_tag" nicename="%e4%ba%a4%e5%8f%89%e9%aa%8c%e8%af%81"><![CDATA[交叉验证]]></category>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751052559]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>661</wp:comment_id>
			<wp:comment_author><![CDATA[Rita]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[546122374@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.119.42.203]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-26 21:49:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-26 13:49:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[iloveyou 偶吧]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229181]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Machine Learning小结(3)：K-means</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means/</link>
		<pubDate>Tue, 25 Nov 2014 15:37:40 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=712</guid>
		<description></description>
		<content:encoded><![CDATA[这已经是我第三次学习K-means算法了，K-means算法应该说不是一个复杂的算法，就做一个相对比较简单的记录吧。

[caption id="attachment_714" align="aligncenter" width="561"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/38f1df05cf64ab7434f4fc11760f14e6fda51155.jpeg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/38f1df05cf64ab7434f4fc11760f14e6fda51155.jpeg" alt="K-means" width="561" height="420" class="size-full wp-image-714" /></a> K-means[/caption]

<!--more-->

K-means算法是Ng引入的第一个非监督学习算法，所谓非监督学习，就是在没有人工标注的label [latex]y^{(i)}[/latex]的情况下对输入数据[latex]x^{(i)}[/latex]进行学习。K-means是一种聚类算法，最终获得的效果是将数据集划分为K个类别。

<hr />
<h2>K-means</h2>
以欧式空间为例，K-means算法的思想是为每一个类寻找空间中的中心点（centroid），使得所有的点距离自己所属类别的中心点的距离和相对较小。若输入有[latex]m[/latex]个样本[latex]x^{(i)}[/latex]，计算得[latex]k[/latex]个类别，每个类别的中心点编号为[latex]\mu_k[/latex]，对于第[latex]i[/latex]个样本，其类别编号为[latex]c^{(i)}[/latex]，则K-means算法的优化目标可以表示如下：

<center>[latex] \displaystyle
J(c^{(1)},\dots,c^{(m)},\mu_1,\dots,\mu_K)=\frac{1}{m}\sum_{i=1}^{m}\left \| x^{(i)}-\mu_{c^{(i)}} \right \|^2
[/latex]</center>

式子相当直观，K-means算法为了最小化优化目标，不断的重复Cluster assignment和Move centroid两步直到收敛，如下：

[caption id="attachment_718" align="aligncenter" width="1250"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/D4457EA5-DC99-445A-BF5A-B08EB07FB542.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/D4457EA5-DC99-445A-BF5A-B08EB07FB542.jpg" alt="K-means algorithm" width="1250" height="662" class="size-full wp-image-718" /></a> K-means algorithm[/caption]

通过一幅图来观察迭代过程中每次迭代产生的中心点的变化如下：

[caption id="attachment_724" align="aligncenter" width="632"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/8371CF03-4D3B-4B5C-A328-D3A2F79518A8.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/8371CF03-4D3B-4B5C-A328-D3A2F79518A8.jpg" alt="centroid" width="632" height="472" class="size-full wp-image-724" /></a> centroid[/caption]

<hr />
<h2>随机初始化</h2>
K-means算法通过随机执行K个中心点对算法进行初始化，由于K-means算法存在局部最优解，因此不同的初始化会导致不同的聚类结果，因此实践中通常多次执行K-means算法（随机初始化）并选择最优的聚类结果（[latex]J(c^{(1)},\dots,c^{(m)},\mu_1,\dots,\mu_K)[/latex]最小）。

<hr />
<h2>选择K</h2>
在K-means算法中一个重要的问题是如何选择合适的K，Ng讲了一种Elbow method可以选择合适的K：

[caption id="attachment_721" align="aligncenter" width="1211"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/B80DDC6D-623E-47AE-8C77-0565009A0E36.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/B80DDC6D-623E-47AE-8C77-0565009A0E36.jpg" alt="Elbow method" width="1211" height="591" class="size-full wp-image-721" /></a> Elbow method[/caption]

但是，如上图右侧的示意图，Elbow method并不总是有效，在大部分情况下仍然需要人为的指定K的值，因为我们在运行K-means算法时通常对结果的类别会有一定的预期，所以这样做也是可行的。

<hr />
<h2>举个栗子</h2>
Ng课后作业中有一个很有意思的例子：使用K-means算法做图像压缩。

其做法非常简单，在图像的颜色RGB空间（三维）中做聚类，获得16个类，将中心点作为新的16个颜色对原图像中的颜色进行替换，效果还不错:

[caption id="attachment_728" align="aligncenter" width="562"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/F018CAD5-5B15-43D9-87F9-1E6E453EDEBF.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/F018CAD5-5B15-43D9-87F9-1E6E453EDEBF.jpg" alt="image compress" width="562" height="448" class="size-full wp-image-728" /></a> image compress[/caption]

在我机器上产生了奇怪的拉伸效果，其实这是一只鸟...

<hr />
<h2>参考资料</h2>
<ul>
	<li>Machine Learning by Andrew Ng on Coursera</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>712</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 23:37:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 15:37:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning%e5%b0%8f%e7%bb%933%ef%bc%9ak-means]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="k-means"><![CDATA[K-means]]></category>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<category domain="post_tag" nicename="%e8%81%9a%e7%b1%bb"><![CDATA[聚类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751203157]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Machine Learning小结(4)：主成分分析（PCA）</title>
		<link>http://blog.kongfy.com/2014/11/machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89/</link>
		<pubDate>Fri, 28 Nov 2014 06:37:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=750</guid>
		<description></description>
		<content:encoded><![CDATA[主成分分析（PCA）是一种通常用来做数据降维的非监督学习算法，下图是数据降维的直观说明：

[caption id="attachment_753" align="aligncenter" width="1079"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/fig_pca_principal_component_analysis.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/fig_pca_principal_component_analysis.png" alt="Principal Component Analysis" width="1079" height="428" class="size-full wp-image-753" /></a> Principal Component Analysis[/caption]

在PCA中，我们将每个样本看做特征线性空间中的一个向量，左图代表具有三个特征的样本（处于三维空间中，每个特征代表一个维度），通过寻找空间中样本的主成分PC1、PC2，以此建立新的二维线性空间来完成3D到2D的降维。

<!--more-->

<hr />
<h2>数据降维</h2>
数据降维的常见使用场景如下：
<ul>
	<li>发掘样本间隐藏的联系</li>
	<li>去除样本中冗余的属性和噪声</li>
	<li>对样本进行可视化（3维以上的数据难以可视化）</li>
	<li>减少数据容量、加速学习速度</li>
</ul>

<hr />
<h2>主成分分析（PCA）</h2>
PCA是一种常见的数据降维算法，其核心思想非常的简单：寻找一个低维的超平面，使所有样本和其在该低维超平面上的投影间的距离和最小，如下图：

[caption id="attachment_759" align="aligncenter" width="1170"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/23796B6B-7ECE-468A-A1B6-E7EFE1ADEF5B.jpg" alt="PCA is not linear regression" width="1170" height="624" class="size-full wp-image-759" /></a> PCA is not linear regression[/caption]

Ng在这页slide上着重强调了PCA和线性回归的区别：线性回归的Cost function重点在回归值和真实值的误差，而PCA着重样本与超平面的投影距离。

<h3>数据预处理</h3>
在使用PCA算法之前，和之前讲过的几种学习算法相似，我们首先需要对样本进行预处理，预处理过程依然是feature scaling/mean normalization的方法，对于输入样本[latex]x^{(1)},x^{(2)},\dots,x^{(m)}[/latex]，求取每个属性的平均值：

<center>[latex]\displaystyle
\mu_j=\frac{1}{m} \sum_{i=1}^{m} x_j^{(i)}
[/latex]</center>

然后对所有样本的各个属性进行替换：

<center>[latex]\displaystyle
x_j^{(i)}=\frac{x_j^{(i)}-\mu_j}{s_j}
[/latex]</center>

其中[latex]s_j[/latex]表示属性[latex]x_j[/latex]的标准差。

<h3>PCA算法</h3>
Ng对PCA算法的讲解非常的概要，都浓缩在这个slide里：

[caption id="attachment_766" align="aligncenter" width="1251"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/243B08FC-6FFC-4351-A677-5B0FAB218904.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/243B08FC-6FFC-4351-A677-5B0FAB218904.jpg" alt="Principal Component Analysis (PCA) algorithm summary" width="1251" height="477" class="size-full wp-image-766" /></a> Principal Component Analysis (PCA) algorithm summary[/caption]

算法主要依赖于SVD矩阵分解：

<ol>
	<li>首先计算出协方差矩阵（covariance matrix）[latex]\Sigma[/latex]</li>
	<li>对协方差矩阵执行SVD矩阵分解，得到矩阵[latex]U\ S\ V[/latex]（SVD矩阵分解详见后文）</li>
	<li>取矩阵[latex]U[/latex]的前[latex]k[/latex]个向量作为新线性空间的一组<a href="http://zh.wikipedia.org/wiki/基_(線性代數)" title="基向量" target="_blank">基向量</a>[latex]U_{reduce}[/latex]
</li
</ol>

<h3>数据维度转换</h3>
得到低维的线性空间后，降维的工作实际上是将原来线性空间中的向量投影到低维线性空间中，对于样本[latex]x^{(i)}[/latex]，映射到低维空间投影[latex]z^{(i)}[/latex]：

<center>[latex]\displaystyle
z^{(i)}=U_{reduce}^T\times x^{(i)}
[/latex]</center>

类似的，将降维后的样本映射回原空间如下：

<center>[latex]\displaystyle
x_{approx}^{(i)}=U_{reduce}\times z^{(i)}
[/latex]</center>

这里使用[latex]x_{approx}[/latex]是因为在降维后损失了一定信息，即使映射回原空间也只是原先样本的近似而无法准确的还原。

[caption id="attachment_773" align="aligncenter" width="1156"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/5BA0587B-59CF-424A-B530-F3225356AA1A.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/5BA0587B-59CF-424A-B530-F3225356AA1A.jpg" alt="向量映射" width="1156" height="670" class="size-full wp-image-773" /></a> 向量映射[/caption]

下图是一个示例，将2维数据降维到1维（直线）后的映射关系，红色代表数据在低维的投影：

[caption id="attachment_784" align="aligncenter" width="474"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/0514D0CD-212F-4CFB-9465-B0EB6DBC25BB.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/0514D0CD-212F-4CFB-9465-B0EB6DBC25BB.jpg" alt="Dimensionality Reduction" width="474" height="474" class="size-full wp-image-784" /></a> Dimensionality Reduction[/caption]

<hr />
<h2>SVD矩阵分解</h2>
虽然在看完Ng的课程后已经足够编写和使用PCA进行数据降维的工作了，但我们也可以看到Ng对PCA背后的数学原理省略了相当多的内容：
<ol>
	<li>为什么要计算协方差矩阵？</li>
	<li>为什么要对协方差矩阵执行SVD分解？</li>
	<li>分解后的结果代表什么？</li>
</ol>
实际上这些内容中包含了相当多的数学工作，应该是出于课程内容难度的考量，Ng没有选择详细的讲解这些内容，如果只是使用PCA，Ng所讲的内容也已经足够了。关于主成分分析的更多原理，参见<a href="http://en.wikipedia.org/wiki/Principal_component_analysis" title="Principal_component_analysis" target="_blank">这里</a>，还有SVD的内容，在<a href="http://en.wikipedia.org/wiki/Singular_value_decomposition" target="_blank">这里</a>（真希望自己当年有好好学线性代数ToT）。

不过，为了对PCA过程有个更好的感觉，至少我们需要对于SVD（奇异值分解）的一些基本性质有所了解。

对于任意[latex]m\times n[/latex]的输入矩阵[latex]A[/latex]，SVD分解结果为：

<center>[latex]\displaystyle
A_{[m\times n]}=U_{[m\times r]}\ \Sigma_{[r\times r]}\ (V_{[n\times r]})^T
[/latex]</center>

分解结果中[latex]U[/latex]为左奇异向量（left singular vectors），[latex]\Sigma[/latex]为奇异值矩阵，[latex]V[/latex]为右奇异向量（right singular vectors）。

矩阵[latex]U,\ V[/latex]中的<strong>列向量</strong>均为正交单位向量，而矩阵[latex]\Sigma[/latex]为对角阵，并且从左上到右下以递减的顺序排序。引用维基百科中的解释：
<blockquote>
奇异值分解在统计中的主要应用为主成分分析（PCA）。数据集的特征值（在SVD中用奇异值表征）按照重要性排列，降维的过程就是舍弃不重要的特征向量的过程，而剩下的特征向量张成空间为降维后的空间。
</blockquote>
SVD的另一种常见的应用场景在推荐系统中，以后有机会再写。
<hr />
<h2>选择合适的k</h2>
在数据降维中一个重要的问题是如何选择合适的[latex]k[/latex]，即应该降到什么维度。一个典型的选择方式是“对数据降维，并且保留原数据99%的方差”，方差被认为是特征中包含信息多少的度量（有时被称为能量energy），形式化为选择最小的[latex]k[/latex]，满足：

<center>[latex]\displaystyle
\frac{\frac{1}{m}\sum_{i=1}^{m}\left \| x^{(i)}-x_{approx}^{(i)} \right \|^2}{\frac{1}{m}\sum_{i=1}^{m}\left \| x^{(i)} \right \|^2}\le 0.01
[/latex]</center>

但是从小到大尝试[latex]k[/latex]再计算上式验证似乎太复杂了，实际上我们可以利用SVD分解得到的矩阵[latex]S[/latex]，把这个上面的过程简化为：

<center>[latex]\displaystyle
\frac{\sum_{i=1}^kS_{ii}}{\sum_{i=1}^mS_{ii}}\ge0.99
[/latex]</center>

美好的SVD，不是么...

<hr />
<h2>举个栗子</h2>
这次Ng的实验中展示了一个使用PCA作为人脸检测预处理的例子，使用的人脸数据看上去是这样的：

[caption id="attachment_786" align="aligncenter" width="420"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/90B96A4B-3ABB-45DC-9307-1F238D58478A.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/90B96A4B-3ABB-45DC-9307-1F238D58478A.jpg" alt="Original faces" width="420" height="435" class="size-full wp-image-786" /></a> Original faces[/caption]

每一个人脸图像的分辨率为36*36，每个像素作为一个灰度特征值则我们将每个人脸图片作为一个1024维的样本进行处理，进行PCA降维至100维，映射回原始空间进行可视化得到了下面的效果：

[caption id="attachment_787" align="aligncenter" width="420"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/11/628C5AE5-306B-4D09-9D84-DB5BAC487DDF.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/11/628C5AE5-306B-4D09-9D84-DB5BAC487DDF.jpg" alt="Recovered faces" width="420" height="435" class="size-full wp-image-787" /></a> Recovered faces[/caption]

可以观察到非常有趣的结果，虽然经过PCA数据维度降低了非常多，但是人脸的五官还是基本保留了下来（这也形象的说明了“主成分”的意义），对后续的学习算法是一个很好的加速。

<hr />
<h2>参考资料</h2>
<ul>
	<li>Machine Learning by Andrew Ng on Coursera</li>
	<li>Mining Massive Datasets by Jure Leskovec, Anand Rajaraman, Jeff Ullman on Coursera</li>
	<li>Pattern recognition, CS, Nanjing University Spring, 2014, Jianxin Wu</li>
	<li>Wikipedia</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>750</wp:post_id>
		<wp:post_date><![CDATA[2014-11-28 14:37:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-28 06:37:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning%e5%b0%8f%e7%bb%934%ef%bc%9a%e4%b8%bb%e6%88%90%e5%88%86%e5%88%86%e6%9e%90%ef%bc%88pca%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pca"><![CDATA[PCA]]></category>
		<category domain="post_tag" nicename="svd"><![CDATA[SVD]]></category>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[pca]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[56]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751093263]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Machine Learning小结(5)：异常检测</title>
		<link>http://blog.kongfy.com/2014/12/machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b/</link>
		<pubDate>Sat, 06 Dec 2014 16:17:23 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=847</guid>
		<description></description>
		<content:encoded><![CDATA[写这篇小结的时候，Ng的课程已经结束了（期待SoA哈哈哈），回顾整个课程内容，虽然Ng有意的屏蔽了大部分的数学内容，但是提纲挈领的为我们展现了常见机器学习算法的基本容貌和<strong>应用技巧</strong>，令人受益良多。从视频、课后问答到编程作业，都完美的示范了一门在线课程应该是什么样子的，不能感谢更多。

回到正题，异常检测，也称为离群点检测，是用来发现一些特征不同于预期的样本，在应用中具有极高的价值。异常检测有多种方法，Ng课程中讲的是基于统计学方法（高斯模型）的异常检测。

<!--more-->

<hr />
<h2>异常检测</h2>
首先复习一下<a href="http://en.wikipedia.org/wiki/Normal_distribution" title="高斯分布" target="_blank">高斯分布（正态分布）</a>：

[caption id="attachment_849" align="aligncenter" width="769"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/12/Empirical_Rule.png"><img src="http://blog.kongfy.com/wp-content/uploads/2014/12/Empirical_Rule.png" alt="Gaussion distribution" width="769" height="558" class="size-full wp-image-849" /></a> Gaussion distribution[/caption]

对于均值为[latex]\mu[/latex]方差为[latex]\sigma^{2}[/latex]的随机变量[latex]X[/latex]，若其服从正态分布，称[latex]X\sim N(\mu,\sigma^{2})[/latex]，概率密度函数为：

<center>[latex]\displaystyle
p(x;\mu,\sigma)=\frac{1}{\sigma \sqrt{2\pi}}\exp\left(-\frac{(x-\mu)^{2}}{2\sigma^{2}}\right)
[/latex]</center>

基于高斯模型的异常检测idea非常的简单：假设样本特征服从高斯分布（分单变量和多变量两种），通过训练集（正常样本）拟合出高斯分布的参数[latex]\mu,\sigma^{2}[/latex]，然后对于预测样本计算出该分布中的概率密度，如果概率小于[latex]\epsilon[/latex]则认为是异常样本。

下图是对两个特征的样本进行异常检测的结果，红色圈出的是检测出的异常样本：

[caption id="attachment_869" align="aligncenter" width="628"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/12/66E71180-425A-49BB-BE66-754319028DEC.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/12/66E71180-425A-49BB-BE66-754319028DEC.jpg" alt="Gaussian distribution contours" width="628" height="475" class="size-full wp-image-869" /></a> Gaussian distribution contours[/caption]

<h3>单变量高斯分布</h3>
使用单变量高斯模型的异常检测中，我们认为样本的每个特征都服从独立的高斯分布，为这些特征单独拟合参数：

<center>[latex]\displaystyle
\mu_j=\frac{1}{m}\sum_{i=1}^{m}x_j^{(i)} \\ \displaystyle
\sigma_j^2=\frac{1}{m}\sum_{i=1}^{m}(x_j^{(i)}-\mu_j)^2
[/latex]</center>

对于样本[latex]x[/latex]，因为我们已经假设特征之间是独立的，则可以计算出样本概率：
<center>[latex]\displaystyle
p(x)=\prod_{j=1}^{n}p(x_j;\mu_j,\sigma_j^2)
[/latex]</center>

当\(p(x)<\epsilon\)时，我们认为该样本是异常的。

<h3>多变量高斯分布</h3>
<a href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution" target="_blank">多变量高斯分布</a>可以发现不同特征间的关联，但是计算开销更高。

[caption id="attachment_866" align="aligncenter" width="1261"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/12/28EBDC63-CA44-48BF-A28D-FB2550412262.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/12/28EBDC63-CA44-48BF-A28D-FB2550412262.jpg" alt="Multivariate Gaussian" width="1261" height="665" class="size-full wp-image-866" /></a> Multivariate Gaussian[/caption]

<h3>特征变换</h3>
那么，如果某个特征不服从高斯分布该怎么办呢？答案是对特征进行变换，让新特征的分布更像高斯分布。

[caption id="attachment_867" align="aligncenter" width="1222"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/12/B16AE4EC-B5AA-42C6-BEE5-36F531A056C4.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/12/B16AE4EC-B5AA-42C6-BEE5-36F531A056C4.jpg" alt="Non-gaussian features" width="1222" height="666" class="size-full wp-image-867" /></a> Non-gaussian features[/caption]

<hr />
<h2>F<sub>1</sub> score</h2>
到这里为止我们都回避了一个重要的问题，如何选定合适的\(\epsilon\)？

和之前的各种学习算法选择参数的方法相同，我们可以在验证集中对参数进行挑选。那么，该如何衡量参数的好坏呢？准确率在异常检测的问题中是不可行的，异常检测问题明显属于类不平衡问题，即属于正常类别的样本要远远多于属于异常类别的样本，在这样的问题中准确率无法很好的衡量算法的效果，试想如果简单预测所有样本都为正常样本，算法仍然可以获得很好的准确率。因此，和其他类不平衡的分类问题一样，我们使用F<sub>1</sub> score来作为算法的评估标准。

F<sub>1</sub> score实际上另外两种评价标准：精度（precision）和召回率（recall）的一种结合使用。精度是算法<strong>精确性</strong>的度量（即标记为正类的元组中实际为正类的元组所占的百分比），召回率是算法<strong>完全性</strong>的度量（即正元组被标记为正的百分比）。

<center>[latex]
\displaystyle precision=\frac{TP}{TP+FP} \\
\displaystyle recall=\frac{TP}{TP+FN}=\frac{TP}{P}
[/latex]</center>

两种度量存在Trade off的关系，有可能通过降低其中一个为代价来提高另一个：

[caption id="attachment_884" align="aligncenter" width="1247"]<a href="http://blog.kongfy.com/wp-content/uploads/2014/12/92C2E408-20CB-4026-89DA-60A6E29B6190.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2014/12/92C2E408-20CB-4026-89DA-60A6E29B6190.jpg" alt="Trading off precision and recall" width="1247" height="694" class="size-full wp-image-884" /></a> Trading off precision and recall[/caption]

F<sub>1</sub> score是精度和召回率的<a href="http://en.wikipedia.org/wiki/Harmonic_mean" title="Harmonic mean" target="_blank">调和均值</a>，它赋予精度和召回率相等的权重：

<center>[latex]
\displaystyle F_1 = \frac{2 \times precision \times recall}{precision + recall}
[/latex]</center>

在异常检测算法中，我们通过在验证集上尝试[latex]\epsilon[/latex]，并通过F<sub>1</sub> score对模型进行评估来得到较好的参数[latex]\epsilon[/latex]。

<hr />
<h2>参考资料</h2>
<ul>
	<li>Machine Learning by Andrew Ng on Coursera</li>
	<li>《数据挖掘 概念与技术（第三版）》Jiawei Han, Micheline Kamber, Jian Pei</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date><![CDATA[2014-12-07 00:17:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-06 16:17:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning%e5%b0%8f%e7%bb%935%ef%bc%9a%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%bc%82%e5%b8%b8%e6%a3%80%e6%b5%8b"><![CDATA[异常检测]]></category>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[异常检测]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[异常检测，也称为离群点检测，是用来发现一些特征不同于预期的样本，在应用中具有极高的价值。异常检测有多种方法，Ng课程中讲的是基于统计学方法（高斯模型）的异常检测。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3752136319]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>全局最小割：Karger&#039;s Min Cut Algorithm</title>
		<link>http://blog.kongfy.com/2015/02/kargermincut/</link>
		<pubDate>Sat, 07 Feb 2015 11:53:53 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=899</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_912" align="aligncenter" width="550"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-3.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-3.png" alt="Cut in an undirected graph" width="550" height="326" class="size-full wp-image-912" /></a> Cut in an undirected graph[/caption]

提到无向图的最小割问题，首先想到的就是<a href="http://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm" target="_blank">Ford-Fulkerson算法</a>解s-t最小割，通过<a href="http://en.wikipedia.org/wiki/Edmonds%E2%80%93Karp_algorithm" target="_blank">Edmonds–Karp</a>实现可以在[latex]O(nm^2)[/latex]时间内解决这个问题（[latex]n[/latex]为图中的顶点数，[latex]m[/latex]为图中的边数）。

但是全局最小割和s-t最小割不同，并没有给定的指定的源点s和汇点t，如果通过Ford-Fulkerson算法来解这一问题，则需要枚举汇点t（共[latex]n-1[/latex]），时间复杂度为[latex]O\left(n^2m^2\right)[/latex]。

Can we do better?

<!--more-->

答案是肯定的，Karger在攻读博士学位期间（Orz...）提出了非常著名的基于随机化的全局最小割算法，算法非常简单，简单到不敢相信它是正确的，算法描述如下：

<ol>
	<li>在图中随机取一条边，将边的两个端点合并（contraction），同时消除所有由于合并而形成自环的边</li>
[caption id="attachment_930" align="aligncenter" width="601"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-4.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/02/kargers-algorithm-4.png" alt="Contraction" width="601" height="179" class="size-full wp-image-930" /></a> Contraction[/caption]
	<li>重复步骤1直到图中仅剩下两个点</li>
	<li>将最终两点之间的边作为找的割返回</li>
</ol>

这样一次运算的复杂度为[latex]O(m)[/latex]，我们可以看到，这样随机的过程返回的结果是不确定的，找到的割并不一定是最小的，事实上可以证明，一次运行找到最小割的概率最低为[latex]1/{{n}\choose{2}}[/latex]，那么，将上述算法重复执行[latex]{{n}\choose{2}}\ln n[/latex]次，我们可以以低于的[latex]1/n[/latex]的失败概率获得最小割，这就是Karger全局最小割算法的基本思想，时间复杂度为[latex]O(n^2m\ln n)[/latex]。（算法的证明很有意思，偷懒不写了哈哈，可以在参考资料中查到）

下面的C++实现仅仅是在我学习Karger算法的过程中为了理解算法而做的，因此效率很低，仅用来参考，为了简化实现，我通过暴力随机顶点对并检查的方法生成随机边，可以通过更有效的方法生成随机边来加速算法执行。

<code lang="cpp">
#include <vector>
#include <list>
#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <ctime>
#include <assert.h>

using namespace std;

class Graph
{
public:
    void addVertex()
    {
        _storage.push_back(list<int>());
    }

    void addEdge(int vertex, int adjacent)
    {
        _storage[vertex].push_back(adjacent);
    }

    int vertices()
    {
        return _storage.size();
    }

    int edges()
    {
        int count = 0;
        for (int i = 0; i < vertices(); ++i) {
            count += _storage[i].size();
        }
        return count;
    }

    bool isEdgeExist(int s, int t)
    {
        list<int> &edges = _storage[s];
        for (int adjacent : edges) {
            if (adjacent == t) {
                return true;
            }
        }

        return false;
    }

    list<int> &edges_for_vertex(int vertex)
    {
        return _storage[vertex];
    }

private:
    vector<list<int> > _storage;
};

class UnionFind
{
public:
    UnionFind(int size)
    {
        _storage.resize(size);
        for (int i = 0; i < size; ++i) {
            _storage[i] = i;
        }
    }

    void UFUnion(int x, int y)
    {
        int root_x = UFFind(x);
        int root_y = UFFind(y);

        if (root_x != root_y) {
            _storage[root_y] = root_x;
        }
    }

    int UFFind(int x)
    {
        if (_storage[x] == x) {
            return x;
        }

        int root = UFFind(_storage[x]);
        _storage[x] = root; // path compress
        return root;
    }

private:
    vector<int> _storage;
};

class MinCut
{
public:
    int kargerMinCut(Graph &graph)
    {
        int n = graph.vertices();
        int m = graph.edges();
        int t = n * n * (int)ceil(log(n));

        cout << "Vertices : " << n << endl;
        cout << "Edges    : " << m << endl;
        cout << "Repeat   : " << t << endl;

        int cut = INT_MAX;

        // repeat n^2*ln(n) times
        for (int i = 0; i < t; ++i) {
            UnionFind ufset(n);

            // after n-2 times contraction, there would be exactly 2 super vertices.
            for (int j = 0; j < n - 2; ++j) {
                // pick a random edge
                int x, y;
                do {
                    x = rand() % n;
                    y = rand() % n;
                } while (!(graph.isEdgeExist(x, y) && ufset.UFFind(x) != ufset.UFFind(y)));

                // do the contraction
                ufset.UFUnion(x, y);
            }

            cut = min(cut, countCut(graph, ufset));
        }

        return cut;
    }

private:
    int countCut(Graph &graph, UnionFind &ufset)
    {
        int count = 0;
        int n = graph.vertices();

        for (int i = 0; i < n; ++i) {
            list<int> &edges = graph.edges_for_vertex(i);
            for (int adjacent : edges) {
                if (ufset.UFFind(i) != ufset.UFFind(adjacent)) {
                    count ++;
                }
            }
        }

        assert(~(count & 1));
        return count >> 1;
    }
};

int main(int argc, char *argv[])
{
    ifstream fin("kargerMinCut.txt");
    string line;
    stringstream stream;

    Graph graph;

    while (getline(fin, line)) {
        int vertex, adjacent;

        stream.clear();
        stream << line;
        stream >> vertex;
        graph.addVertex();
        while (stream >> adjacent) {
            graph.addEdge(vertex - 1, adjacent - 1);
        }
    }

    MinCut mincut;
    srand((unsigned)clock());
    cout << mincut.kargerMinCut(graph) << endl;

    return 0;
}
</code>

简单解释一下：对于边的contraction操作我使用并查集来模拟，非常类似于Kruskal算法的实现。

对于算法的执行过程还有一些更加高级的优化可以使得整个计算过程大大加速，不过这些优化超出了本文的范围，想了解的同学可以看<a href="http://www.cs.tau.ac.il/~zwick/grad-algo-08/gmc.pdf" target="_blank">这里</a>，时间复杂度下降到了[latex]O(n^2\log ^3n)[/latex]。

使用的<a href="http://blog.kongfy.com/wp-content/uploads/2015/02/kargerMinCut.txt">测试数据</a>

<hr />
<h2>参考资料</h2>
<ul>
	<li>《Algorithm Design》 Jon Kleinberg, Eva Tardos</li>
	<li><a href="http://www.maillard.it/blog/kargers-algorithm/" title="Karger's Algorithm for Minimum Cuts" target="_blank">Karger's Algorithm for Minimum Cuts</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>899</wp:post_id>
		<wp:post_date><![CDATA[2015-02-07 19:53:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-07 11:53:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kargermincut]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%b0%8f%e5%89%b2"><![CDATA[最小割]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[全局最小割]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[66]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751049505]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>795</wp:comment_id>
			<wp:comment_author><![CDATA[z3]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zhfyyq@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[128.61.42.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-02-14 05:22:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-02-13 21:22:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[do {
                    s = rand() % n;
                    vector edges = graph.edges_for_vertex(s);
                    t = edges[rand() % edges.size()];
                } while (uf.find(s) == uf.find(t));

随机选边那里优化一下并不难。选出第一个 vertex，然后直接从它的 edge list 里再随机就好了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229189]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>796</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.kongfy.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.205.234.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-02-14 20:56:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-02-14 12:56:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嗯，优化的方法有很多，我只是写了一个最简单粗暴的。另外，你这种修改随机出每条边的概率不相等，感觉不是很好，这个条件在算法正确性证明中十分重要。比较好的优化应该是通过边的编号来随机，需要多占用一些空间。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>795</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229189]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2016229256]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>有向图强连通分支：Kosaraju&#039;s algorithm</title>
		<link>http://blog.kongfy.com/2015/03/%e6%9c%89%e5%90%91%e5%9b%be%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af%ef%bc%9akosarajus-algorithm/</link>
		<pubDate>Mon, 16 Mar 2015 03:17:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=941</guid>
		<description></description>
		<content:encoded><![CDATA[有向图强连通分支算是个基础算法，不过总是忘记，写下来备忘。

无向图强连通分支非常简单，使用图的遍历算法（DFS或BFS）即可，而有向图的强连通分支计算则要复杂一些，Kosaraju's algorithm实现了[latex]O(n+m)[/latex]时间复杂度的有向图强连通分支算法。

算法的核心思想在于：从有向图中任何一个点出发做DFS，必然能从图中“拖”出一个点集，和无向图中不同的是，这个点集不一定构成强连通分支，但是如果我们能通过一个合适的顺序进行DFS（“sink” vertex），则可以依次把每一个强连通分支“拖”出来，得到正确的结果，那么算法的要点则在于如何寻找这个合适的顺序。

<!--more-->

算法通过两次DFS来求解，步骤如下：
<ol>
	<li>对原图[latex]G[/latex]做反转(reverse)操作，即将所有有向边逆置，得到图[latex]G^{rev}[/latex]</li>
	<li>在图[latex]G^{rev}[/latex]上做<strong>后序</strong>的DFS，得到点遍历顺序</li>
	<li>按照上一步中得到的遍历顺序，从大到小在原图[latex]G[/latex]中通过DFS依次“拖”出强连通分支</li>
</ol>

运行过程如下图例，[latex]f(v)[/latex]代表点在[latex]G^{rev}[/latex]的遍历结束时间，从9号点开始DFS。
[caption id="attachment_963" align="aligncenter" width="843"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/B0842D09-98C3-4F8C-B551-315CBAC0874E.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/B0842D09-98C3-4F8C-B551-315CBAC0874E.jpg" alt="Exampl  e execution of the strongly connected components algorithm." width="843" height="191" class="size-full wp-image-963" /></a> Exampl  e execution of the strongly connected components algorithm.[/caption]

记得刚学习这个算法时一直有的一个疑惑：为什么在第一遍DFS时一定要在图[latex]G^{rev}[/latex]上做么？难道不能通过在原图[latex]G[/latex]上DFS的顺序<strong>从小到大</strong>的进行第二次DFS么？仔细研究算法正确性的证明，不难发现这个想法是错误的。

该算法正确性证明的核心在于对于图[latex]G[/latex]中任意两个相邻的强连通分支[latex]C_1[/latex]和[latex]C_2[/latex]且存在边[latex](i,j)[/latex]满足[latex]i \in C_1 \land j \in C_2[/latex]（在强连通分支的DAG中方向为[latex]C_1 \to C_2[/latex]），可以证明：

<center>$$\displaystyle \max_{v\in C_1}f(v) < \max_{v\in C_2}f(v)$$</center>

\(f(v)\)代表点在[latex]G^{rev}[/latex]的遍历结束时间，因此，在图G中具有最大[latex]f(v)[/latex]的点一定为“sink” vertex。

那么现在来看看之前的想法错在哪里了，令[latex]f'(v)[/latex]代表点在[latex]G[/latex]的遍历结束时间，如果按照从小到大的顺序在[latex]G[/latex]可以依次“拖”出强连通分支，则我们需要证明(强连通分支[latex]C_1[/latex]和[latex]C_2[/latex]的定义同上)：

<center>[latex]\displaystyle \min_{v\in C_1}f(v) > \min_{v\in C_2}f(v)[/latex]</center>

显然这是不对的...反例见下图中强连通分支{9，6，3}和{8，5，2}，[latex]f'(3)=1[/latex]比{8，5，2}中的完成时间都要小，如果从该点开始“拖”强连通分支得到的是错误的结果{9，6，3，8，5，2}。

[caption id="attachment_961" align="aligncenter" width="536"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/9A6FEF4E-FD08-4AF3-89BC-398920C58BAB.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/9A6FEF4E-FD08-4AF3-89BC-398920C58BAB.jpg" alt="遍历顺序" width="536" height="210" class="size-full wp-image-961" /></a> 遍历顺序[/caption]

所以[latex]G^{rev}[/latex]的计算是必不可少的。

代码如下，采用递归实现DFS，在实际使用中容易造成栈溢出，修改为非递归实现即可。
<code lang="cpp">
#include <vector>
#include <list>
#include <stack>
#include <iostream>
#include <fstream>
#include <cassert>
#include <unordered_map>
#include <algorithm>

using namespace std;

class Graph
{
public:
    Graph(int n)
    {
        _storage.resize(n);
    }

    void addVertex()
    {
        _storage.push_back(list<int>());
    }

    void addEdge(int vertex, int adjacent)
    {
        _storage[vertex].push_back(adjacent);
    }

    int vertices()
    {
        return _storage.size();
    }

    int edges()
    {
        int count = 0;
        for (int i = 0; i < vertices(); ++i) {
            count += _storage[i].size();
        }
        return count;
    }

    list<int> &edges_for_vertex(int vertex)
    {
        return _storage[vertex];
    }

private:
    vector<list<int> > _storage;
};

class SCC
{
public:
    vector<int> calculateSCC(Graph &g)
    {
        int n = g.vertices();
        Graph g_rev(n);

        for (int v = 0; v < n; ++v) {
            list<int> &edges = g.edges_for_vertex(v);
            for (int u : edges) {
                g_rev.addEdge(u, v);
            }
        }

        assert(g.edges() == g_rev.edges());

        stack<int> s;
        vector<bool> map(n, false);

        // first pass
        for (int i = 0; i < n; ++i) {
            if (!map[i]) {
                dfs_order(g_rev, i, s, map);
            }
        }

        vector<int> ssc(n, -1);

        // second pass
        while (!s.empty()) {
            int i = s.top();
            s.pop();

            if (ssc[i] < 0) {
                dfs_ssc(g, i, i, ssc);
            }
        }

        return ssc;
    }

private:
    void dfs_order(Graph &g, int v, stack<int> &s, vector<bool> &map)
    {
        map[v] = true;

        list<int> &edges = g.edges_for_vertex(v);
        for (int u : edges) {
            if (!map[u]) {
                dfs_order(g, u, s, map);
            }
        }

        s.push(v);
    }

    void dfs_ssc(Graph &g, int v, int leader, vector<int> &ssc)
    {
        ssc[v] = leader;

        list<int> &edges = g.edges_for_vertex(v);
        for (int u : edges) {
            if (ssc[u] < 0) {
                dfs_ssc(g, u, leader, ssc);
            }
        }
    }
};

vector<int> rankSCC(vector<int> &scc)
{
    unordered_map<int, int> count;

    for (int i = 0; i < scc.size(); ++i) {
        if (count.find(scc[i]) != count.end()) {
            count[scc[i]] += 1;
        } else {
            count[scc[i]] = 1;
        }
    }

    vector<int> rank;
    for (auto it = count.begin(); it != count.end(); ++it) {
        rank.push_back(it->second);
    }

    sort(rank.begin(), rank.end());
    return rank;
}

int main(int argc, char *argv[])
{
    ifstream fin("SCC.txt");


    int n = 875714;
    Graph graph(n);

    while (fin) {
        int s = 0, t = 0;
        fin >> s >> t;
        if (s != 0 && t != 0) {
            graph.addEdge(s - 1, t - 1);
        }
    }

    cout << graph.edges() << " lines loaded." << endl;

    SCC solver;
    vector<int> scc = solver.calculateSCC(graph);
    vector<int> rank = rankSCC(scc);

    int total = 0;
    for (int i = 0; i < rank.size(); ++i) {
        total += rank[i];
    }
    assert(total == n);

    for (int i = rank.size() - 1; i >= rank.size() - 5; --i) {
        cout << rank[i] << ',';
    }
    cout << endl;

    return 0;
}
</code>

好吧，我承认我就是为了凑数的...

<hr />
<h2>参考资料</h2>
<ul>
	<li>Algorithms: Design and Analysis, Part 1 by Tim Roughgarden on Coursera</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>941</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 11:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 03:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%89%e5%90%91%e5%9b%be%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af%ef%bc%9akosarajus-algorithm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%bc%ba%e8%bf%9e%e9%80%9a%e5%88%86%e6%94%af"><![CDATA[强连通分支]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[强连通分支 Kosaraju]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[Kosaraju's algorithm实现了O(n+m)时间复杂度的有向图强连通分支算法。其核心思想在于：从有向图中任何一个点出发做DFS，必然能从图中“拖”出一个点集，如果我们能通过一个合适的顺序进行DFS，则可以依次把每一个强连通分支“拖”出来，得到正确的结果，那么算法的要点则在于如何寻找这个合适的顺序。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[63]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751075353]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[转]Linux进程调度：CFS调度器的设计框架</title>
		<link>http://blog.kongfy.com/2015/03/%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6/</link>
		<pubDate>Wed, 18 Mar 2015 08:30:34 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=970</guid>
		<description></description>
		<content:encoded><![CDATA[一直计划要写一篇Linux内核中关于进程调度的文章，拖欠了很久，准备动手写的时候发现了此文，看过以后觉得着实没有自己重新写的必要了，转载于此。

原文链接：<a href="http://blog.csdn.net/zhoudaxia/article/details/7375668" title="Linux进程调度(1)：CFS调度器的设计框架" target="_blank">Linux进程调度(1)：CFS调度器的设计框架</a>

<!--more-->

<hr/>
<h2>概述</h2>

    对于分时操作系统而言，表面上看起来是多个进程同时在执行，而在系统内部则进行着从一个进程到另一个进程的切换动作。这样的进程并发执行涉及到进程切换（process switch）和进程调度（process scheduling）两大问题。其中进程调度是操作系统的核心功能，它是一个非常复杂的过程，需要多个系统协同工作完成。Linux作为一个通用操作系统，其调度器的设计一直是一个颇有挑战性的课题。一方面它涉及应用Linux的使用模型。尽管Linux最初开发为桌面操作系统环境，但现在在服务器、微型嵌入式设备、主机和超级计算机中都能发现它，无疑这些领域的调度负载有很大差异。另一方面，它要考虑平台方面的技术进步，包括架构（多处理、对称多线程、非一致内存访问 [NUMA] 和虚拟化）。另外，这里还要考虑交互性（用户响应能力）和整体公平性之间的平衡。通常Linux调度器将进程分为三类：

<ol>
    <li>交互式进程：此类进程有大量的人机交互，因此进程不断地处于睡眠状态，等待用户输入。典型的应用比如编辑器vi。此类进程对系统响应时间要求比较高，否则用户会感觉系统反应迟缓。</li>
    <li>批处理进程：此类进程不需要人机交互，在后台运行，需要占用大量的系统资源。但是能够忍受响应延迟。比如编译器。</li>
    <li>实时进程：实时对调度延迟的要求最高，这些进程往往执行非常重要的操作，要求立即响应并执行。比如视频播放软件或飞机飞行控制系统，很明显这类程序不能容忍长时间的调度延迟，轻则影响电影放映效果，重则机毁人亡。</li>
</ol>

    根据进程的不同分类Linux采用不同的调度策略。对于实时进程，采用FIFO或者Round Robin的调度策略。对于普通进程，则需要区分交互式和批处理式的不同。传统Linux调度器提高交互式应用的优先级，使得它们能更快地被调度。而CFS和RSDL等新的调度器的核心思想是“完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持。注意Linux通过将进程和线程调度视为一个，同时包含二者。进程可以看做是单个线程，但是进程可以包含共享一定资源（代码和/或数据）的多个线程。因此进程调度也包含了线程调度的功能。

<hr />
<h2>Linux调度器的简史</h2>

    <h3>Linux 2.4之前的内核调度器</h3>

    早期的Linux进程调度器使用了最低的设计，它显然不关注具有很多处理器的大型架构，更不用说是超线程了。1.2 Linux调度器使用了环形队列用于可运行的任务管理，使用循环调度策略。 此调度器添加和删除进程效率很高（具有保护结构的锁）。简而言之，该调度器并不复杂但是简单快捷。Linux版本2.2引入了调度类的概念，允许针对实时任务、非抢占式任务、非实时任务的调度策略。2.2 调度器还包括对称多处理 (SMP) 支持。

    <h3>Linux 2.4的调度器</h3>

    Linux2.4.18中使用的调度器采用基于优先级的设计，这个调度器和Linus在1992年发布的调度器没有大的区别。该调度器的 pick next 算法非常简单：对 runqueue 中所有进程的优先级进行依次进行比较，选择最高优先级的进程作为下一个被调度的进程。(Runqueue 是 Linux 内核中保存所有就绪进程的队列) 。术语 pick next 用来指从所有候选进程中挑选下一个要被调度的进程的过程。

    每个进程被创建时都被赋予一个时间片。时钟中断递减当前运行进程的时间片，当进程的时间片被用完时，它必须等待重新赋予时间片才能有机会运行。Linux2.4 调度器保证只有当所有 RUNNING 进程的时间片都被用完之后，才对所有进程重新分配时间片。这段时间被称为一个epoch。这种设计保证了每个进程都有机会得到执行。每个epoch中，每个进程允许执行到其时间切片用完。如果某个进程没有使用其所有的时间切片，那么剩余时间切片的一半将被添加到新时间切片使其在下个epoch中可以执行更长时间。调度器只是迭代进程，应用goodness函数（指标）决定下面执行哪个进程。当然，各种进程对调度的需求并不相同，Linux 2.4调度器主要依靠改变进程的优先级，来满足不同进程的调度需求。事实上，所有后来的调度器都主要依赖修改进程优先级来满足不同的调度需求。

    <strong>实时进程</strong>：实时进程的优先级是静态设定的，而且始终大于普通进程的优先级。因此只有当 runqueue 中没有实时进程的情况下，普通进程才能够获得调度。实时进程采用两种调度策略，SCHED_FIFO 和 SCHED_RR。FIFO 采用先进先出的策略，对于所有相同优先级的进程，最先进入 runqueue 的进程总能优先获得调度；Round Robin采用更加公平的轮转策略，使得相同优先级的实时进程能够轮流获得调度。

    <strong>普通进程</strong>：对于普通进程，调度器倾向于提高交互式进程的优先级，因为它们需要快速的用户响应。普通进程的优先级主要由进程描述符中的 Counter 字段决定 (还要加上 nice 设定的静态优先级) 。进程被创建时子进程的 counter 值为父进程 counter 值的一半，这样保证了任何进程不能依靠不断地 fork() 子进程从而获得更多的执行机会。

    Linux2.4调度器是如何提高交互式进程的优先级的呢？如前所述，当所有 RUNNING 进程的时间片被用完之后，调度器将重新计算所有进程的 counter 值，所有进程不仅包括 RUNNING 进程，也包括处于睡眠状态的进程。处于睡眠状态的进程的 counter 本来就没有用完，在重新计算时，他们的 counter 值会加上这些原来未用完的部分，从而提高了它们的优先级。交互式进程经常因等待用户输入而处于睡眠状态，当它们重新被唤醒并进入 runqueue 时，就会优先于其它进程而获得 CPU。从用户角度来看，交互式进程的响应速度就提高了。

    该调度器的主要缺点：
<ul>
    	<li>可扩展性不好：调度器选择进程时需要遍历整个 runqueue 从中选出最佳人选，因此该算法的执行时间与进程数成正比。另外每次重新计算 counter 所花费的时间也会随着系统中进程数的增加而线性增长，当进程数很大时，更新 counter 操作的代价会非常高，导致系统整体的性能下降。</li>
    	<li>高负载系统上的调度性能比较低：2.4的调度器预分配给每个进程的时间片比较大，因此在高负载的服务器上，该调度器的效率比较低，因为平均每个进程的等待时间于该时间片的大小成正比。</li>
    	<li>交互式进程的优化并不完善：Linux2.4识别交互式进程的原理基于以下假设，即交互式进程比批处理进程更频繁地处于SUSPENDED状态。然而现实情况往往并非如此，有些批处理进程虽然没有用户交互，但是也会频繁地进行IO操作，比如一个数据库引擎在处理查询时会经常地进行磁盘IO，虽然它们并不需要快速地用户响应，还是被提高了优先级。当系统中这类进程的负载较重时，会影响真正的交互式进程的响应时间。</li>
    	<li>对实时进程的支持不够：Linux2.4内核是非抢占的，当进程处于内核态时不会发生抢占，这对于真正的实时应用是不能接受的。</li>
</ul>
    为了解决这些问题，Ingo Molnar开发了新的O(1)调度器，在CFS和RSDL之前，这个调度器不仅被Linux2.6采用，还被backport到Linux2.4中，很多商业的发行版本都采用了这个调度器。

    <h3>Linux 2.6的O(1)调度器</h3>

    从名字就可以看出O(1)调度器主要解决了以前版本中的扩展性问题。O(1)调度算法所花费的时间为常数，与当前系统中的进程个数无关。此外Linux 2.6内核支持内核态抢占，因此更好地支持了实时进程。相对于前任，O(1)调度器还更好地区分了交互式进程和批处理式进程。Linux 2.6内核也支持三种调度策略。其中SCHED_FIFO和SCHED_RR用于实时进程，而SCHED_NORMAL用于普通进程。O(1)调度器在两个方面修改了Linux 2.4调度器，一是进程优先级的计算方法；二是pick next算法。O(1)调度器跟踪运行队列中可运行的任务（实际上，每个优先级水平有两个运行队列，一个用于活动任务，一个用于过期任务）， 这意味着要确定接下来执行的任务，调度器只需按优先级将下一个任务从特定活动的运行队列中取出即可。

    <strong>普通进程的优先级计算</strong>

    不同类型的进程应该有不同的优先级。每个进程与生俱来（即从父进程那里继承而来）都有一个优先级，我们将其称为静态优先级。普通进程的静态优先级范围从100到139，100为最高优先级，139 为最低优先级，0－99保留给实时进程。当进程用完了时间片后，系统就会为该进程分配新的时间片（即基本时间片），静态优先级本质上决定了时间片分配的大小。静态优先级和基本时间片的关系如下：
<center>    静态优先级<120，基本时间片=max((140-静态优先级)*20, MIN_TIMESLICE)
    静态优先级>=120，基本时间片=max((140-静态优先级)*5, MIN_TIMESLICE)
</center>

    其中MIN_TIMESLICE为系统规定的最小时间片。从该计算公式可以看出，静态优先级越高（值越低），进程得到的时间片越长。其结果是，优先级高的进程会获得更长的时间片，而优先级低的进程得到的时间片则较短。进程除了拥有静态优先级外，还有动态优先级，其取值范围是100到139。当调度程序选择新进程运行时就会使用进程的动态优先级，动态优先级和静态优先级的关系可参考下面的公式：
<center>动态优先级=max(100 , min(静态优先级 – bonus + 5) , 139)</center>

    从上面看出，动态优先级的生成是以静态优先级为基础，再加上相应的惩罚或奖励(bonus)。这个bonus并不是随机的产生，而是根据进程过去的平均睡眠时间做相应的惩罚或奖励。所谓平均睡眠时间（sleep_avg，位于task_struct结构中）就是进程在睡眠状态所消耗的总时间数，这里的平均并不是直接对时间求平均数。平均睡眠时间随着进程的睡眠而增长，随着进程的运行而减少。因此，平均睡眠时间记录了进程睡眠和执行的时间，它是用来判断进程交互性强弱的关键数据。如果一个进程的平均睡眠时间很大，那么它很可能是一个交互性很强的进程。反之，如果一个进程的平均睡眠时间很小，那么它很可能一直在执行。另外，平均睡眠时间也记录着进程当前的交互状态，有很快的反应速度。比如一个进程在某一小段时间交互性很强，那么sleep_avg就有可能暴涨（当然它不能超过 MAX_SLEEP_AVG），但如果之后都一直处于执行状态，那么sleep_avg就又可能一直递减。理解了平均睡眠时间，那么bonus的含义也就显而易见了。交互性强的进程会得到调度程序的奖励（bonus为正），而那些一直霸占CPU的进程会得到相应的惩罚（bonus为负）。其实bonus相当于平均睡眠时间的缩影，此时只是将sleep_avg调整成bonus数值范围内的大小。可见平均睡眠时间可以用来衡量进程是否是一个交互式进程。如果满足下面的公式，进程就被认为是一个交互式进程：

<center>动态优先级≤3*静态优先级/4 + 28</center>

    平均睡眠时间是进程处于等待睡眠状态下的时间，该值在进程进入睡眠状态时增加，而进入RUNNING状态后则减少。该值的更新时机分布在很多内核函数内：时钟中断scheduler_tick()；进程创建；进程从TASK_INTERRUPTIBLE状态唤醒；负载平衡等。

    <strong>实时进程的优先级计算</strong>

    实时进程的优先级由sys_sched_setschedule()设置。该值不会动态修改，而且总是比普通进程的优先级高。在进程描述符中用rt_priority域表示。

    <strong>pick next算法</strong>

    普通进程的调度选择算法基于进程的优先级，拥有最高优先级的进程被调度器选中。2.4中，时间片counter同时也表示了一个进程的优先级。2.6中时间片用任务描述符中的time_slice域表示，而优先级用prio（普通进程）或者rt_priority（实时进程）表示。调度器为每一个CPU维护了两个进程队列数组：指向活动运行队列的active数组和指向过期运行队列的expire数组。数组中的元素着保存某一优先级的进程队列指针。系统一共有140个不同的优先级，因此这两个数组大小都是140。它们是按照先进先出的顺序进行服务的。被调度执行的任务都会被添加到各自运行队列优先级列表的末尾。每个任务都有一个时间片，这取决于系统允许执行这个任务多长时间。运行队列的前100个优先级列表保留给实时任务使用，后40个用于用户任务，参见下图：

[caption id="attachment_976" align="aligncenter" width="511"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322504982k3y.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322504982k3y.gif" alt="调度器的运行队列结构" width="511" height="298" class="size-full wp-image-976" /></a> 调度器的运行队列结构[/caption]

    当需要选择当前最高优先级的进程时，2.6调度器不用遍历整个runqueue，而是直接从active数组中选择当前最高优先级队列中的第一个进程。假设当前所有进程中最高优先级为50（换句话说，系统中没有任何进程的优先级小于50）。则调度器直接读取 active[49]，得到优先级为50的进程队列指针。该队列头上的第一个进程就是被选中的进程。这种算法的复杂度为O(1)，从而解决了2.4调度器的扩展性问题。为了实现O(1)算法active数组维护了一个由5个32位的字（140个优先级）组成的bitmap，当某个优先级别上有进程被插入列表时，相应的比特位就被置位。 sched_find_first_bit()函数查询该bitmap，返回当前被置位的最高优先级的数组下标。在上例中sched_find_first_bit函数将返回49。在IA处理器上可以通过bsfl等指令实现。可见查找一个任务来执行所需要的时间并不依赖于活动任务的个数，而是依赖于优先级的数量。这使得 2.6 版本的调度器成为一个复杂度为 O(1) 的过程，因为调度时间既是固定的，而且也不会受到活动任务个数的影响。

    为了提高交互式进程的响应时间，O(1)调度器不仅动态地提高该类进程的优先级，还采用以下方法：每次时钟tick中断时，进程的时间片(time_slice)被减一。当time_slice为0时，表示当前进程的时间片用完，调度器判断当前进程的类型，如果是交互式进程或者实时进程，则重置其时间片并重新插入active数组。如果不是交互式进程则从active数组中移到expired数组，并根据上述公式重新计算时间片。这样实时进程和交互式进程就总能优先获得CPU。然而这些进程不能始终留在active数组中，否则进入expire数组的进程就会产生饥饿现象。当进程已经占用CPU时间超过一个固定值后，即使它是实时进程或者交互式进程也会被移到expire数组中。当active数组中的所有进程都被移到expire数组中后，调度器交换active数组和expire数组。因此新的active数组又恢复了初始情况，而expire数组为空，从而开始新的一轮调度。

    Linux 2.6调度器改进了前任调度器的可扩展性问题，schedule()函数的时间复杂度为O(1)。这取决于两个改进：

<ol>
    	<li>Pick next算法借助于active数组，无需遍历runqueue；</li>
    	<li>取消了定期更新所有进程counter的操作，动态优先级的修改分布在进程切换，时钟tick中断以及其它一些内核函数中进行。</li>
</ol>

    O(1)调度器区分交互式进程和批处理进程的算法与以前虽大有改进，但仍然在很多情况下会失效。有一些著名的程序总能让该调度器性能下降，导致交互式进程反应缓慢。例如fiftyp.c, thud.c, chew.c, ring-test.c, massive_intr.c等。而且O(1)调度器对NUMA支持也不完善。为了解决这些问题，大量难以维护和阅读的复杂代码被加入Linux2.6.0的调度器模块，虽然很多性能问题因此得到了解决，可是另外一个严重问题始终困扰着许多内核开发者，那就是代码的复杂度问题。很多复杂的代码难以管理并且对于纯粹主义者而言未能体现算法的本质。

    为了解决 O(1) 调度器面临的问题以及应对其他外部压力， 需要改变某些东西。这种改变来自Con Kolivas的内核补丁staircase scheduler（楼梯调度算法），以及改进的RSDL（Rotating Staircase Deadline Scheduler）。它为调度器设计提供了一个新的思路。Ingo Molnar在RSDL之后开发了CFS，并最终被2.6.23内核采用。接下来我们开始介绍这些新一代调度器。

<hr/>
    <h2>Linux 2.6的新一代调度器CFS</h2>

    <h3>楼梯调度算法staircase scheduler</h3>

    楼梯算法(SD)在思路上和O(1)算法有很大不同，它抛弃了动态优先级的概念。而采用了一种完全公平的思路。前任算法的主要复杂性来自动态优先级的计算，调度器根据平均睡眠时间和一些很难理解的经验公式来修正进程的优先级以及区分交互式进程。这样的代码很难阅读和维护。楼梯算法思路简单，但是实验证明它对应交互式进程的响应比其前任更好，而且极大地简化了代码。

    和O(1)算法一样，楼梯算法也同样为每一个优先级维护一个进程列表，并将这些列表组织在active数组中。当选取下一个被调度进程时，SD算法也同样从active数组中直接读取。与O(1)算法不同在于，当进程用完了自己的时间片后，并不是被移到expire数组中。而是被加入active数组的低一优先级列表中，即将其降低一个级别。不过请注意这里只是将该任务插入低一级优先级任务列表中，任务本身的优先级并没有改变。当时间片再次用完，任务被再次放入更低一级优先级任务队列中。就象一部楼梯，任务每次用完了自己的时间片之后就下一级楼梯。任务下到最低一级楼梯时，如果时间片再次用完，它会回到初始优先级的下一级任务队列中。比如某进程的优先级为1，当它到达最后一级台阶140后，再次用完时间片时将回到优先级为2的任务队列中，即第二级台阶。不过此时分配给该任务的time_slice将变成原来的2倍。比如原来该任务的时间片time_slice为10ms，则现在变成了20ms。基本的原则是，当任务下到楼梯底部时，再次用完时间片就回到上次下楼梯的起点的下一级台阶。并给予该任务相同于其最初分配的时间片。总结如下：设任务本身优先级为P，当它从第N级台阶开始下楼梯并到达底部后，将回到第N+1级台阶。并且赋予该任务N+1倍的时间片。

    以上描述的是普通进程的调度算法，实时进程还是采用原来的调度策略，即FIFO或者Round Robin。

    楼梯算法能避免进程饥饿现象，高优先级的进程会最终和低优先级的进程竞争，使得低优先级进程最终获得执行机会。对于交互式应用，当进入睡眠状态时，与它同等优先级的其他进程将一步一步地走下楼梯，进入低优先级进程队列。当该交互式进程再次唤醒后，它还留在高处的楼梯台阶上，从而能更快地被调度器选中，加速了响应时间。

    楼梯算法的优点：从实现角度看，SD基本上还是沿用了O(1)的整体框架，只是删除了O(1)调度器中动态修改优先级的复杂代码；还淘汰了expire数组，从而简化了代码。它最重要的意义在于证明了完全公平这个思想的可行性。

    <h3>RSDL（Rotating Staircase Deadline Scheduler）</h3>

    RSDL也是由Con Kolivas开发的，它是对SD算法的改进。核心的思想还是“完全公平”。没有复杂的动态优先级调整策略。RSDL重新引入了expire数组。它为每一个优先级都分配了一个 “组时间配额”，记为Tg；同一优先级的每个进程都拥有同样的"优先级时间配额"，用Tp表示。当进程用完了自身的Tp时，就下降到下一优先级进程组中。这个过程和SD相同，在RSDL中这个过程叫做minor rotation（次轮询）。请注意Tp不等于进程的时间片，而是小于进程的时间片。下图表示了minor rotation。进程从priority1的队列中一步一步下到priority140之后回到priority2的队列中，这个过程如下图左边所示，然后从priority 2开始再次一步一步下楼，到底后再次反弹到priority3队列中，如下图所示。

[caption id="attachment_977" align="aligncenter" width="512"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/0_133225068296B9.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/0_133225068296B9.gif" alt="RSDL的次轮询过程" width="512" height="310" class="size-full wp-image-977" /></a> RSDL的次轮询过程[/caption]

    在SD算法中，处于楼梯底部的低优先级进程必须等待所有的高优先级进程执行完才能获得CPU。因此低优先级进程的等待时间无法确定。RSDL中，当高优先级进程组用完了它们的Tg(即组时间配额)时，无论该组中是否还有进程Tp尚未用完，所有属于该组的进程都被强制降低到下一优先级进程组中。这样低优先级任务就可以在一个可以预计的未来得到调度。从而改善了调度的公平性。这就是RSDL中Deadline代表的含义。

    进程用完了自己的时间片time_slice时（下图中T2），将放入expire数组指向的对应初始优先级队列中(priority 1)。

[caption id="attachment_978" align="aligncenter" width="572"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322508185z4S.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322508185z4S.gif" alt="时间片用完时的处理" width="572" height="295" class="size-full wp-image-978" /></a> 时间片用完时的处理[/caption]

    当active数组为空，或者所有的进程都降低到最低优先级时就会触发主轮询major rotation。Major rotation交换active数组和expire数组，所有进程都恢复到初始状态，再一次从新开始minor rotation的过程。

    RSDL对交互式进程的支持：和SD同样的道理，交互式进程在睡眠时间时，它所有的竞争者都因为minor rotation而降到了低优先级进程队列中。当它重新进入RUNNING状态时，就获得了相对较高的优先级，从而能被迅速响应。

    <h3>完全公平的调度器CFS</h3>

    CFS是最终被内核采纳的调度器。它从RSDL/SD中吸取了完全公平的思想，不再跟踪进程的睡眠时间，也不再企图区分交互式进程。它将所有的进程都统一对待，这就是公平的含义。CFS的算法和实现都相当简单，众多的测试表明其性能也非常优越。按照作者Ingo Molnar的说法（参考Documentation/scheduler/sched-design-CFS.txt），CFS百分之八十的工作可以用一句话概括：CFS在真实的硬件上模拟了完全理想的多任务处理器。在真空的硬件上，同一时刻我们只能运行单个进程，因此当一个进程占用CPU时，其它进程就必须等待，这就产生了不公平。但是在“完全理想的多任务处理器 “下，每个进程都能同时获得CPU的执行时间，即并行地每个进程占1/nr_running的时间。例如当系统中有两个进程时，CPU的计算时间被分成两份，每个进程获得50%。假设runqueue中有n个进程，当前进程运行了10ms。在“完全理想的多任务处理器”中，10ms应该平分给n个进程(不考虑各个进程的nice值)，因此当前进程应得的时间是(10/n)ms，但是它却运行了10ms。所以CFS将惩罚当前进程，使其它进程能够在下次调度时尽可能取代当前进程。最终实现所有进程的公平调度。

    与之前的Linux调度器不同，CFS没有将任务维护在链表式的运行队列中，它抛弃了active/expire数组，而是对每个CPU维护一个以时间为顺序的红黑树。该树方法能够良好运行的原因在于：

<ul>
    <li>红黑树可以始终保持平衡，这意味着树上没有路径比任何其他路径长两倍以上。</li>
    <li>由于红黑树是二叉树，查找操作的时间复杂度为O(log n)。但是除了最左侧查找以外，很难执行其他查找，并且最左侧的节点指针始终被缓存。</li>
    <li>对于大多数操作（插入、删除、查找等），红黑树的执行时间为O(log n)，而以前的调度程序通过具有固定优先级的优先级数组使用 O(1)。O(log n) 行为具有可测量的延迟，但是对于较大的任务数无关紧要。Molnar在尝试这种树方法时，首先对这一点进行了测试。</li>
    <li>红黑树可通过内部存储实现，即不需要使用外部分配即可对数据结构进行维护。</li>
</ul>

    要实现平衡，CFS使用“虚拟运行时”表示某个任务的时间量。任务的虚拟运行时越小，意味着任务被允许访问服务器的时间越短，其对处理器的需求越高。CFS还包含睡眠公平概念以便确保那些目前没有运行的任务（例如，等待 I/O）在其最终需要时获得相当份额的处理器。

    <strong>CFS如何实现pick next</strong>

    下图是一个红黑树的例子。
[caption id="attachment_979" align="aligncenter" width="459"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332250922MH8O.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332250922MH8O.gif" alt="一个红黑树示例" width="459" height="293" class="size-full wp-image-979" /></a> 一个红黑树示例[/caption]

    所有可运行的任务通过不断地插入操作最终都存储在以时间为顺序的红黑树中（由 sched_entity 对象表示），对处理器需求最多的任务（最低虚拟运行时）存储在树的左侧，处理器需求最少的任务（最高虚拟运行时）存储在树的右侧。 为了公平，CFS调度器会选择红黑树最左边的叶子节点作为下一个将获得cpu的任务。这样，树左侧的进程就被给予时间运行了。

    <strong>tick中断</strong>

    在CFS中，tick中断首先更新调度信息。然后调整当前进程在红黑树中的位置。调整完成后如果发现当前进程不再是最左边的叶子，就标记need_resched标志，中断返回时就会调用scheduler()完成进程切换。否则当前进程继续占用CPU。从这里可以看到 CFS抛弃了传统的时间片概念。Tick中断只需更新红黑树，以前的所有调度器都在tick中断中递减时间片，当时间片或者配额被用完时才触发优先级调整并重新调度。

    <strong>红黑树键值计算</strong>

    理解CFS的关键就是了解红黑树键值的计算方法。该键值由三个因子计算而得：一是进程已经占用的CPU时间；二是当前进程的nice值；三是当前的cpu负载。进程已经占用的CPU时间对键值的影响最大，其实很大程度上我们在理解CFS时可以简单地认为键值就等于进程已占用的 CPU时间。因此该值越大，键值越大，从而使得当前进程向红黑树的右侧移动。另外CFS规定，nice值为1的进程比nice值为0的进程多获得10%的 CPU时间。在计算键值时也考虑到这个因素，因此nice值越大，键值也越大。

    CFS为每个进程都维护两个重要变量：fair_clock和wait_runtime。这里我们将为每个进程维护的变量称为进程级变量，为每个CPU维护的称作CPU级变量，为每个runqueue维护的称为runqueue级变量。进程插入红黑树的键值即为fair_clock – wait_runtime。其中fair_clock从其字面含义上讲就是一个进程应获得的CPU时间，即等于进程已占用的CPU时间除以当前 runqueue中的进程总数；wait_runtime是进程的等待时间。它们的差值代表了一个进程的公平程度。该值越大，代表当前进程相对于其它进程越不公平。对于交互式任务，wait_runtime长时间得不到更新，因此它能拥有更高的红黑树键值，更靠近红黑树的左边。从而得到快速响应。

    红黑树是平衡树，调度器每次总最左边读出一个叶子节点，该读取操作的时间复杂度是O(LgN)。

    <strong>调度器管理器</strong>

    为了支持实时进程，CFS提供了调度器模块管理器。各种不同的调度器算法都可以作为一个模块注册到该管理器中。不同的进程可以选择使用不同的调度器模块。2.6.23中，CFS实现了两个调度算法，CFS算法模块和实时调度模块。对应实时进程，将使用实时调度模块。对应普通进程则使用CFS算法。CFS 调度模块（在 kernel/sched_fair.c 中实现）用于以下调度策略：SCHED_NORMAL、SCHED_BATCH 和 SCHED_IDLE。对于 SCHED_RR 和 SCHED_FIFO 策略，将使用实时调度模块（该模块在 kernel/sched_rt.c 中实现）。

    <strong>CFS组调度</strong>

    CFS组调度（在 2.6.24 内核中引入）是另一种为调度带来公平性的方式，尤其是在处理产生很多其他任务的任务时。 假设一个产生了很多任务的服务器要并行化进入的连接（HTTP 服务器的典型架构）。不是所有任务都会被统一公平对待， CFS 引入了组来处理这种行为。产生任务的服务器进程在整个组中（在一个层次结构中）共享它们的虚拟运行时，而单个任务维持其自己独立的虚拟运行时。这样单个任务会收到与组大致相同的调度时间。您会发现 /proc 接口用于管理进程层次结构，让您对组的形成方式有完全的控制。使用此配置，您可以跨用户、跨进程或其变体分配公平性。

    考虑一个两用户示例，用户 A 和用户 B 在一台机器上运行作业。用户 A 只有两个作业正在运行，而用户 B 正在运行 48 个作业。组调度使 CFS 能够对用户 A 和用户 B 进行公平调度，而不是对系统中运行的 50 个作业进行公平调度。每个用户各拥有 50% 的 CPU 使用。用户 B 使用自己 50% 的 CPU 分配运行他的 48 个作业，而不会占用属于用户 A 的另外 50% 的 CPU 分配。

<hr />
    <h2>Linux调度器的主要数据结构</h2>

    <h3>进程描述符：struct task_struct</h3>

    下面代码剖析使用的内核版本为2.6.32.45。CFS去掉了struct prio_array，并引入调度实体（scheduling entity）和调度类 （scheduling classes），分别由struct sched_entity 和 struct sched_class 定义。因此，task_struct结构（在./linux/include/linux/sched.h中）包含关于 sched_entity 和 sched_class。如下：

<code lang="cpp">
struct task_struct {
	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */
	void *stack;
	atomic_t usage;
	unsigned int flags;	/* per process flags, defined below */
	unsigned int ptrace;

	/* ...... */

	int prio, static_prio, normal_prio;
	unsigned int rt_priority;
	const struct sched_class *sched_class;
	struct sched_entity se;
	struct sched_rt_entity rt;
	/* ...... */
};
</code>

    进程调度的完整数据结构层次如下图：

[caption id="attachment_980" align="aligncenter" width="538"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332251079LeA5.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/0_1332251079LeA5.gif" alt="进程调度的数据结构层次" width="538" height="435" class="size-full wp-image-980" /></a> 进程调度的数据结构层次[/caption]

    各种结构的关系如上图所示。树的根通过 rb_root 元素通过 cfs_rq 结构（在 ./kernel/sched.c 中）引用。红黑树的叶子不包含信息，但是内部节点代表一个或多个可运行的任务。红黑树的每个节点都由 rb_node 表示，它只包含子引用和父对象的颜色。 rb_node 包含在 sched_entity 结构中，该结构包含 rb_node 引用、负载权重以及各种统计数据。最重要的是， sched_entity 包含 vruntime（64 位字段），它表示任务运行的时间量，并作为红黑树的索引。 最后，task_struct 位于顶端，它完整地描述任务并包含 sched_entity 结构。

    就 CFS 部分而言，调度函数非常简单。 在 ./kernel/sched.c 中，您会看到通用 schedule() 函数，它会先抢占当前运行任务（除非它通过 yield() 代码先抢占自己）。注意 CFS 没有真正的时间切片概念用于抢占，因为抢占时间是可变的。 当前运行任务（现在被抢占的任务）通过对 put_prev_task 调用（通过调度类）返回到红黑树。 当 schedule 函数开始确定下一个要调度的任务时，它会调用 pick_next_task 函数。此函数也是通用的（在 ./kernel/sched.c 中），但它会通过调度器类调用 CFS 调度器。 CFS 中的 pick_next_task 函数可以在 ./kernel/sched_fair.c（称为 pick_next_task_fair()）中找到。 此函数只是从红黑树中获取最左端的任务并返回相关 sched_entity。通过此引用，一个简单的 task_of() 调用确定返回的 task_struct 引用。通用调度器最后为此任务提供处理器。

    <h3>调度实体：struct sched_entity</h3>

    该结构在./linux/include/linux/sched.h中，表示一个可调度实体（进程，进程组，等等）。它包含了完整的调度信息，用于实现对单个任务或任务组的调度。调度实体可能与进程没有关联。

<code lang="cpp">
struct sched_entity {
	struct load_weight	load;		/* 用于负载平衡 */
	struct rb_node		run_node;	/* 对应的红黑树结点 */
	struct list_head	group_node;
	unsigned int		on_rq;

	u64			exec_start;
	u64			sum_exec_runtime;
	u64			vruntime;	     /* 虚拟运行时 */
	u64			prev_sum_exec_runtime;

	u64			last_wakeup;
	u64			avg_overlap;

	u64			nr_migrations;

	u64			start_runtime;
	u64			avg_wakeup;

	u64			avg_running;

#ifdef CONFIG_SCHEDSTATS
	u64			wait_start;
	u64			wait_max;
	u64			wait_count;
	u64			wait_sum;
	u64			iowait_count;
	u64			iowait_sum;

	u64			sleep_start;
	u64			sleep_max;
	s64			sum_sleep_runtime;

	u64			block_start;
	u64			block_max;
	u64			exec_max;
	u64			slice_max;

	u64			nr_migrations_cold;
	u64			nr_failed_migrations_affine;
	u64			nr_failed_migrations_running;
	u64			nr_failed_migrations_hot;
	u64			nr_forced_migrations;

	u64			nr_wakeups;
	u64			nr_wakeups_sync;
	u64			nr_wakeups_migrate;
	u64			nr_wakeups_local;
	u64			nr_wakeups_remote;
	u64			nr_wakeups_affine;
	u64			nr_wakeups_affine_attempts;
	u64			nr_wakeups_passive;
	u64			nr_wakeups_idle;
#endif

#ifdef CONFIG_FAIR_GROUP_SCHED
	struct sched_entity	*parent;
	/* rq on which this entity is (to be) queued: */
	struct cfs_rq		*cfs_rq;
	/* rq "owned" by this entity/group: */
	struct cfs_rq		*my_q;
#endif
};
</code> 
 

    这里包括负载权重load、对应的红黑树结点run_node、虚拟运行时vruntime（表示进程的运行时间，并作为红黑树的索引）、开始执行时间、最后唤醒时间、各种统计数据、用于组调度的CFS运行队列信息cfs_rq，等等。

    <h3>调度类：struct sched_class</h3>

    该调度类也在sched.h中，是对调度器操作的面向对象抽象，协助内核调度程序的各种工作。调度类是调度器管理器的核心，每种调度算法模块需要实现struct sched_class建议的一组函数。

<code>
struct sched_class {
	const struct sched_class *next;

	void (*enqueue_task) (struct rq *rq, struct task_struct *p, int wakeup,
			      bool head);
	void (*dequeue_task) (struct rq *rq, struct task_struct *p, int sleep);
	void (*yield_task) (struct rq *rq);

	void (*check_preempt_curr) (struct rq *rq, struct task_struct *p, int flags);

	struct task_struct * (*pick_next_task) (struct rq *rq);
	void (*put_prev_task) (struct rq *rq, struct task_struct *p);

#ifdef CONFIG_SMP
	int  (*select_task_rq)(struct rq *rq, struct task_struct *p,
			       int sd_flag, int flags);

	unsigned long (*load_balance) (struct rq *this_rq, int this_cpu,
			struct rq *busiest, unsigned long max_load_move,
			struct sched_domain *sd, enum cpu_idle_type idle,
			int *all_pinned, int *this_best_prio);

	int (*move_one_task) (struct rq *this_rq, int this_cpu,
			      struct rq *busiest, struct sched_domain *sd,
			      enum cpu_idle_type idle);
	void (*pre_schedule) (struct rq *this_rq, struct task_struct *task);
	void (*post_schedule) (struct rq *this_rq);
	void (*task_waking) (struct rq *this_rq, struct task_struct *task);
	void (*task_woken) (struct rq *this_rq, struct task_struct *task);

	void (*set_cpus_allowed)(struct task_struct *p,
				 const struct cpumask *newmask);

	void (*rq_online)(struct rq *rq);
	void (*rq_offline)(struct rq *rq);
#endif

	void (*set_curr_task) (struct rq *rq);
	void (*task_tick) (struct rq *rq, struct task_struct *p, int queued);
	void (*task_fork) (struct task_struct *p);

	void (*switched_from) (struct rq *this_rq, struct task_struct *task,
			       int running);
	void (*switched_to) (struct rq *this_rq, struct task_struct *task,
			     int running);
	void (*prio_changed) (struct rq *this_rq, struct task_struct *task,
			     int oldprio, int running);

	unsigned int (*get_rr_interval) (struct rq *rq,
					 struct task_struct *task);

#ifdef CONFIG_FAIR_GROUP_SCHED
	void (*task_move_group) (struct task_struct *p, int on_rq);
#endif
};
</code>

    看一下其中的主要函数：

<ul>
<li>enqueue_task：当某个任务进入可运行状态时，该函数将得到调用。它将调度实体（进程）放入红黑树中，并对 nr_running 变量加 1。从前面“Linux进程管理”的分析中可知，进程创建的最后会调用该函数。</li><li>dequeue_task：当某个任务退出可运行状态时调用该函数，它将从红黑树中去掉对应的调度实体，并从 nr_running 变量中减 1。</li>
<li>yield_task：在 compat_yield sysctl 关闭的情况下，该函数实际上执行先出队后入队；在这种情况下，它将调度实体放在红黑树的最右端。</li>
<li>check_preempt_curr：该函数将检查当前运行的任务是否被抢占。在实际抢占正在运行的任务之前，CFS 调度程序模块将执行公平性测试。这将驱动唤醒式（wakeup）抢占。</li>
<li>pick_next_task：该函数选择接下来要运行的最合适的进程。</li>
<li>load_balance：每个调度程序模块实现两个函数，load_balance_start() 和 load_balance_next()，使用这两个函数实现一个迭代器，在模块的 load_balance 例程中调用。内核调度程序使用这种方法实现由调度模块管理的进程的负载平衡。</li>
<li>set_curr_task：当任务修改其调度类或修改其任务组时，将调用这个函数。</li>
<li>task_tick：该函数通常调用自 time tick 函数；它可能引起进程切换。这将驱动运行时（running）抢占。</li>
</ul>

    调度类的引入是接口和实现分离的设计典范，你可以实现不同的调度算法（例如普通进程和实时进程的调度算法就不一样），但由于有统一的接口，使得调度策略被模块化，一个Linux调度程序可以有多个不同的调度策略。调度类显著增强了内核调度程序的可扩展性。每个任务都属于一个调度类，这决定了任务将如何调度。 调度类定义一个通用函数集，函数集定义调度器的行为。例如，每个调度器提供一种方式，添加要调度的任务、调出要运行的下一个任务、提供给调度器等等。每个调度器类都在一对一连接的列表中彼此相连，使类可以迭代（例如， 要启用给定处理器的禁用）。注意，将任务函数加入队列或脱离队列只需从特定调度结构中加入或移除任务。 核心函数 pick_next_task 选择要执行的下一个任务（取决于调度类的具体策略）。调度类的图形视图如下：

[caption id="attachment_981" align="aligncenter" width="572"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322512519q6O.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/03/0_13322512519q6O.gif" alt="调度类图形视图" width="572" height="225" class="size-full wp-image-981" /></a> 调度类图形视图[/caption]

    这里sched_rt.c, sched_fair.c, sched_idletask.c等（都在kernel/目录下）就是不同的调度算法实现。不要忘了调度类是任务结构本身的一部分（参见task_struct）。这一点简化了任务的操作，无论其调度类如何。因为进程描述符中有sched_class引用，这样就可以直接通过进程描述符来调用调度类中的各种操作。在调度类中，随着调度域的增加，其功能也在增加。 这些域允许您出于负载平衡和隔离的目的将一个或多个处理器按层次关系分组。 一个或多个处理器能够共享调度策略（并在其之间保持负载平衡），或实现独立的调度策略。

    不过Linux调度程序本身还没有被模块化，这是一个可以改进的地方。例如对Pluggable CPU调度程序框架，在内核编译时可以选择默认调度程序，在启动时通过向内核传递参数也可以选择其他的CPU调度程序。

    <h3>可运行队列：struct rq</h3>

    调度程序每次在进程发生切换时，都要从可运行队列中选取一个最佳的进程来运行。Linux内核使用rq数据结构（以前的内核中该结构为runqueue）表示一个可运行队列信息（也就是就绪队列），每个CPU都有且只有一个这样的结构。该结构在kernel/sched.c中，不仅描述了每个处理器中处于可运行状态（TASK_RUNNING），而且还描述了该处理器的调度信息。如下：

<code lang="cpp">
struct rq {
	/* runqueue lock: */
	spinlock_t lock;

	/*
	 * nr_running and cpu_load should be in the same cacheline because
	 * remote CPUs use both these fields when doing load calculation.
	 */
	unsigned long nr_running;
	#define CPU_LOAD_IDX_MAX 5
	unsigned long cpu_load[CPU_LOAD_IDX_MAX];
#ifdef CONFIG_NO_HZ
	unsigned long last_tick_seen;
	unsigned char in_nohz_recently;
#endif
	/* capture load from *all* tasks on this cpu: */
	struct load_weight load;
	unsigned long nr_load_updates;
	u64 nr_switches;

	struct cfs_rq cfs;
	struct rt_rq rt;

#ifdef CONFIG_FAIR_GROUP_SCHED
	/* list of leaf cfs_rq on this cpu: */
	struct list_head leaf_cfs_rq_list;
#endif
#ifdef CONFIG_RT_GROUP_SCHED
	struct list_head leaf_rt_rq_list;
#endif

	/*
	 * This is part of a global counter where only the total sum
	 * over all CPUs matters. A task can increase this counter on
	 * one CPU and if it got migrated afterwards it may decrease
	 * it on another CPU. Always updated under the runqueue lock:
	 */
	unsigned long nr_uninterruptible;

	struct task_struct *curr, *idle;
	unsigned long next_balance;
	struct mm_struct *prev_mm;

	u64 clock;
	u64 clock_task;

	atomic_t nr_iowait;

#ifdef CONFIG_SMP
	struct root_domain *rd;
	struct sched_domain *sd;

	unsigned long cpu_power;

	unsigned char idle_at_tick;
	/* For active balancing */
	int post_schedule;
	int active_balance;
	int push_cpu;
	/* cpu of this runqueue: */
	int cpu;
	int online;

	unsigned long avg_load_per_task;

	struct task_struct *migration_thread;
	struct list_head migration_queue;

	u64 rt_avg;
	u64 age_stamp;
	u64 idle_stamp;
	u64 avg_idle;
#endif

#ifdef CONFIG_IRQ_TIME_ACCOUNTING
	u64 prev_irq_time;
#endif

	/* calc_load related fields */
	unsigned long calc_load_update;
	long calc_load_active;

#ifdef CONFIG_SCHED_HRTICK
#ifdef CONFIG_SMP
	int hrtick_csd_pending;
	struct call_single_data hrtick_csd;
#endif
	struct hrtimer hrtick_timer;
#endif

#ifdef CONFIG_SCHEDSTATS
	/* latency stats */
	struct sched_info rq_sched_info;
	unsigned long long rq_cpu_time;
	/* could above be rq->cfs_rq.exec_clock + rq->rt_rq.rt_runtime ? */

	/* sys_sched_yield() stats */
	unsigned int yld_count;

	/* schedule() stats */
	unsigned int sched_switch;
	unsigned int sched_count;
	unsigned int sched_goidle;

	/* try_to_wake_up() stats */
	unsigned int ttwu_count;
	unsigned int ttwu_local;

	/* BKL stats */
	unsigned int bkl_count;
#endif
};
</code>

    rq结构是主要的（每个CPU上的）运行队列数据结构。其加锁的规则是：在那些想锁住多个运行队列的地方（例如负载均衡或者线程迁移代码），锁的获取操作必须按运行队列的升序排序。rq中的部分核心成员含义如下：

<code lang="cpp">
spinlock_t lock：保护进程链表的自旋锁。
unsigned long nr_running：目前处理器的运行队列中进程数量。
unsigned long cpu_load[CPU_LOAD_IDX_MAX]：用以表示处理器的负载，在每个处理器的rq中都会有对应到该处理器的cpu_load参数配置，在每次处理器触发scheduler tick时，都会呼叫函数update_cpu_load_active,进行cpu_load的更新。在系统初始化的时候会呼叫函数sched_init把rq的cpu_load array初始化为0。了解他的更新方式最好的方式是通过函数update_cpu_load,公式如下：
cpu_load[0]会直接等待rq中load.weight的值。
cpu_load[1]=(cpu_load[1]*(2-1)+cpu_load[0])/2
cpu_load[2]=(cpu_load[2]*(4-1)+cpu_load[0])/4
cpu_load[3]=(cpu_load[3]*(8-1)+cpu_load[0])/8
cpu_load[4]=(cpu_load[4]*(16-1)+cpu_load[0]/16
呼叫函数this_cpu_load时，所返回的cpu load值是cpu_load[0]。而在进行cpu blance或migration时，就会呼叫函数source_load target_load取得对该处理器cpu_load index值，来进行计算。
struct load_weight load：负载权重，即load->weight值。会是目前所执行的schedule entity的load->weight的总和，也就是说rq的load->weight越高，说明所负责的进程单元load->weight总和越高，表示处理器所负荷的执行单元也越重。
unsigned long nr_load_updates：在每次scheduler tick中呼叫update_cpu_load时，这个值就增加一，可以用来反馈目前cpu load更新的次数。
u64 nr_switches：CPU执行进程切换的次数。用来累加处理器进行context switch的次数，会在函数schedule呼叫时进行累加，并可以通过函数nr_context_switches统计目前所有处理器总共的context switch次数，或是可以透过查看文件/proc/stat中的ctxt位得知目前整个系统触发context switch的次数。
struct cfs_rq cfs：用于公平调度的CFS运行队列。
struct rt_rq rt：用于实时进程调度的运行队列。
struct list_head leaf_cfs_rq_list：目前CPU上叶子cfs_rq的列表。
unsigned long nr_uninterruptible：之前在运行队列中而现在处于重度睡眠状态的进程总数。
task_t *curr：指向本地CPU当前正在运行的进程的进程描述符，即current。
task_t *idle：指向本地CPU上的idle进程描述符的指针。
unsigned long next_balance：基于处理器的jiffies值，用以记录下次进行处理器balancing的时间点。
struct mm_struct *prev_mm：在进程进行切换时用来存放被替换进程内存描述符的地址。
u64 clock：目前CPU的时钟值。
int cpu：本运行队列对应的CPU
</code>

    最后是调度的一个些统计信息，包括sys_sched_yield()、schedule()、try_to_wake_up()的统计信息。注意现在rq结构中已经没有active/expire数组了，因此现在rq结构并不直接维护进程队列，对CFS进程队列由红黑树来维护（对实时调度则仍使用组链表），并且以时间为顺序。rq结构中的cfs结构有指向红黑树的根结点，由此可以访问到红黑树。

    <h3>CFS运行队列：struct cfs_rq</h3>

    该结构在kernel/sched.c中，是用于CFS调度的运行队列。对于每个运行队列信息，都提供了一个cfs_rq结构来保存相关红黑树的信息。

<code>
struct cfs_rq {
	struct load_weight load;  /* 运行负载 */
	unsigned long nr_running;  /* 运行进程个数 */

	u64 exec_clock;
	u64 min_vruntime;  /* 保存的最小运行时间 */

	struct rb_root tasks_timeline;  /* 运行队列树根 */
	struct rb_node *rb_leftmost;    /* 保存的红黑树最左边的节点，这个为最小运行时间的节点，
                                           当进程选择下一个来运行时，直接选择这个 */

	struct list_head tasks;
	struct list_head *balance_iterator;

	/*
	 * 'curr'指针指向本cfs_rq上当前正在运行的进程，如果本cfs_rq上没有正在运行的进程，则指向NULL
	 */
	struct sched_entity *curr, *next, *last;

	unsigned int nr_spread_over;

#ifdef CONFIG_FAIR_GROUP_SCHED
	struct rq *rq;	/* 本cfs_rq关联的运行队列 */

	/* 叶子cfs_rqs是那些层次中最底层的可调度实体，它们持有进程。非叶子lrqs持有其他更高层的可调用实体（例如用户，容器等）
	 * leaf_cfs_rq_list用来把一个CPU上的叶子cfs_rq列表串结成一个列表，这个列表被用在负载平衡中
	 */
	struct list_head leaf_cfs_rq_list;
	struct task_group *tg;	/* 拥有本运行队列的组 */

#ifdef CONFIG_SMP
	/*
	 * 由进程贡献的load.weight部分
	 */
	unsigned long task_weight;

	/*
	 *   h_load = weight * f(tg)
	 * 其中f(tq)表示分配给组的迭代权重值
	 */
	unsigned long h_load;

	/*
	 * this cpu's part of tg->shares
	 */
	unsigned long shares;

	/*
	 * load.weight at the time we set shares
	 */
	unsigned long rq_weight;
#endif
#endif
};
</code>

    其中有红黑树的根结点、指向当前队列上正在运行进程的curr，用于负载平衡的叶子队列leaf_cfs_rq_list，贡献的负载权重值task_weight等。

    <h3>红黑树结点：struct rb_node, struct rb_root</h3>

<code lang="cpp">
struct rb_node
{
	unsigned long  rb_parent_color;
#define	RB_RED		0
#define	RB_BLACK	1
	struct rb_node *rb_right;
	struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));
    /* The alignment might seem pointless, but allegedly CRIS needs it */

struct rb_root
{
	struct rb_node *rb_node;
};
</code>

    rb_node和rb_root的定义在./linux/include/linux/rbtree.h中，其中rb_root表示红黑树的根结点。红黑树的实现在./linux/lib/rbtree.c中，包括插入、删除、旋转、遍历等操作。

    还有很多其他的数据结构，如调度域sche_domain（在include/linux/sched.h中）、根域root_domain（在kernel/sched.c中）、任务组task_group（在kernel/sched.c中）等，这里不一一介绍了。

    我们可以从设计层面来总结Linux进程调度一些设计思想：

<ul>
    <li>把进程抽象成进程描述符task_struct：包含进程所必需的数据，如状态信息、调度信息、优先级信息、内存页信息等。</li>
    <li>把需要调度的东西抽象成调度实体sched_entity：调度实体可以是进程、进程组、用户等。这里包含负载权重值、对应红黑树结点、虚拟运行时vruntime等。</li>
    <li>把调度策略（算法）抽象成调度类sched_class：包含一组通用的调度操作接口，将接口和实现分离。你可以根据这组接口实现不同的调度算法，使得一个Linux调度程序可以有多个不同的调度策略。</li>
    <li>把调度的组织抽象成可运行队列rq：包含自旋锁、进程数量、用于公平调度的CFS信息结构、当前正在运行的进程描述符等。实际的进程队列用红黑树来维护（通过CFS信息结构来访问）。</li>
    <li>把CFS调度的运行队列信息抽象成cfs_rq：包含红黑树的根结点、正在运行的进程指针、用于负载平衡的叶子队列等。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>970</wp:post_id>
		<wp:post_date><![CDATA[2015-03-18 16:30:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 08:30:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%aclinux%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%ef%bc%9acfs%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a1%86%e6%9e%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<category domain="category" nicename="operating-system"><![CDATA[操作系统]]></category>
		<category domain="post_tag" nicename="%e8%b0%83%e5%ba%a6"><![CDATA[调度]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751192135]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SRM656 DIV1 Random Pancake Stack</title>
		<link>http://blog.kongfy.com/2015/04/srm656-div1-random-pancake-stack/</link>
		<pubDate>Fri, 17 Apr 2015 15:58:34 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=999</guid>
		<description></description>
		<content:encoded><![CDATA[被虐了......这个题目其实不难，但是从一开始想法有个漏洞没有发现...一直没有转过弯来...还是需要训练训练...

原题链接：<a href="http://community.topcoder.com/stat?c=problem_statement&pm=13747&rd=16416" title="Random Pancake Stack" target="_blank">Random Pancake Stack</a>

<blockquote>
Charlie has N pancakes. He wants to serve some of them for breakfast. We will number the pancakes 0 through N-1. For each i, pancake i has width i+1 and deliciousness d[i].

Charlie chooses the pancakes he is going to serve using the following randomized process: He starts by choosing the first pancake uniformly at random from all the pancakes he has. He places the chosen pancake onto a plate. This pancake now forms the bottom of a future stack of pancakes. Then, Charlie repeats the following procedure:

<ol>
	<li>If there are no more pancakes remaining, terminate.</li>
	<li>Choose a pancake uniformly at random from the pancakes that have not been chosen yet.</li>
	<li>If the width of this pancake is greater than the width of the pancake on top of the stack, terminate without taking it.</li>
	<li>Place the chosen pancake on top of the stack and go back to step 1.</li>
</ol>

You are given the vector <int> d with N elements. The total deliciousness of a serving of pancakes is the sum of the deliciousness of all pancakes used in the serving. Compute and return the expected value of the total deliciousness of the pancakes chosen by Charlie.
</blockquote>

<!--more-->

题目的意思就是在给定规则下求出得到的饼干美味值总和的期望。下面给出官方给的样例及解释：

<blockquote>
{1,1,1}
Returns: 1.6666666666666667
The following scenarios may occur:
<ol>
	<li>With probability 1/3, Charlie chooses pancake 0 first. In this case he won't be able to add any more pancakes and the total deliciousness of his serving of pancakes will be 1.
</li>
	<li>With probability 1/3, Charlie chooses pancake 1 first. What happens in the second round? With probability 1/2 he will choose pancake 0 and with probability 1/2 it will be pancake 2. In the first case the total deliciousness of Charlie's pancakes will be 2, in the second case it will be 1.</li>
	<li>With probability 1/3, Charlie chooses pancake 2 first. If he chooses pancake 0 next, the total deliciousness of his pancakes will be 2. If he happens to choose pancake 1 next (followed by pancake 0 in the third round), the total deliciousness will be 3.</li>
</ol>

Summing this up, we get the expected deliciousness to be 1/3 * (1) + 1/3 * (1/2 * 1 + 1/2 * 2) + 1/3 * (1/2 * 2 + 1/2 * 3) = 5/3 = 1.666...
</blockquote>

仔细分析规则，发现有子问题结构，令[latex]f[i,j][/latex]表示序列前[latex]i[/latex]块饼干美味值总和的期望，而状态[latex]j[/latex]表示剩余的饼干总数（[latex]i \le j \le N[/latex]），不难写出如下的状态转移方程：

<center>[latex]\displaystyle f[i,j] = \frac{1}{i} \sum_{k=1}^{i}{\left( (d[k]+f[k-1,j-1]) \times \frac{k-1}{j-1} + d[k] \times \frac{j-k}{j-1}\right) }\quad (1 \le i \le j \le N)[/latex]</center>

边界条件非常自然：

<center>[latex]\displaystyle f[1,i] = d[1]\qquad (1 \le i \le N)[/latex]</center>

所求结果为：

<center>[latex]\displaystyle f[N,N][/latex]</center>

有了状态转移方尺和边界条件后就可以非常轻松的写出动态规划代码了，如下（注意：上述方程中从1开始计数，在转换为C++程序时要留心）：

<code lang="cpp">
#include <vector>

using namespace std;

class RandomPancakeStack
{
public:
    double expectedDeliciousness(vector <int> d)
    {
        int n = d.size();
        
        vector<vector<double> > f(n + 1, vector<double> (n + 1, 0));

        // base case
        for (int i = 1; i <= n; ++i) {
            f[1][i] = d[0];
        }
        
        // dp
        for (int i = 2; i <= n; ++i) {
            for (int j = i; j <= n; ++j) {
                double temp = 0;
                for (int k = 1; k <= i; ++k) {
                    temp += (d[k - 1] + f[k - 1][j - 1]) * (k - 1) / (double)(j - 1);
                    temp += d[k - 1] * (j - k) / (double)(j - 1);
                }
                
                temp *= 1.0 / i;
                f[i][j] = temp;
            }
        }

        return f[n][n];
    }
};

</code>

算法运行时间复杂度为[latex]O(n^{2})[/latex]，空间复杂度为[latex]O(n^{2})[/latex]，通过滚动数组可以将空间复杂度优化到[latex]O(n)[/latex]（和背包问题一样）。房间里有一个Red(3000+)的俄罗斯大神写了时间复杂度为[latex]O(n)[/latex]，空间复杂度为[latex]O(1)[/latex]的方法...令人汗颜...

保持按时被虐的好习惯！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>999</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 23:58:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-17 15:58:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[srm656-div1-random-pancake-stack]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="srm"><![CDATA[SRM]]></category>
		<category domain="post_tag" nicename="topcoder"><![CDATA[TopCoder]]></category>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751318247]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SRM657 DIV1 Problem Sets</title>
		<link>http://blog.kongfy.com/2015/04/srm657-div1-problem-sets/</link>
		<pubDate>Tue, 28 Apr 2015 03:55:54 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1034</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接：<a href="http://community.topcoder.com/stat?c=problem_statement&pm=13771" title="Problem Sets" target="_blank">Problem Sets</a>

<blockquote>
Cat Snuke came up with some problems. He wants to construct as many problem sets as possible using those problems. Each problem set must contain exactly three problems: one for the Easy slot, one for the Medium slot, and one for the Hard slot. Each problem can only be assigned to a single slot in a single problem set. He came up with E + EM + M + MH + H problems in total. The distribution of the problems is as follows:
<ul>
	<li>E problems can only be used in the Easy slot.</li>
	<li>EM problems can be used either in the Easy slot or the Medium slot.</li>
	<li>M problems can only be used in the Medium slot.</li>
	<li>MH problems can be used either in the Medium slot or the Hard slot.</li>
	<li>H problems can only be used in the Hard slot.</li>
</ul>
Return the maximal number of problem sets he can construct.
</blockquote>

<!--more-->

题目很好理解，不再赘述了。

这题在思路上还是有点意思的，按照题意直接从输入推到输出我感觉也是可以的，我想了一个自然的贪心策略（按照直觉推算Problem Sets的数量），但是Case太多了，编码起来太繁琐，故抛弃。

有意思的是如果把这个问题反转一下，提出判定问题：给定想要的Problem Sets的数量，能否用这些给定的题目来构成呢？不难发现，这个问题是非常简单解决的，只要所给的题目能够在E、M、H三个Slot中都放置目标数量个题目即可。那么，在判定问题的基础上，我们可以直接在long long的范围内做二分查找来寻找最终解，附上代码：

<code lang="cpp">
class ProblemSets
{
private:
    bool check(long long cap, long long E, long long EM, long long M, long long MH, long long H)
    {
        if (H + MH < cap) return false;         // check Hard problems
        if (E + EM < cap) return false;         // check Easy problems

        MH = H < cap ? MH - (cap - H) : MH;
        EM = E < cap ? EM - (cap - E) : EM;
        if (M + EM + MH < cap) return false;    // check Medium problems
        
        return true;
    }
public:
    long long maxSets(long long E, long long EM, long long M, long long MH, long long H)
    {
        long long l = 0, r = ~(1LL << 63);

        while (l < r) {
            long long mid = (l + r + 1) / 2;
            if (check(mid, E, EM, M, MH, H)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }

        return l;
    }
};

</code>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1034</wp:post_id>
		<wp:post_date><![CDATA[2015-04-28 11:55:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-28 03:55:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[srm657-div1-problem-sets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binary-search"><![CDATA[binary search]]></category>
		<category domain="post_tag" nicename="srm"><![CDATA[SRM]]></category>
		<category domain="post_tag" nicename="topcoder"><![CDATA[TopCoder]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3751058856]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1141</wp:comment_id>
			<wp:comment_author><![CDATA[rebornix]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[penn.lv@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[106.187.92.209]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-06-14 20:58:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-06-14 12:58:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[孔哥我又订阅上你的博客了！


一晚上把漏掉的博客全部都看了一遍，题目我也来刷一遍试试 :)


向你看齐 要月月写博客坚持下去。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2078429795]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1142</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.119.48.131]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-06-14 22:30:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-06-14 14:30:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈哈，你看的好快，虽然我也没写几篇...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1141</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2078429795]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2078520363]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>OpenStack网络迷宫：Neutron以及LBaaS</title>
		<link>http://blog.kongfy.com/2015/05/openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas/</link>
		<pubDate>Wed, 13 May 2015 16:10:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1103</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_1150" align="aligncenter" width="1024"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/IMG_5155.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/IMG_5155.jpg" alt="&quot;一团糟&quot; - 我对OpenStack网络实现的第一感觉" width="1024" height="768" class="size-full wp-image-1150" /></a> "一团糟" - 我对OpenStack网络实现的第一感觉[/caption]

OpenStack的网络模块相信不会有人否认是整个OpenStack中最复杂的部分，即使是OpenStack社区的成员也常常被网络模块的复杂性搞的焦头烂额。因为研究负载均衡的关系，我不得不对网络模块进行一点粗浅的了解，这里按照个人的理解把这些东西总结起来写下来。

本文算不上是的OpenStack网络分析（没有实力写），但求可以以自己的一些粗浅理解，为想要一窥OpenStack网络实现的同学提供哪怕一点点帮助。

PS：本文中所描述的所有概念和实现均基于OpenStack当前版本（neutron git version : 2921d3c686b5f5cd68d51f906766983f975b1cf2）,在此也强烈建议任何想要了解OpenStack网络的同学<strong>一定</strong>要实际搭建一个可用的环境来对其中网络的每一个环节进行推敲。

<!--more-->

<h2>1. 一点点历史</h2>
如大家所知，OpenStack主要提供的服务分为计算、存储和网络三部分，在OpenStack早期，网络服务由nova-network模块负责提供（支持Flat、FlatDHCP和VLAN三种模式，在现在的文档中通常被称为Legacy networking，从名字就可以看到被淘汰的命运）。随着OpenStack的发展，朴素的nova-network模块逐渐无法满足云环境中复杂的网络需求，最主要原因的在于：公有云的租户希望有更丰富的网络API和可定制的网络拓扑结构。因此，OpenStack决定另起炉灶，为网络服务单独打造一个子项目：Quantum。

诶？为啥是这货？文档上不都叫Neutron么？没错，Quantum是OpenStack network最早的名字，后来因为这个名字被使用的太多了，在Google上不方便搜索，于是改名为Neutron（囧rz，待考证），所以在学习过程中如果看到Quantum不要慌张，就是这货没错。

<h2>2. 积木</h2>
<center><strong>OpenStack = OpenSource + Stack</strong></center>

OpenStack就是开源软件的堆叠，它的网络模块也不例外：Neutron模块基于当前已有的开源技术来解决虚拟网络问题，想了解Neutron就必须要对这些“积木”先有最基本的认识，否则可真的是雾里看花。

下面简单罗列出其中最为重要的组件，如果感觉不太熟悉的话：Google一下，海量文档等你翻阅...

<ul>
	<li>OpenvSwitch：开源的虚拟交换机实现，虚拟网络利器，支持OpenFlow、VLAN、GRE、VXLAN...</li>
	<li>Linux bridge：Linux虚拟网桥组件，Neutron中主要用来实现安全组和访问规则（见下文）</li>
	<li>GRE、VXLAN：三层隧道技术</li>
	<li>Linux Namespace：Linux内核支持的、对资源进行隔离的机制（Neutron中主要用到了网络部分），不清楚的同学建议看看陈皓的这篇<a href="http://coolshell.cn/articles/17029.html" target="_blank">“马桶风格”的科普文</a></li>
	<li>iptables：不说了，大家都很熟悉了</li>
	<li>HAproxy：大名鼎鼎的开源负载均衡项目，Neutron-LBaaS默认使用它作为负载均衡器</li>
</ul>

<h2>3. OpenStack网络核心概念</h2>
Neutron中对网络抽象的最核心的概念是<strong>Network</strong>、<strong>Port</strong>和<strong>Subnet</strong>，关系如下图：

[caption id="attachment_1183" align="aligncenter" width="814"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/concepts.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/concepts.png" alt="Neutron抽象网络概念" width="814" height="317" class="size-full wp-image-1183" /></a> Neutron抽象网络概念[/caption]

Network是OpenStack中一个独立的连通二层网络，Port是连接在网络上的接口，Subnet是对应Network上的一块IP地址。注意这里不要过多的纠结OSI模型中的层次关系，这些术语是Neutron自身对网络的抽象概念，和OSI模型中的术语并不是一一对应的。

另一组非常重要也非常容易被混淆的概念是Provider Network和Tenant Network，解释如下：
<ul>
	<li><strong>Provider Network</strong>：只能由管理员创建，是<strong>已经存在</strong>的<strong>物理网络</strong>在Neutron中的映射。典型的例子是将公网作为Provider Network（通常是 <span class="lang:diff decode:true  crayon-inline " >br-ex</span> 的映射（见后文））来创建External Network</li>
	<li><strong>Tenant Network</strong>：字面意思，租户创建的虚拟网络</li>
</ul>

这些概念术语在下文中多次出现，<strong>非常重要</strong>。

<h2>4. Neutron模块组成</h2>
Neutron本身只负责实现网络抽象API，充分采用了插件化的设计，只要可以实现Neutron网络API就可以，可以说非常灵活。

总的来说，插件分为两类：Core Plugin和Service Plugin。

[caption id="attachment_1186" align="aligncenter" width="918"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/modules.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/modules.png" alt="Neutron插件结构" width="918" height="328" class="size-full wp-image-1186" /></a> Neutron插件结构[/caption]

Core Plugin实现对二层和三层网络的抽象（链路层和IP层），如名字所暗示的，Core Plugin必须启用才能保证Neutron的正常运行。二层插件Modular Layer 2 Plugin（ML2）又通过使用具体的Type driver(Local, Flat, VLAN, GRE, VXLAN - 负责对应类型网络的虚拟化)和Mechanism driver（OpenvSwitch, Linux bridge - 实际的网络实现机制）来实现二层网络的模拟工作；三层插件主要通过驱动L3-Agent和DHCP-Agent来提供虚拟的三层网络服务。

Service Plugin则是基于Core Plugin提供的功能来提供额外的服务，如LBaaS插件提供负载均衡服务、VPNaaS提供VPN服务等。

<h2>5. Neutron网络逻辑结构</h2>
有了上面这些复杂的概念，接下来我们可以看看Neutron到底是如何实现它的看家本领的：租户网络隔离和自定义网络拓扑。

租户网络隔离实现起来说白了还是得靠VLAN，不过和nova-network中的VLAN模式（通过不同的Linux bridge连接到支持VLAN的物理交换机上）不同，Neutron在OpenvSwitch提供的虚拟交换机中使用VLAN。乍一看好像差不多么，不就是换成了虚拟交换机而已？这样做的好处在于：一来可以回避VLAN网络数量上限4096的问题（GRE和VXLAN类型，见下文），二来为自定义网络拓扑创造了机会。

下图展示是Neutron网络实现的最核心的思路，注意图中将整个OpenStack视为整体，忽略了物理机之间的边界：

[caption id="attachment_1179" align="aligncenter" width="599"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/logical-network.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/logical-network.png" alt="不考虑物理机边界时的Neutron网络实现" width="599" height="512" class="size-full wp-image-1179" /></a> 不考虑物理机边界时的Neutron网络实现[/caption]

整个Neutron网络实现的核心就是图中的两个OpenvSwitch虚拟网桥 <span class="lang:diff decode:true  crayon-inline " >br-int</span> 和<span class="lang:diff decode:true  crayon-inline " >br-ex</span>。

<span class="lang:diff decode:true  crayon-inline " >br-int</span> 是集成网桥，在逻辑概念上，它是跨越整个OpenStack的内部大网桥：所有的Port（虚拟机、虚拟路由器、DHCP等等）都直接连接在 <span class="lang:diff decode:true  crayon-inline " >br-int</span> 上，通过不同的VLAN tag来区分不同的Subnet，做到了独立网络之间的隔离（在这里我们暂且认为<span class="lang:diff decode:true  crayon-inline " >br-int</span>可以创建任意多的VLAN，后文中会继续分析实际场景中的VLAN数量问题）。

通过在两个Subnet间创建虚拟路由器，可以实现两个不同Subnet之间的互通，如上图中左上方的虚拟路由器实现了租户A两个网络间的互通。<span class="lang:diff decode:true  crayon-inline " >br-ex</span>是外部网络所连接的网桥（该网口不设IP地址），通过在Tenant Network中创建连通<span class="lang:diff decode:true  crayon-inline " >br-ex</span>的虚拟路由器，即可以实现对外网的访问（对External Network的访问默认采用SNAT的方式）。

<h2>6. 跨越物理机界限</h2>
然而，理想很丰满，现实却很骨感。虽然上面的逻辑结构非常简单统一，似乎直接解决了虚拟网络的问题，但却终归只是概念上的设计，在现实世界中必须要面对一个最大的问题：集成网桥<span class="lang:diff decode:true  crayon-inline " >br-int</span>是没有办法理想化的跨越所有物理机的，那么我们该如何解决这个问题？该怎样做才能将实际上分散在各个物理机上的<span class="lang:diff decode:true  crayon-inline " >br-int</span>网桥连通，实现逻辑上统一的集成网桥呢？

Neutron可以采用三种方法来完成这一任务：VLAN、GRE和VXLAN，分别对应三种Tenant Network类型，每一个用户创建的Tenant Network根据其类型决定内部网络采用什么样的方式来跨越物理机的界限。

[caption id="attachment_1197" align="aligncenter" width="778"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/D7F8423F-D72A-40EB-BC4A-756866317992.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/D7F8423F-D72A-40EB-BC4A-756866317992.png" alt="OpenStack集群标准网络部署图" width="778" height="569" class="size-full wp-image-1197" /></a> OpenStack集群标准网络部署图[/caption]

上图是OpenStack安装文档中对整体OpenStack节点配置和网络部署的解释，Neutron关心的是其中的Network Node和Compute Node，Compute Node是集群中承载虚拟机运行的节点，Network Node主要负责提供网络API和三层网络服务。<span class="lang:diff decode:true  crayon-inline " >br-int</span>网桥分散在这些节点中，下面我们分别看看如何通过VLAN、GRE和VXLAN的方式解决这一问题。

<h3>6.1. VLAN</h3>
通过VLAN来连接分散在不同物理机中不同的租户网络实际上和nova-network的VLANManager在想法上是一脉相承的，都是为每一个租户网络分配一个物理交换机上的VLAN，在连接所有节点的同时通过不同的VLAN保证了租户网络的隔离性。

[caption id="attachment_1202" align="aligncenter" width="781"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/network-2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/network-2.png" alt="VLAN模式网络" width="781" height="579" class="size-full wp-image-1202" /></a> VLAN模式网络[/caption]

如图所示是两个不同的Compute节点的网络部署，两个节点之间通过一个支持VLAN的物理交换机连接起来。并且分别创建了OpenvSwitch网桥<span class="lang:diff decode:true  crayon-inline " >br-eth1</span>与<span class="lang:diff decode:true  crayon-inline " >br-int</span>相连。

理解VLAN模式的关键在于将两个不同的VLAN区分清楚：一个是<span class="lang:diff decode:true  crayon-inline " >br-int</span>上分隔Tenant Network的虚拟交换机VLAN，另一个是Data Network中的物理交换机VLAN。Neutron VLAN模式的本质就是将Data Network中的VLAN作为Provider Network，并将租户网络映射到真实的物理交换机VLAN中。

如图例中，绿色的Tenant A网络映射到了物理VLAN 101中，而蓝色Tenant B网络映射到了物理VLAN 102中，这样就在保持隔离的同时实现了不同Compute Node之间的网络互通。另外注意重要的一点：为了将虚拟交换机中的VLAN映射到物理交换机的VLAN中，需要对VLAN tag进行修改，这一步骤是在<span class="lang:diff decode:true  crayon-inline " >br-eth1</span>上借由Open Flow实现的，官方文档对此有详细的讲解，参见<a href="http://docs.openstack.org/admin-guide-cloud/content/under_the_hood_openvswitch.html" target="_blank">这里</a>。

<h3>6.2. GRE & VXLAN</h3>
GRE和VXLAN的方式原理上非常相似，都是通过三层隧道的方法将虚拟交换机的报文用三层协议封装，发送给隧道对应端后再由对端将三层报文脱掉得到原报文后转交给虚拟网络，下面以GRE为例进行说明。

[caption id="attachment_1207" align="aligncenter" width="781"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/network-3.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/network-3.png" alt="GRE模式网络" width="781" height="573" class="size-full wp-image-1207" /></a> GRE模式网络[/caption]

上图中可以看到两个Compute Node中分别创建了隧道网桥<span class="lang:diff decode:true  crayon-inline " >br-tun</span>与<span class="lang:diff decode:true  crayon-inline " >br-int</span>相连，并且为每个租户网络在节点间创建了对应的点对点GRE隧道，在计算节点上使用命令 <span class="lang:sh decode:true  crayon-inline " >sudo ovs-vsctl show</span> 查看这些隧道：

 
<pre class="lang:sh mark:5-12 decode:true " >[kongfy@3E ~]$ sudo ovs-vsctl show
...
    Bridge br-tun
        fail_mode: secure
        Port "gre-c0a801df"
            Interface "gre-c0a801df"
                type: gre
                options: {df_default="true", in_key=flow, local_ip="192.168.1.122", out_key=flow, remote_ip="192.168.1.223"}
        Port "gre-c0a80166"
            Interface "gre-c0a80166"
                type: gre
                options: {df_default="true", in_key=flow, local_ip="192.168.1.122", out_key=flow, remote_ip="192.168.1.102"}
        Port patch-int
            Interface patch-int
                type: patch
                options: {peer=patch-tun}
        Port br-tun
            Interface br-tun
                type: internal</pre> 

隧道网桥<span class="lang:diff decode:true  crayon-inline " >br-tun</span>所做的重要的工作就是将所有的租户网络分别映射到对应的GRE隧道ID上，通过Open Flow来在<span class="lang:diff decode:true  crayon-inline " >br-int</span>网络流的VLAN tag和GRE隧道ID之间做转换。另外，GRE隧道的ID字段长度为32位，也就是说只要各个节点做好<span class="lang:diff decode:true  crayon-inline " >br-int</span>上的VLAN tag和GRE ID之间的转换，我们可以创造2^32个租户网络（VXLAN中VNI字段也有24位长，即可以创建2^24个租户网络）！这里隐藏一个潜在的限制，每个单独的节点上不能有超过4096个租户网络...目前来说这对Compute Node来说并不是问题（单节点虚拟化4096个虚拟机是难以想象的），而对网络节点来说，可以使用多台网络节点来解决这个问题。

<h3>6.3. 选择？</h3>
那么我们该如何在这几种方法中选择呢？

首先网络效率最高的无疑是VLAN的方式，因为没有涉及到三层隧道报头的开销，而缺点在于无法突破VLAN tag 4096的上限，因此VLAN方式无疑是非常适合于追求性能而Tenant Network数量有限的私有云环境。在公有云环境中由于Tenant Network的数量要大得多，所以往往选择隧道方式实现，在OpenStack节点数量比较多时，由于GRE隧道是点对点的隧道，所以会导致创建的隧道数量过多引起广播风暴（<a href="https://plus.google.com/+KennethDuda/posts/2tnVCHkeVyZ" target="_blank">详细说明</a>），因此似乎基于UDP的VXLAN是公有云部署在大型数据中心的更好选择？（待考证）

<h2>7. 虚拟路由的实现</h2>
到现在我们已经看到了Neutron是如何实现租户网络隔离的。但是对用户自定义网络拓扑功能的讨论还欠缺最为重要的一环：虚拟路由器（Router）。

在Juno版本之前，三层网络的所有服务：包括虚拟路由器、DHCP等等都部署在Network Node上（Juno版本推出了Distributed Virtual Router功能，用来解决Network Node的单点故障问题并减轻数据中心网络中不必要的数据传输，这些内容超出了本文的讨论范围，感兴趣的同学可以看看<a href="https://www.youtube.com/watch?v=4CKSm3bwv78" target="_blank">这个</a>）。虚拟路由器的实现实际上可以说是非常“朴素”的，Neutron在网络节点上创建对应虚拟路由器接口的Internal Port，将这些设备接入<span class="lang:diff decode:true  crayon-inline " >br-int</span>设置VLAN tag（Tenant Network）或者直接接入<span class="lang:diff decode:true  crayon-inline " >br-ex</span>（External Network），实际负责包转发的就是Network Node的内核本身，为了防止网络地址重叠，要把虚拟路由器相关的这些Internal Port放进独立的网络Namespace中。

[caption id="attachment_1221" align="aligncenter" width="898"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/8B56059D-567D-4C06-8753-F075C00EE3CB.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/8B56059D-567D-4C06-8753-F075C00EE3CB.jpg" alt="demo虚拟网络拓扑" width="898" height="534" class="size-full wp-image-1221" /></a> demo虚拟网络拓扑[/caption]

上图是在我的实验环境中创建的虚拟网络（10.0.0.0/24），通过一个虚拟路由器连接到外网（没错，就是192.168.1.0/24网段）。在Network Node上通过命令 <span class="lang:sh decode:true  crayon-inline " >ip netns</span> 来查看当前有哪些Namespace：

<pre class="lang:sh decode:true " >[kongfy@3E ~]$ ip netns
qrouter-1abfb304-02c3-4809-99d9-e791b672f095
qdhcp-ffdfe83f-6b00-4a53-8a2e-822cdc73f518</pre> 

qrouter-XXX就是虚拟路由器使用的Namespace，使用 <span class="lang:sh decode:true  crayon-inline " >sudo ip netns exec qrouter-1abfb304-02c3-4809-99d9-e791b672f095 ifconfig</span> 命令查看该空间内的网络接口：
 
<pre class="lang:sh decode:true " >[kongfy@3E ~]$ sudo ip netns exec qrouter-1abfb304-02c3-4809-99d9-e791b672f095 ifconfig
lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 0  (Local Loopback)
        RX packets 34  bytes 3672 (3.5 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 34  bytes 3672 (3.5 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

qg-e79d220c-32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.1.30  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::f816:3eff:fe8b:733c  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether fa:16:3e:8b:73:3c  txqueuelen 0  (Ethernet)
        RX packets 212399  bytes 250859260 (239.2 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 104055  bytes 10311601 (9.8 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

qr-4eecdd03-28: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 10.0.0.1  netmask 255.255.255.0  broadcast 10.0.0.255
        inet6 fe80::f816:3eff:fee5:9019  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether fa:16:3e:e5:90:19  txqueuelen 0  (Ethernet)
        RX packets 105590  bytes 10530770 (10.0 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 201200  bytes 249954273 (238.3 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</pre> 

果不其然，接口的IP和虚拟路由器接口配置完全一样。再来查看空间内的路由策略：

<pre class="lang:sh decode:true " >[kongfy@3E ~]$ sudo ip netns exec qrouter-1abfb304-02c3-4809-99d9-e791b672f095 route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 qg-e79d220c-32
10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 qr-4eecdd03-28
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 qg-e79d220c-32</pre> 

非常朴素的路由表，最后一步，检查一下 <span class="lang:default highlight:0 decode:true  crayon-inline " >qr-4eecdd03-28</span> 和 <span class="lang:default highlight:0 decode:true  crayon-inline " >qg-e79d220c-32</span> 这两个接口接在哪里了？

 
<pre class="lang:default mark:10-12,25-28 decode:true " >[kongfy@3E ~]$ sudo ovs-vsctl show
2589affe-8d13-4c1e-be9d-1a3f3603454b
    Bridge br-ex
        Port phy-br-ex
            Interface phy-br-ex
                type: patch
                options: {peer=int-br-ex}
        Port "enp4s2"
            Interface "enp4s2"
        Port "qg-e79d220c-32"
            Interface "qg-e79d220c-32"
                type: internal
        Port br-ex
            Interface br-ex
                type: internal
    Bridge br-int
        fail_mode: secure
        Port "qvof6da39de-53"
            tag: 1
            Interface "qvof6da39de-53"
        Port patch-tun
            Interface patch-tun
                type: patch
                options: {peer=patch-int}
        Port "qr-4eecdd03-28"
            tag: 1
            Interface "qr-4eecdd03-28"
                type: internal
        Port br-int
            Interface br-int
                type: internal
        Port "tap2c04d868-02"
            tag: 1
            Interface "tap2c04d868-02"
                type: internal
        Port int-br-ex
            Interface int-br-ex
                type: patch
                options: {peer=phy-br-ex}
        Port "tapdf3bd4f1-19"
            tag: 1
            Interface "tapdf3bd4f1-19"
                type: internal</pre> 

一端接在External Network网桥 <span class="lang:default highlight:0 decode:true  crayon-inline " >br-ex</span> 上，另一端接在 <span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span> 上并且VLAN tag为 1（Tenant Network），是不是有豁然开朗的感觉~

<h2>8. Floating IP</h2>
为了让我们的虚拟机可以对外网提供服务，首先我们需要一个可访问的外网地址。这个功能在OpenStack体系中是通过Floating IP来实现的。

Floating IP即外网可访问的IP地址，可以绑定到Tenant Network的任意Port。Floating IP的概念是从nova-network继承下来的，虽然实现方式已经完全不一样了。

有了前面对虚拟路由器的讨论，Floating IP的实现实际上是水到渠成的事情。既然Tenant Network和External Network的互通需要连接虚拟路由器，那么Floating IP的实现只需要在这个虚拟路由器上添加相应的DNAT规则即可。

同样以上节例子中的虚拟网络为例，我将Floating IP 192.168.1.31绑定到虚拟机10.0.0.22上，通过iptables查看NAT表：
 
<pre class="lang:default mark:16,19,20 decode:true " >[kongfy@3E ~]$ sudo ip netns exec qrouter-1abfb304-02c3-4809-99d9-e791b672f095 iptables -t nat -S
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N neutron-l3-agent-OUTPUT
-N neutron-l3-agent-POSTROUTING
-N neutron-l3-agent-PREROUTING
-N neutron-l3-agent-float-snat
-N neutron-l3-agent-snat
-N neutron-postrouting-bottom
-A PREROUTING -j neutron-l3-agent-PREROUTING
-A OUTPUT -j neutron-l3-agent-OUTPUT
-A POSTROUTING -j neutron-l3-agent-POSTROUTING
-A POSTROUTING -j neutron-postrouting-bottom
-A neutron-l3-agent-OUTPUT -d 192.168.1.31/32 -j DNAT --to-destination 10.0.0.22
-A neutron-l3-agent-POSTROUTING ! -i qg-e79d220c-32 ! -o qg-e79d220c-32 -m conntrack ! --ctstate DNAT -j ACCEPT
-A neutron-l3-agent-PREROUTING -d 169.254.169.254/32 -i qr-+ -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 9697
-A neutron-l3-agent-PREROUTING -d 192.168.1.31/32 -j DNAT --to-destination 10.0.0.22
-A neutron-l3-agent-float-snat -s 10.0.0.22/32 -j SNAT --to-source 192.168.1.31
-A neutron-l3-agent-snat -j neutron-l3-agent-float-snat
-A neutron-l3-agent-snat -o qg-e79d220c-32 -j SNAT --to-source 192.168.1.30
-A neutron-l3-agent-snat -m mark ! --mark 0x2 -m conntrack --ctstate DNAT -j SNAT --to-source 192.168.1.30
-A neutron-postrouting-bottom -m comment --comment "Perform source NAT on outgoing traffic." -j neutron-l3-agent-snat</pre> 

<h2>9. 数据流</h2>
有了上面这些网络知识，终于可以从全局的角度看看在虚拟网络中数据包的走向了：

<ul>
	<li><strong>同一Tenant Network，同一Compute Node</strong>：数据包经由本机<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>直接到达目的端口</li>
	<li><strong>同一Tenant Network，不同Compute Node</strong>：数据包穿过本机<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>，通过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-tun</span> 上的VLAN/GRE/VXLAN方式到达目标Compute Node，相反方向穿过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-tun</span>和<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>，到达目标端口</li>
	<li><strong>不同Tenant Network</strong>：数据包穿过本机<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>，通过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-tun</span>上的VLAN/GRE/VXLAN方式到达Network Node，相反方向穿过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-tun</span>和<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>到达路由器端口，由路由器转发报文，路径和之前描述的是一样的</li>
	<li><strong>访问External Network</strong>：数据包穿过本机 <span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>，通过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-tun</span>上的VLAN/GRE/VXLAN方式到达Network Node，相反方向穿过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-tun</span>和<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>到达路由器端口，由路由器执行NAT后通过<span class="lang:default highlight:0 decode:true  crayon-inline " >br-ex</span>发送到External Network</li>
</ul>

好吧，我承认我偷懒了...画图画累了，请各位自行脑补...

<h2>10. 安全组 & 访问规则</h2>
在结束对Neutron虚拟网络的实现之前，还有一个必须要提到的部分：虚拟机的安全组和访问规则。这是整个Neutron虚拟网络实现中比较tricky的部分，为什么这么说呢？请看下图：

[caption id="attachment_1240" align="aligncenter" width="697"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/33112565-CE51-4895-B067-652BCE4832A6.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/33112565-CE51-4895-B067-652BCE4832A6.jpg" alt="“多余”的网桥？" width="697" height="469" class="size-full wp-image-1240" /></a> “多余”的网桥？[/caption]

图是从OpenStack的文档中借来的，主要看我用红色边框框起来的部分，为什么虚拟机不能直接接在<span class="lang:default highlight:0 decode:true  crayon-inline " >br-int</span>上呢？而是似乎很没用的连接了一个Linux Bridge？答案是为了实现虚拟机的安全组和访问规则功能，这个功能不能直接用OpenvSwitch实现（原因没有仔细研究），所以Neutron做出了妥协。

在Compute Node上使用iptables可以对应虚拟机的详细规则，<span class="lang:default highlight:0 decode:true  crayon-inline " >tapf6da39de-53</span>是我想要查询的虚拟机的TAP设备：

<pre class="lang:sh decode:true " >[kongfy@3E ~]$ sudo iptables -S | grep tapf6da39de-53
-A neutron-openvswi-FORWARD -m physdev --physdev-out tapf6da39de-53 --physdev-is-bridged -m comment --comment "Direct traffic from the VM interface to the security group chain." -j neutron-openvswi-sg-chain
-A neutron-openvswi-FORWARD -m physdev --physdev-in tapf6da39de-53 --physdev-is-bridged -m comment --comment "Direct traffic from the VM interface to the security group chain." -j neutron-openvswi-sg-chain
-A neutron-openvswi-INPUT -m physdev --physdev-in tapf6da39de-53 --physdev-is-bridged -m comment --comment "Direct incoming traffic from VM to the security group chain." -j neutron-openvswi-of6da39de-5
-A neutron-openvswi-sg-chain -m physdev --physdev-out tapf6da39de-53 --physdev-is-bridged -m comment --comment "Jump to the VM specific chain." -j neutron-openvswi-if6da39de-5
-A neutron-openvswi-sg-chain -m physdev --physdev-in tapf6da39de-53 --physdev-is-bridged -m comment --comment "Jump to the VM specific chain." -j neutron-openvswi-of6da39de-5</pre> 

Chain<span class="lang:default highlight:0 decode:true  crayon-inline " >neutron-openvswi-if6da39de-5</span>控制进入虚拟的规则：

<pre class="lang:sh decode:true " >[kongfy@3E ~]$ sudo iptables -L neutron-openvswi-if6da39de-5
Chain neutron-openvswi-if6da39de-5 (1 references)
target     prot opt source               destination
DROP       all  --  anywhere             anywhere             state INVALID /* Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack. */
RETURN     all  --  anywhere             anywhere             state RELATED,ESTABLISHED /* Direct packets associated with a known session to the RETURN chain. */
RETURN     udp  --  10.0.0.2             anywhere             udp spt:bootps dpt:bootpc
RETURN     tcp  --  anywhere             anywhere             tcp multiport dports tcpmux:65535
RETURN     all  --  anywhere             anywhere             match-set NETIPv4d2c15a2d-d070-4630-a src
RETURN     icmp --  anywhere             anywhere
neutron-openvswi-sg-fallback  all  --  anywhere             anywhere             /* Send unmatched traffic to the fallback chain. */</pre> 

Chain<span class="lang:default highlight:0 decode:true  crayon-inline " >neutron-openvswi-of6da39de-5</span>控制从虚拟机出去的规则：

<pre class="lang:sh decode:true " >[kongfy@3E ~]$ sudo iptables -L neutron-openvswi-of6da39de-5
Chain neutron-openvswi-of6da39de-5 (2 references)
target     prot opt source               destination
RETURN     udp  --  anywhere             anywhere             udp spt:bootpc dpt:bootps /* Allow DHCP client traffic. */
neutron-openvswi-sf6da39de-5  all  --  anywhere             anywhere
DROP       udp  --  anywhere             anywhere             udp spt:bootps dpt:bootpc /* Prevent DHCP Spoofing by VM. */
DROP       all  --  anywhere             anywhere             state INVALID /* Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack. */
RETURN     all  --  anywhere             anywhere             state RELATED,ESTABLISHED /* Direct packets associated with a known session to the RETURN chain. */
RETURN     all  --  anywhere             anywhere
neutron-openvswi-sg-fallback  all  --  anywhere             anywhere             /* Send unmatched traffic to the fallback chain. */</pre>

本文到这里可以说达到了阶段性的胜利：完成了Neutron Core Plugin的讨论，探索了Neutron是如何完成虚拟的2&3层网络的。如果你依然感觉一头雾水...我只能深表抱歉，你可以参照官方文档和我下面给出的参考资料来更加详细的了解这部分内容。 ^o^

<hr />

<h2>11. LBaaS</h2>
本文的最后一部分内容，介绍一下OpenStack提供的负载均衡服务：LBaaS，这个项目目前属于Neutron项目中，作为Neutron的一个Service Plugin。

负载均衡的功能想必不需要多解释了，无非就是把流量尽可能均衡的分配到后端的各台服务器上，现在流行的解决方案有很多，如硬件的F5、软件的LVS、HAProxy、Nginx等。这些负载均衡手段虽然工作的层次有所不同，但根本目的都是一样的：让各个后端机器获得尽可能均匀的复杂以提高集群整体的处理能力。

那么在云环境中负载均衡很自然的也是非常重要的技术，租户所创建的虚拟机之间也需要进行负载均衡。为什么不能直接使用更大的虚拟机呢？好问题。一来虚拟机的纵向扩展将使服务出现Down time；二来纵向拓展是有上限的：不可能超过真实服务器的承受能力；三来如果一直开着一台很大的低负载虚拟机，就租户而言从计费角度上不太划算，远不如按需的启动和关闭虚拟机来的划算。

根据负载均衡的特点，社区在OpenStack中把负载均衡抽象成下面的概念：

[caption id="attachment_1248" align="aligncenter" width="757"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas1.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas1.png" alt="OpenStack的负载均衡模型" width="757" height="382" class="size-full wp-image-1248" /></a> OpenStack的负载均衡模型[/caption]

其中最为核心的是Pool，代表负载后端的虚拟机池，Pool中包含想要进行负载均衡的虚拟机作为Member，并且要为Pool整体绑定一个VIP作为所有Member的虚拟IP，所有访问虚拟IP的请求将根据设定的负载均衡规则分配到Pool中的Member虚拟机上。最后再为这个VIP对应的Port绑定一个Floating IP，就可以从外网愉快的使用负载均衡下的虚拟机集群了~

实现的网络逻辑如下图所示：

[caption id="attachment_1252" align="aligncenter" width="865"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/05/lbaas2.png" alt="负载均衡网络示意图" width="865" height="463" class="size-full wp-image-1252" /></a> 负载均衡网络示意图[/caption]

LBaaS利用Neutron的网络服务，将Floating IP绑定到Load Balancer的Port上，然后将这些流量通过内部网络均衡的分配给各个虚拟机。很容易看出，最核心的部分就是Load Balancer的实现了，那么Load Balancer是怎么实现的呢？

答案是<strong>没有实现</strong>...OpenStack直接采用各种开源可用的负载均衡项目来完成负载均衡的任务，默认是HAProxy。LBaaS所做的任务就是根据用户提出的负载均衡要求生成符合要求的HAProxy配置文件并启动HAProxy。

我在我的实验环境中为三台虚拟机（10.0.0.20, 10.0.0.21, 10.0.0.0.22）的80端口（HTTP）配置了负载均衡服务，使用10.0.0.23作为VIP，果然发现了HAProxy进程：

<pre class="lang:sh mark:4 decode:true " >[kongfy@3E ~]$ ps aux | grep haproxy
kongfy    3008  0.0  0.0 112612   740 pts/0    S+   11:42   0:00 grep --color=auto haproxy
kongfy   12684  2.1  0.9 199700 35596 pts/14   S+   May05 253:32 python /usr/bin/neutron-lbaas-agent --config-file /etc/neutron/neutron.conf --config-file=/etc/neutron/services/loadbalancer/haproxy/lbaas_agent.ini
nobody   23906  0.0  0.0  49692  1300 ?        Ss   May09   0:20 haproxy -f /opt/stack/data/neutron/lbaas/49717bc1-204c-42a8-9cc2-46db88a70365/conf -p /opt/stack/data/neutron/lbaas/49717bc1-204c-42a8-9cc2-46db88a70365/pid -sf 28415</pre> 

顺藤摸瓜看看HAProxy使用的配置文件：
 
<pre class="lang:default highlight:0 decode:true " >global
	daemon
	user nobody
	group nobody
	log /dev/log local0
	log /dev/log local1 notice
	stats socket /opt/stack/data/neutron/lbaas/49717bc1-204c-42a8-9cc2-46db88a70365/sock mode 0666 level user
defaults
	log global
	retries 3
	option redispatch
	timeout connect 5000
	timeout client 50000
	timeout server 50000
frontend 8b1d4cd6-c07f-4b61-996b-8e72fb830eb9
	option tcplog
	bind 10.0.0.23:80
	mode http
	default_backend 49717bc1-204c-42a8-9cc2-46db88a70365
	option forwardfor
backend 49717bc1-204c-42a8-9cc2-46db88a70365
	mode http
	balance roundrobin
	option forwardfor
	server 4668dae7-3259-4e2c-9e9e-870d50e8ded6 10.0.0.20:80 weight 1
	server 90f9f52b-ea36-4dfc-b9bc-c1d43a8310e5 10.0.0.21:80 weight 5
	server 913ccb64-7034-4295-8c73-44b3d904b775 10.0.0.22:80 weight 1</pre> 

Bingo!

<hr />

<h2>参考资料</h2>
<ul>
	<li><a href="http://docs.openstack.org/admin-guide-cloud/content/network-connectivity.html" target="_blank">Network connectivity for physical hosts - OpenStack Cloud Administrator Guide</a></li>
	<li><a href="http://docs.openstack.org/admin-guide-cloud/content/tenant-provider-networks.html" target="_blank">Tenant and provider networks - OpenStack Cloud Administrator Guide</a></li>
	<li><a href="http://docs.openstack.org/admin-guide-cloud/content/under_the_hood_openvswitch.html" target="_blank">Open vSwitch - OpenStack Cloud Administrator Guide</a></li>
	<li><a href="https://developer.rackspace.com/blog/neutron-networking-vlan-provider-networks/" target="_blank">Neutron Networking: VLAN Provider Networks</a></li>
	<li><a href="https://developer.rackspace.com/blog/neutron-networking-l3-agent/" target="_blank">Neutron Networking: Neutron Routers and the L3 Agent</a></li>
	<li><a href="http://assafmuller.com/2014/02/03/fosdem-14/" target="_blank">Tunnels as a Connectivity and Segmentation Solution for Virtualized Networks – FOSDEM ’14</a></li>
	<li><a href="http://assafmuller.com/2013/10/14/gre-tunnels-in-openstack-neutron/" target="_blank">GRE Tunnels in OpenStack Neutron</a></li>
	<li><a href="https://www.youtube.com/watch?v=4CKSm3bwv78" target="_blank">OpenStack Networking (Neutron) - 2014 Update</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1103</wp:post_id>
		<wp:post_date><![CDATA[2015-05-14 00:10:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-13 16:10:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[openstack%e7%bd%91%e7%bb%9c%e8%bf%b7%e5%ae%ab%ef%bc%9aneutron%e4%bb%a5%e5%8f%8albaas]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="neutron"><![CDATA[Neutron]]></category>
		<category domain="post_tag" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="category" nicename="cloud-computing"><![CDATA[云计算]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[openstack neutron]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[61]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3760826424]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1139</wp:comment_id>
			<wp:comment_author><![CDATA[yhx]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[scbzyhx@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.212.87.102]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-05-14 14:06:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-05-14 06:06:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太牛了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2023929196]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1140</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.212.85.158]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-05-14 14:12:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-05-14 06:12:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[见笑了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1139</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2023929196]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2023935772]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1143</wp:comment_id>
			<wp:comment_author><![CDATA[MatheMatrix]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mathematrix@foxmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://mytrix.me/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[111.26.0.58]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-06-21 18:41:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-06-21 10:41:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[作者刚接触 OpenStack 网络吗？能分析这么清楚很不错了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2091089503]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1144</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[104.131.128.67]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-06-22 14:56:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-06-22 06:56:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[为了搞LbaaS被逼了解Neutron...thx~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1143</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2091089503]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2092370157]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Hello, SciPy!</title>
		<link>http://blog.kongfy.com/2015/06/hello-scipy/</link>
		<pubDate>Mon, 22 Jun 2015 09:43:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1278</guid>
		<description></description>
		<content:encoded><![CDATA[“学而时习之，不亦乐乎”，利用放假几天时间，简单复习了一下之前学习的Machine Learning课程，并且用刚上手没两天的SciPy重新完成了大部分Ng的课后作业，SciPy真的非常好用~

[caption id="attachment_1281" align="aligncenter" width="818"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/06/scipy.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/06/scipy.jpg" alt="SciPy" width="818" height="269" class="size-full wp-image-1281" /></a> SciPy[/caption]

上图是SciPy官方网站对SciPy的介绍，SciPy并不是单个开源项目，而是一组开源项目共同构成的Python科学计算生态系统，一个非常值得一看的系列Tutorial在<a href="https://www.youtube.com/watch?v=lmoNmY-cmSI&list=PLRJx8WOUx5Xd3_dgw5xRmABUd8MWdsA_C" target="_blank">这里</a>。

下面是重写后的课后练习的notebooks：

<ol>
	<li><a href="http://nbviewer.ipython.org/github/kongfy/ml-007/blob/master/mlclass-ex1/ex1.ipynb" target="_blank">Linear regression</a></li>
	<li><a href="http://nbviewer.ipython.org/github/kongfy/ml-007/blob/master/mlclass-ex2/ex2.ipynb" target="_blank">Logistic Regression</a></li>
	<li><a href="http://nbviewer.ipython.org/github/kongfy/ml-007/blob/master/mlclass-ex3/ex3.ipynb" target="_blank">Multi-class Classification</a></li>
	<li><a href="http://nbviewer.ipython.org/github/kongfy/ml-007/blob/master/mlclass-ex5/ex5.ipynb" target="_blank">Learning curve(Bias v.s. Variance)</a></li>
	<li><a href="http://nbviewer.ipython.org/github/kongfy/ml-007/blob/master/mlclass-ex6/ex6.ipynb" target="_blank">SVM</a></li>
	<li><a href="http://nbviewer.ipython.org/github/kongfy/ml-007/blob/master/mlclass-ex7/ex7.ipynb" target="_blank">K-Means & PCA</a></li>
</ol>

神经网络相关的实验还没有重写，sklearn没有提供监督学习的神经网络组件，需要用pylearn2来做，有时间补上。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1278</wp:post_id>
		<wp:post_date><![CDATA[2015-06-22 17:43:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-22 09:43:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-scipy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="scipy"><![CDATA[SciPy]]></category>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3870764592]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于Linux环境C/C++网络框架的一点思考</title>
		<link>http://blog.kongfy.com/2015/07/%e5%85%b3%e4%ba%8elinux%e7%8e%af%e5%a2%83cc%e7%bd%91%e7%bb%9c%e6%a1%86%e6%9e%b6%e7%9a%84%e4%b8%80%e7%82%b9%e6%80%9d%e8%80%83/</link>
		<pubDate>Sat, 18 Jul 2015 09:55:12 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1292</guid>
		<description></description>
		<content:encoded><![CDATA[最近又看了一个网络框架的源码，和之前看过的比起来，应该说是各有特色，互有所长。在这个全民写框架的时代，可能是因为框架（Framework）听起来逼格比较高，所以大家都乐于去写一个自己的“框架”，那么，一个合格的网络框架究竟应该是什么样的？我们又该从何下手？

<h2>什么是网络框架</h2>

网络框架，顾名思义，是给网络应用程序使用的框架，本文中指代在Linux环境下使用C/C++编写的网络服务器框架。用户在使用框架时应该能够做到在对底层网络完全不了解或者所知很少的情况下，轻松实现自己所需要的后台网络服务应用。

<h2>原材料</h2>

听上去似乎很神奇，但实际上网络框架所要完成的只有一件事情——封装。网络框架所做的事情就是将Linux提供的底层网络API进行封装，向用户提供一套没有网络细节的接口。

<!--more-->

在Linux中，我们所用到的网络接口就是《UNIX环境网络编程》中所提到的基本通信接口，下面借用一个非常老套的图来说明这些接口：

[caption id="attachment_1298" align="aligncenter" width="690"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/07/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/07/showimage-10058343-10009581-022efe34cc941f7b1383e7e0805673f9.jpg" alt="Linux网络API" width="690" height="462" class="size-full wp-image-1298" /></a> Linux网络API[/caption]

图的左侧是TCP连接的通信过程，右侧则是UDP连接的通信过程，你可以在任何一本关于网络编程的书或是网站上查到非常详尽的资料，当然最推荐的依然是《UNIX网络编程》以及Linux  <span class="lang:default highlight:0 decode:true  crayon-inline " >man</span> 工具。

在Linux中有了这些网络API，你就可以在TCP、UDP通信上为所欲为了，除了网络之外，作为一个Linux网络服务器框架，无可避免的还需要封装一些其他的API，比如文件读写、进程相关API（如 <span class="lang:default decode:true  crayon-inline " >fork</span> ）、线程库pthread、信号处理、进程间通信IPC等等，这些工作非常零碎，但幸好在著作《UNIX环境高级编程》中都有详尽的描述。

也就是说，如果你想要在Linux上实现一个C/C++的网络框架，必须要首先了解《UNIX环境高级编程》和《UNIX环境网络编程》这两本著作中的内容，如果连可以使用的原材料都不了解，又该如何去进行封装呢？

<h2>目标</h2>

在了解了能够使用的工具后，具体的封装就完全是一个见仁见智的过程了，对用户接口的设计并没有所谓的规范，也并不是一成不变的。每个框架针对自己所面向的应用类别和用户，都会做出最为合适的接口设计。

举例来说，有的框架面向通用的网络应用编写，向用户提供多个类似回调函数的接口，即当一个TCP连接创建后，执行用户提供的某个函数；当数据到来，执行用户提供的函数等等，做到了网络接口细节的隐藏。而有的框架则面向更加特别的应用场景，在TCP之上构造应用层协议，通过复用单TCP连接实现多个对话并发，并且封装多线程处理回调函数，做到了非常高的处理性能。

这些接口的设计并没有优劣之分，都是为自己所面向的应用类型特别设计的，所以做网络框架的第一步必须认识清楚自己所要服务的应用是什么样的，这样才能做出真正有价值的网络框架。

<h2>这很难么？</h2>

那么，在有了明确的设计目标后，实现这样的网络封装的难度又如何呢？

仅仅以实现一个网络框架作为要求的话，是很容易的，只要修过计算机网络的学生应该都可以完成这样的工作。但是，想要实现一个好的网络框架，却是一件非常困难的工作（似乎在计算机领域很多事情都是这样的），下面就来谈谈在实现一个网络框架时需要考虑的一些问题。

<h3>稳定</h3>

首先第一点必须是稳定。

应用开发者对于网络框架的期望值很高，不难想象当他们发现服务崩溃而原因居然是框架bug导致其心情会是多么的崩溃，所以一个实现良好的网络框架，稳定是重中之重。如果不能稳定运行，其他什么高大上的功能都无力回天。

<h3>高性能</h3>

第二点才是性能。

应用开发者期望可以通过简单的配置就可以做出承载很大压力的网络服务，这样的责任自然而然的转嫁给了框架开发者。如何为应用开发者提供良好的性能保证是框架设计初期就一定要考虑好的。包括框架是否该采用多进程、多线程甚至协程来处理请求？框架该采用怎样的I/O模型？等等这些问题是决定一个网络框架性能的重要因素。

举例来说：epoll想必大家都耳熟能详了，作为Linux独家提供的基于事件响应的I/O多路复用模型，epoll在后台开发尤其是网络应用开发中早已大行其道。假如你准备在你的网络框架中采用epoll来监听TCP连接，并且采用了多进程的模型来加强对CPU的利用，那么，该如何处理epoll造成的惊群问题？又比如说， <span class="lang:default decode:true  crayon-inline " >epoll_create</span> 该写在 <span class="lang:default decode:true  crayon-inline " >fork</span> 之前还是之后呢？

因为对性能的苛求，看似无关紧要的细节在网络框架的开发中被极大的放大了。

<h3>内存管理</h3>

C/C++似乎永远逃脱不了管理内存的诅咒，为了应用开发者的幸福，框架开发者必须尽可能的承担内存管理的职责。

在网络编程中的 <span class="lang:default decode:true  crayon-inline " >read</span> 、 <span class="lang:default decode:true  crayon-inline " >write</span> 、 <span class="lang:default decode:true  crayon-inline " >sendto</span> 、 <span class="lang:default decode:true  crayon-inline " >recv</span> 等等接口中，无一例外都需要提供用户空间缓冲区，每条TCP连接都需要这样的空间来保证数据的独立性。显然作为框架开发者不能将缓冲区的管理交给应用开发者，也不可能频繁的为每一条连接申请、释放内存。因此，内存池似乎成了每个网络框架中唯一没有变化的设计，其中的差别在于内存池中内存的管理算法（伙伴系统的上镜率很高）和接口的实现细节。

<h2>其他</h2>

除了对基础网络需求的封装，针对特殊的应用场景网络框架中也常常会封装一些其他通用的工具，比如Log模块，自定义的哈希表模块以及数据结构序列化、反序列化的模块等等。

<h2>总之</h2>

实现一个网络框架并不难，但实现一个好的网络框架很难。

如何实现一个好的网络框架基于对应用场景的<strong>深刻理解</strong>之上，再加上非常扎实的基本功方能完成。在没有搞明白现有的网络框架为何不能满足自己的需求之前，千万不要去写自己的网络框架，否则只会是无用功。

以上是我在学习网络框架源码过程中产生的一点粗糙的思考，分享给大家。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1292</wp:post_id>
		<wp:post_date><![CDATA[2015-07-18 17:55:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-18 09:55:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8elinux%e7%8e%af%e5%a2%83cc%e7%bd%91%e7%bb%9c%e6%a1%86%e6%9e%b6%e7%9a%84%e4%b8%80%e7%82%b9%e6%80%9d%e8%80%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3946121427]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TCP Maximum Segment Size (MSS)</title>
		<link>http://blog.kongfy.com/2015/07/tcp-maximum-segment-size-mss/</link>
		<pubDate>Sun, 19 Jul 2015 08:15:24 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1310</guid>
		<description></description>
		<content:encoded><![CDATA[这篇是一个小小的查缺补漏，还记得大三网络实验最后助教检查实验问过这个问题：“MSS是干什么的？”，当时背了个定义蒙混过去了，没有仔细理解，现在又遇到了，补上~

<h2>MSS是什么？</h2>
下图中看到的是TCP连接发送和接收的过程示意图，最大报文段长度（MSS）的作用是限制在TCP层产生的报文段的最大长度（当然要在滑动窗口允许的前提下）。

[caption id="attachment_1311" align="aligncenter" width="495"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/07/ipov.fig88.epsi_.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/07/ipov.fig88.epsi_.gif" alt="TCP发送接收过程图" width="495" height="353" class="size-full wp-image-1311" /></a> TCP发送接收过程图[/caption]

比如如果MSS为1000个字节，每个TCP报文的最大长度为1020字节（附加20字节TCP头部），之后传递到IP层加装20字节IP头部封装成为IP报文利用链路层发送。

<!--more-->

<h2>为什么要有MSS？</h2>
知其然更要知其所有然，知道了MSS的作用，那么为什么我们需要MSS的功能呢？难道不能生成一个任意大的TCP报文传递给IP层么？

要理解这个问题，就一定要牵扯到MTU的概念。<a href="https://en.wikipedia.org/wiki/Maximum_transmission_unit" target="_blank">MTU（最大传输单元）</a>是链路层的概念，指的是一条路径上的允许传输的最大单元的大小。比如以太网的MTU为1500，这意味着以太网中通信的双方能够交互的最大单个报文的大小不能超过1500字节，在IP层由于有20字节的IP头部，则IP载荷不能超过1480。也就是说超过这个大小的IP报文必须经过分段才能够发送。

那么MTU和MSS又有什么必然联系呢？虽然MTU限制了IP层的报文大小，但分层网络模型本来不就是为了对上层提供透明的服务么？即使一个很大的TCP报文传递给IP层，IP层也应该可以经过分段等手段成功传输报文才对。

理论上来说是没错的，UDP中就不存在MSS，UDP生成任意大的UDP报文，然后包装成IP报文根据底层网络的MTU分段进行发送。MSS存在的本质原因就是TCP和UDP的根本不同：TCP提供<strong>稳定</strong>的连接。假设生成了很大的TCP报文，经过IP分段进行发送，而其中一个IP分段丢失了，则TCP协议需要重发整个TCP报文，造成了严重的网络性能浪费，而相对的由于UDP无保证的性质，即使丢失了IP分段也不会进行重发。所以说，MSS存在的核心作用，就是避免由于IP层对TCP报文进行分段而导致的性能下降。

<h2>如何挑选合适的MSS？</h2>
从上面的分析我们可以看到，挑选MSS的关键在于在避免IP层对TCP报文进行分段的基础上尽可能的提高传输效率。所谓传输效率，即数据载荷占整个报文大小的比重，比如如果MSS设置为40，则80字节长的IP报文中最多只有40字节的数据，传输效率仅为50%，因此，通常将MSS设置为MTU-40（20字节IP头部+20字节TCP头部）。

这一过程是在TCP连接建立时由连接双方商定的，需要注意的是：双方所得到的MSS可能并不相同。另外，建立MSS所基于的MTU的值基于<a href="https://en.wikipedia.org/wiki/Path_MTU_Discovery" target="_blank">路径MTU发现</a>机制获取，这又是另外一个晦涩的主题了。

<h2>参考资料</h2>
<ul>
	<li><a href="http://www.tcpipguide.com/free/t_TCPMaximumSegmentSizeMSSandRelationshiptoIPDatagra-2.htm" target="_blank">TCP Maximum Segment Size (MSS) and Relationship to IP Datagram Size </a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1310</wp:post_id>
		<wp:post_date><![CDATA[2015-07-19 16:15:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-19 08:15:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tcp-maximum-segment-size-mss]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ip"><![CDATA[IP]]></category>
		<category domain="post_tag" nicename="tcp"><![CDATA[TCP]]></category>
		<category domain="category" nicename="network"><![CDATA[网络]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3948767361]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1147</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.17.36.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-28 13:36:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-28 05:36:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[赞！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2160690897]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1409</wp:comment_id>
			<wp:comment_author><![CDATA[TCP MSS - 算法网]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://itpcb.com/a/1503136</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.128.14.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-10-30 10:41:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-10-30 02:41:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] http://blog.kongfy.com/2015/07/tcp-maximum-segment-size-mss/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635561709.62573;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>探索C++虚函数在g++中的实现</title>
		<link>http://blog.kongfy.com/2015/08/%e6%8e%a2%e7%b4%a2c%e8%99%9a%e5%87%bd%e6%95%b0%e5%9c%a8g%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0/</link>
		<pubDate>Mon, 03 Aug 2015 16:20:32 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1325</guid>
		<description></description>
		<content:encoded><![CDATA[本文是我在追查一个诡异core问题的过程中收获的一点心得，把公司项目相关的背景和特定条件去掉后，仅取其中通用的C++虚函数实现部分知识记录于此。

在开始之前，原谅我先借用一张图黑一下C++：

[caption id="attachment_1353" align="aligncenter" width="586"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/08/CPPvsC.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/08/CPPvsC.png" alt="“无敌”的C++" width="586" height="314" class="size-full wp-image-1353" /></a> “无敌”的C++[/caption]

如果你也在写C++，请一定小心...至少，你要先有所了解：<strong>当你在写虚函数的时候，g++在写什么？</strong>

<!--more-->

<h2>先写个例子</h2>

为了探索C++虚函数的实现，我们首先编写几个用来测试的类，代码如下：

<pre class="lang:c++ decode:true " >#include &lt;iostream&gt;

using namespace std;

class Base1
{
public:
    virtual void f() {
        cout &lt;&lt; "Base1::f()" &lt;&lt; endl;
    }
};

class Base2
{
public:
    virtual void g() {
        cout &lt;&lt; "Base2::g()" &lt;&lt; endl;
    }
};

class Derived : public Base1, public Base2
{
public:
    virtual void f() {
        cout &lt;&lt; "Derived::f()" &lt;&lt; endl;
    }

    virtual void g() {
        cout &lt;&lt; "Derived::g()" &lt;&lt; endl;
    }

    virtual void h() {
        cout &lt;&lt; "Derived::h()" &lt;&lt; endl;
    }
};

int main(int argc, char *argv[])
{
    Derived ins;
    Base1 &amp;b1 = ins;
    Base2 &amp;b2 = ins;
    Derived &amp;d = ins;

    b1.f();
    b2.g();
    d.f();
    d.g();
    d.h();
}
</pre>

代码采用了多继承，是为了更多的分析出g++的实现本质，用UML简单的画一下继承关系：

[caption id="attachment_1328" align="aligncenter" width="310"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/08/derivedclass.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/08/derivedclass.png" alt="示例代码UML图" width="310" height="193" class="size-full wp-image-1328" /></a> 示例代码UML图[/caption]

代码的输出结果和预期的一致，C++实现了虚函数覆盖功能，代码输出如下：

<pre class="lang:default highlight:0 decode:true " >Derived::f()
Derived::g()
Derived::f()
Derived::g()
Derived::h()</pre>

<h2>开始分析！</h2>

我写这篇文章的重点是尝试解释g++编译在底层是如何实现虚函数覆盖和动态绑定的，因此我假定你已经明白基本的虚函数概念以及虚函数表（vtbl）和虚函数表指针（vptr）的概念和在继承实现中所承担的作用，如果你还不清楚这些概念，建议你在继续阅读下面的分析前先补习一下相关知识，陈皓的<a href="http://blog.csdn.net/haoel/article/details/1948051" target="_blank">《C++虚函数表解析》</a>系列是一个不错的选择。

通过本文，我将尝试解答下面这三个问题：

<ol>
    <li>g++如何实现虚函数的动态绑定？</li>
    <li>vtbl在何时被创建？vptr又是在何时被初始化？</li>
    <li>在Linux中运行的C++程序虚拟存储器中，vptr、vtbl存放在虚拟存储的什么位置？</li>
</ol>

首先是第一个问题：

<h3>g++如何实现虚函数的动态绑定？</h3>

这个问题乍看简单，大家都知道是通过vptr和vtbl实现的，那就让我们刨根问底的看一看，g++是如何利用vptr和vtbl实现的。

第一步，使用 <span class="lang:default highlight:0 decode:true  crayon-inline " >-fdump-class-hierarchy</span> 参数导出g++生成的类内存结构：

<pre class="lang:default highlight:0 decode:true " >Vtable for Base1
Base1::_ZTV5Base1: 3u entries
0     (int (*)(...))0
4     (int (*)(...))(&amp; _ZTI5Base1)
8     Base1::f

Class Base1
   size=4 align=4
   base size=4 base align=4
Base1 (0xb6acb438) 0 nearly-empty
    vptr=((&amp; Base1::_ZTV5Base1) + 8u)

Vtable for Base2
Base2::_ZTV5Base2: 3u entries
0     (int (*)(...))0
4     (int (*)(...))(&amp; _ZTI5Base2)
8     Base2::g

Class Base2
   size=4 align=4
   base size=4 base align=4
Base2 (0xb6acb474) 0 nearly-empty
    vptr=((&amp; Base2::_ZTV5Base2) + 8u)

Vtable for Derived
Derived::_ZTV7Derived: 8u entries
0     (int (*)(...))0
4     (int (*)(...))(&amp; _ZTI7Derived)
8     Derived::f
12    Derived::g
16    Derived::h
20    (int (*)(...))-0x000000004
24    (int (*)(...))(&amp; _ZTI7Derived)
28    Derived::_ZThn4_N7Derived1gEv

Class Derived
   size=8 align=4
   base size=8 base align=4
Derived (0xb6b12780) 0
    vptr=((&amp; Derived::_ZTV7Derived) + 8u)
  Base1 (0xb6acb4b0) 0 nearly-empty
      primary-for Derived (0xb6b12780)
  Base2 (0xb6acb4ec) 4 nearly-empty
      vptr=((&amp; Derived::_ZTV7Derived) + 28u)</pre>

如果看不明白这些乱七八糟的输出，没关系（当然能看懂更好），把上面的输出转换成图的形式就清楚了：

[caption id="attachment_1336" align="aligncenter" width="490"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/08/vtbl.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/08/vtbl.png" alt="vptr和vtbl" width="490" height="463" class="size-full wp-image-1336" /></a> vptr和vtbl[/caption]

其中有几点尤其值得注意：

<ol>
    <li>我用来测试的机器是32位机，所有vptr占4个字节，每个vtbl中的函数指针也是4个字节</li>
    <li>每个类的主要（primal）vptr放在类内存空间的起始位置（由于我没有声明任何成员变量，可能看不清楚）</li>
    <li>在多继承中，对应各个基类的vptr按继承顺序依次放置在类内存空间中，且子类与第一个基类共用同一个vptr</li>
    <li>子类中声明的虚函数除了覆盖各个基类对应函数的指针外，还额外添加一份到第一个基类的vptr中（体现了共用的意义）</li>
</ol>

有了内存布局后，接下来观察g++是如何在这样的内存布局上进行动态绑定的。

<strong>g++对每个类的指针或引用对象，如果是其类声明中虚函数，使用位于其内存空间首地址上的vptr寻找找到vtbl进而得到函数地址。如果是父类声明而子类未覆盖的虚函数，使用对应父类的vptr进行寻址。</strong>

先来验证一下，使用  <span class="lang:default highlight:0 decode:true  crayon-inline " >objdump -S</span> 得到 <span class="lang:default highlight:0 decode:true  crayon-inline " >b1.f()</span> 的汇编指令：

<pre class="lang:asm decode:true " >    b1.f();
 8048734:       8b 44 24 24             mov    0x24(%esp),%eax    # 得到Base1对象的地址
 8048738:       8b 00                   mov    (%eax),%eax        # 对对象首地址上的vptr进行解引用，得到vtbl地址
 804873a:       8b 10                   mov    (%eax),%edx        # 解引用vtbl上第一个虚函数的地址
 804873c:       8b 44 24 24             mov    0x24(%esp),%eax
 8048740:       89 04 24                mov    %eax,(%esp)
 8048743:       ff d2                   call   *%edx              # 调用函数
</pre>

其过程和我们的分析完全一致，聪明的你可能发现了，b2怎么办呢？Derived类的实例内存首地址上的vptr并不是Base2类的啊！答案实际上是因为g++在引用赋值语句 <span class="lang:c++ decode:true  crayon-inline " >Base2 &amp;b2 = ins</span> 上动了手脚：

<pre class="lang:asm mark:8-11 decode:true " >    Derived ins;
 804870d:       8d 44 24 1c             lea    0x1c(%esp),%eax
 8048711:       89 04 24                mov    %eax,(%esp)
 8048714:       e8 c3 01 00 00          call   80488dc &lt;_ZN7DerivedC1Ev&gt;
    Base1 &amp;b1 = ins;
 8048719:       8d 44 24 1c             lea    0x1c(%esp),%eax
 804871d:       89 44 24 24             mov    %eax,0x24(%esp)
    Base2 &amp;b2 = ins;
 8048721:       8d 44 24 1c             lea    0x1c(%esp),%eax   # 获得ins实例地址
 8048725:       83 c0 04                add    $0x4,%eax         # 添加一个指针的偏移量
 8048728:       89 44 24 28             mov    %eax,0x28(%esp)   # 初始化引用
    Derived &amp;d = ins;
 804872c:       8d 44 24 1c             lea    0x1c(%esp),%eax
 8048730:       89 44 24 2c             mov    %eax,0x2c(%esp)</pre>

<strong>虽然是指向同一个实例的引用，根据引用类型的不同，g++编译器会为不同的引用赋予不同的地址</strong>。例如b2就获得一个指针的偏移量，因此才保证了vptr的正确性。

PS：我们顺便也证明了C++中的引用的真实身份就是指针...

接下来进入第二个问题：

<h3>vtbl在何时被创建？vptr又是在何时被初始化？</h3>

既然我们已经知道了g++是如何通过vptr和vtbl来实现虚函数魔法的，那么vptr和vtbl又是在什么时候被创建的呢？

vptr是一个相对容易思考的问题，因为vptr明确的属于一个实例，所以vptr的赋值理应放在类的构造函数中。<strong>g++为每个有虚函数的类在构造函数末尾中隐式的添加了为vptr赋值的操作</strong>。

同样通过生成的汇编代码验证：

<pre class="lang:asm mark:13-16 decode:true " >class Derived : public Base1, public Base2
{
 80488dc:       55                      push   %ebp
 80488dd:       89 e5                   mov    %esp,%ebp
 80488df:       83 ec 18                sub    $0x18,%esp
 80488e2:       8b 45 08                mov    0x8(%ebp),%eax
 80488e5:       89 04 24                mov    %eax,(%esp)
 80488e8:       e8 d3 ff ff ff          call   80488c0 &lt;_ZN5Base1C1Ev&gt;
 80488ed:       8b 45 08                mov    0x8(%ebp),%eax
 80488f0:       83 c0 04                add    $0x4,%eax
 80488f3:       89 04 24                mov    %eax,(%esp)
 80488f6:       e8 d3 ff ff ff          call   80488ce &lt;_ZN5Base2C1Ev&gt;
 80488fb:       8b 45 08                mov    0x8(%ebp),%eax
 80488fe:       c7 00 48 8a 04 08       movl   $0x8048a48,(%eax)
 8048904:       8b 45 08                mov    0x8(%ebp),%eax
 8048907:       c7 40 04 5c 8a 04 08    movl   $0x8048a5c,0x4(%eax)
 804890e:       c9                      leave
 804890f:       c3                      ret</pre>

可以看到在代码中，Derived类的构造函数为实例的两个vptr赋初值，可是，这两个初值居然是立即数！立即数！立即数！<strong>这说明了vtbl的生成并不是运行时的，而是在编译期就已经确定了存放在这两个地址上的</strong>！

这个地址不出意料的属于.rodata（只读数据段），使用 <span class="lang:default highlight:0 decode:true  crayon-inline " >objdump -s -j .rodata</span> 提取出对应的内存观察：

<pre class="lang:default mark:7-8 highlight:0 decode:true " > 80489e0 03000000 01000200 00000000 42617365  ............Base
 80489f0 313a3a66 28290042 61736532 3a3a6728  1::f().Base2::g(
 8048a00 29004465 72697665 643a3a66 28290044  ).Derived::f().D
 8048a10 65726976 65643a3a 67282900 44657269  erived::g().Deri
 8048a20 7665643a 3a682829 00000000 00000000  ved::h()........
 8048a30 00000000 00000000 00000000 00000000  ................
 8048a40 00000000 a08a0408 34880408 68880408  ........4...h...
 8048a50 94880408 fcffffff a08a0408 60880408  ............`...
 8048a60 00000000 c88a0408 08880408 00000000  ................
 8048a70 00000000 d88a0408 dc870408 37446572  ............7Der
 8048a80 69766564 00000000 00000000 00000000  ived............
 8048a90 00000000 00000000 00000000 00000000  ................
 8048aa0 889f0408 7c8a0408 00000000 02000000  ....|...........
 8048ab0 d88a0408 02000000 c88a0408 02040000  ................
 8048ac0 35426173 65320000 a89e0408 c08a0408  5Base2..........
 8048ad0 35426173 65310000 a89e0408 d08a0408  5Base1..........</pre>

由于程序运行的机器是小端机，经过简单的转换就可以得到第一个vptr所指向的内存中的第一条数据为0x08048834，如果把这个数据解释为函数地址到汇编文件中查找，会得到：

<pre class="lang:asm decode:true " >08048834 &lt;_ZN7Derived1fEv&gt;:
};

class Derived : public Base1, public Base2
{
public:
    virtual void f() {
 8048834:       55                      push   %ebp
 8048835:       89 e5                   mov    %esp,%ebp
 8048837:       83 ec 18                sub    $0x18,%esp</pre>

Bingo！<strong>g++在编译期就为每个类确定了vtbl的内容，并且在构造函数中添加相应代码使vptr能够指向已经填好的vtbl的地址</strong>。

这也同时为我们解答了第三个问题：

<h3>在Linux中运行的C++程序虚拟存储器中，vptr、vtbl存放在虚拟存储的什么位置？</h3>

直接看图：

[caption id="attachment_1348" align="aligncenter" width="329"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/08/processmem.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/08/processmem.png" alt="虚函数在虚拟存储器中的位置" width="329" height="733" class="size-full wp-image-1348" /></a> 虚函数在虚拟存储器中的位置[/caption]

图中灰色部分应该是你已经熟悉的，彩色部分内容和相关联的箭头描述了虚函数调用的过程（图中展示的是通过new在堆区创建实例的情况，与示例代码有所区别，小失误，不要在意）：<strong>当调用虚函数时，首先通过位于栈区的实例的指针找到位于堆区中的实例地址，然后通过实例内存开头处的vptr找到位于.rodata段的vtbl，再根据偏移量找到想要调用的函数地址，最后跳转到代码段中的函数地址执行目标函数</strong>。

<h3>总结</h3>

研究这些问题的起因是因为公司代码出现了非常奇葩的行为，经过追查定位到虚函数表出了问题，因此才有机会脚踏实地的对虚函数实现进行一番探索。

也许你会想，即使我不明白这些底层原理，也一样可以正常的使用虚函数，也一样可以写出很好的面相对象的代码啊？

这一点儿也没有错，但是，C++作为全宇宙最复杂的程序设计语言，它提供的功能异常强大，无异于武侠小说中锋利无比的屠龙宝刀。但武功不好的菜鸟如果胡乱舞弄宝刀，却很容易反被其所伤。只有了解了C++底层的原理和机制，才能让我们把C++这把屠龙宝刀使用的更加得心应手，变化出更加华丽的招式，成为真正的武林高手。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1325</wp:post_id>
		<wp:post_date><![CDATA[2015-08-04 00:20:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-03 16:20:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8e%a2%e7%b4%a2c%e8%99%9a%e5%87%bd%e6%95%b0%e5%9c%a8g%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3999437105]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[C++,虚函数,g++]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
			<wp:meta_value><![CDATA[C++,虚函数,g++]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1148</wp:comment_id>
			<wp:comment_author><![CDATA[karottc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[karottc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[14.17.22.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-04 15:42:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-04 07:42:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[赞！ 分析过程很好。 不过，问题的来源，是什么因素导致虚函数表出的问题呢。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2173279271]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1149</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[183.16.0.182]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-04 21:19:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-04 13:19:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[一个服务器框架代码试图欺骗编译器...想法挺好的其实...玩火自焚了吧]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1148</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2173279271]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2173601264]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1150</wp:comment_id>
			<wp:comment_author><![CDATA[rebornix]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[penn.lv@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.164.211.212]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-04 21:22:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-04 13:22:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好文章啊！


我以为g++要颠覆我对虚函数的认识呢 :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2173606228]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1151</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[183.16.0.182]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-04 21:46:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-04 13:46:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其实还有很多阴暗的角落，比如链接过程中虚函数的重定位...解释起来太复杂了，主要是懒...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1150</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2173606228]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2173665533]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Strict Aliasing，神坑？</title>
		<link>http://blog.kongfy.com/2015/09/strict-aliasing%ef%bc%8c%e7%a5%9e%e5%9d%91%ef%bc%9f/</link>
		<pubDate>Sat, 05 Sep 2015 08:43:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1386</guid>
		<description></description>
		<content:encoded><![CDATA[先来看一段代码：

<pre class="lang:c++ decode:true " >#include &lt;cstdio&gt;

void exchange(int input, int* output)
{
    short* pi = (short*)&amp;input;
    short* po = (short*)output;
    po[1] = pi[0];
    po[0] = pi[1];
}

int main()
{
    int input = 0xffff0000;
    printf("input  : 0x%08x\n", input);

    int output = 0xababbaba;
    exchange(input, &amp;output);
    printf("output : 0x%08x\n", output);

    return 0;
}</pre>

你觉得程序的输出是什么样的呢？

<!--more-->

代码很容易理解，只做了一件事情，把<span class="lang:default highlight:0 decode:true crayon-inline">input</span>变量储存的32位整数的高16位和低16位交换，存放在<span class="lang:default highlight:0 decode:true crayon-inline">output</span>变量中，并输出这两个变量。

相信很多人都写过这样的代码（至少我写过），虽然觉得有点怪，但应该不会有什么问题，于是编译运行：

<pre class="lang:sh decode:true " >[kongfy@kongfy-vps dev]$ g++ -g test.cpp -o test
[kongfy@kongfy-vps dev]$ ./test
input  : 0xffff0000
output : 0x0000ffff</pre>

结果完全符合预期，似乎没有任何问题啊！

别高兴的太早，让我们试试打开编译器优化选项<span class="lang:default highlight:0 decode:true crayon-inline">-O2</span>重新编译运行：

<pre class="lang:sh decode:true " >[kongfy@kongfy-vps dev]$ g++ -O2 -g test.cpp -o test
[kongfy@kongfy-vps dev]$ ./test
input  : 0xffff0000
output : 0xababbaba</pre>

问题出现了，<span class="lang:default highlight:0 decode:true crayon-inline">output</span>变量居然不符合预期？什么鬼？！

PS:似乎有必要注明用来测试的g++版本，我测试用的版本是4.4.7，经测试高版本g++得到的结果会不同，但这个问题仍然是存在的。

<h2>strict-aliasing</h2>

<hr />

难道是编译器优化有问题么？但怀着对GNU的景仰...不，一定是我的使用方式有问题！

编译出现诡异问题怎么办？不要忘了使用<span class="lang:default highlight:0 decode:true crayon-inline">-Wall</span>，编译器会给你线索：

<pre class="lang:default highlight:0 decode:true " >[kongfy@kongfy-vps dev]$ g++ -Wall -O2 -g test.cpp -o test
test.cpp: In function ‘void exchange(int, int*)’:
test.cpp:7: warning: dereferencing pointer ‘pi’ does break strict-aliasing rules
test.cpp:5: note: initialized from here
test.cpp:8: warning: dereferencing pointer ‘&lt;anonymous&gt;’ does break strict-aliasing rules
test.cpp:8: note: initialized from here
test.cpp: In function ‘int main()’:
test.cpp:8: warning: dereferencing pointer ‘po’ does break strict-aliasing rules
test.cpp:6: note: initialized from here
test.cpp:7: warning: dereferencing pointer ‘pi’ does break strict-aliasing rules
test.cpp:5: note: initialized from here
test.cpp:7: warning: dereferencing pointer ‘&lt;anonymous&gt;’ does break strict-aliasing rules
test.cpp:7: note: initialized from here
test.cpp:8: warning: dereferencing pointer ‘&lt;anonymous&gt;’ does break strict-aliasing rules
test.cpp:8: note: initialized from here</pre>

编译器果然给出了警告：我们的指针操作破坏了strict-aliasing规则，新的问题来了，什么是strict-aliasing?严格别名（非准确翻译）？

在<span class="lang:default highlight:0 decode:true crayon-inline">man g++</span>中找到这样一段介绍：

<pre class="lang:default highlight:0 decode:true " >
-fstrict-aliasing
           Allow the compiler to assume the strictest aliasing rules applicable to the language being compiled.  For C (and C++), this activates optimizations based on the
           type of expressions.  In particular, an object of one type is assumed never to reside at the same address as an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can alias an "int", but not a "void*" or a "double".  A character type may alias any other type.
           ...
           The -fstrict-aliasing option is enabled at levels -O2, -O3, -Os.
</pre>

简单来说，如果在编译器中开启了<span class="lang:default highlight:0 decode:true crayon-inline">-fstrict-aliasing</span>选项（<span class="lang:default highlight:0 decode:true crayon-inline">-O2</span>优化级别默认开启这个选项），编译器会在“不同类型的变量一定存放在不同的内存空间中”的假定条件下对代码进行优化。

这实际是一个普通程序员和编译优化器编写者之间的约定：为了方便编译优化器的编写者写出更好的编译器优化功能，普通程序员在编写代码时要遵循这样的约定：“不同类型的变量一定存放在不同的内存空间中”。

反过来看看我们代码中的指针<span class="lang:default highlight:0 decode:true crayon-inline">pi</span>和<span class="lang:default highlight:0 decode:true crayon-inline">po</span>，他们是<span class="lang:default highlight:0 decode:true crayon-inline">short *</span>类型，但他们指向的内存空间实际上是<span class="lang:default highlight:0 decode:true crayon-inline">int</span>类型的<span class="lang:default highlight:0 decode:true crayon-inline">input</span>变量，这就违反了strict-aliasing规则，但在开启<span class="lang:default highlight:0 decode:true crayon-inline">-O2</span>优化时我们却告诉编译优化器我们遵守了strict-aliasing规则（默认开启），导致编译器做出了“错误”的优化。

<h2>来点汇编</h2>

<hr />

明白了问题出现的原因，不妨看看编译器最终生成的汇编代码是怎样的：

<pre class="lang:asm mark:11 decode:true " >
080484a0 <main>:
 80484a0:   55                      push   %ebp
 80484a1:   89 e5                   mov    %esp,%ebp
 80484a3:   83 e4 f0                and    $0xfffffff0,%esp
 80484a6:   83 ec 20                sub    $0x20,%esp
 80484a9:   c7 44 24 04 00 00 ff    movl   $0xffff0000,0x4(%esp)
 80484b0:   ff
 80484b1:   c7 04 24 b4 85 04 08    movl   $0x80485b4,(%esp)
 80484b8:   e8 e3 fe ff ff          call   80483a0 <printf@plt>
 80484bd:   0f b7 44 24 18          movzwl 0x18(%esp),%eax
 80484c2:   c7 44 24 04 ba ba ab    movl   $0xababbaba,0x4(%esp)
 80484c9:   ab
 80484ca:   c7 04 24 c5 85 04 08    movl   $0x80485c5,(%esp)
 80484d1:   66 89 44 24 1e          mov    %ax,0x1e(%esp)
 80484d6:   0f b7 44 24 1a          movzwl 0x1a(%esp),%eax
 80484db:   66 89 44 24 1c          mov    %ax,0x1c(%esp)
 80484e0:   e8 bb fe ff ff          call   80483a0 <printf@plt>
 80484e5:   31 c0                   xor    %eax,%eax
 80484e7:   c9                      leave
 80484e8:   c3                      ret
</pre>

看不懂是正常的...<span class="lang:default highlight:0 decode:true crayon-inline">-O2</span>级别的优化已经把代码搞的乱七八糟了。<span class="lang:default highlight:0 decode:true crayon-inline">main</span>函数中没有调用<span class="lang:default highlight:0 decode:true crayon-inline">exchange</span>函数的部分，进行了inline优化。

重要的是在调用第二个<span class="lang:default highlight:0 decode:true crayon-inline">printf</span>函数的传参部分，可以看到<span class="lang:default highlight:0 decode:true crayon-inline">0x4(%esp)</span>被直接赋予了<span class="lang:default highlight:0 decode:true crayon-inline">$0xababbaba</span>并且没有修改过。

让我们尝试从编译器的角度思考我们的代码：函数<span class="lang:default highlight:0 decode:true crayon-inline">exchange</span>中修改的内存都是<span class="lang:default highlight:0 decode:true crayon-inline">short</span>类型的，既然程序员承诺遵循strict-aliasing规则，那么函数<span class="lang:default highlight:0 decode:true crayon-inline">exchange</span>就不会修改<span class="lang:default highlight:0 decode:true crayon-inline">int</span>类型的变量<span class="lang:default highlight:0 decode:true crayon-inline">output</span>，所以可以优化一下直接输出初始值就可以了。

好聪明的编译器！好悲剧的程序猿...

<h2>怎么办？</h2>

<hr />

那么这样的问题该如何避免呢？显然的，如果你告诉编译器遵循strict-aliasing规则，那在写代码的过程中就不应该尝试去打破这样的规则。但是我们在写C/C++代码的过程中常常需要编写这样一些打破规则的trick代码，与其让自己不自在，不如在编译时不要和编译器做这样的约定（使用<span class="lang:default highlight:0 decode:true crayon-inline">-fno-strict-aliasing</span>编译参数），虽然不能让编译器做一些更加高效的优化，但安全总是第一位的，不是么？

<h2>参考资料</h2>

<hr />

<ul>
<li><a href="http://dbp-consulting.com/tutorials/StrictAliasing.html">Understanding C/C++ Strict Aliasing</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1386</wp:post_id>
		<wp:post_date><![CDATA[2015-09-05 16:43:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-05 08:43:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[strict-aliasing%ef%bc%8c%e7%a5%9e%e5%9d%91%ef%bc%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4099529350]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1159</wp:comment_id>
			<wp:comment_author><![CDATA[shanehou]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hsy.ghoul@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[183.62.57.206]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-07 00:55:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-06 16:55:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[偶像！！膜拜！！高端！！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2239233689]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>字符串匹配的后缀算法</title>
		<link>http://blog.kongfy.com/2015/09/%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d%e7%9a%84%e5%90%8e%e7%bc%80%e7%ae%97%e6%b3%95/</link>
		<pubDate>Tue, 08 Sep 2015 04:42:44 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1414</guid>
		<description></description>
		<content:encoded><![CDATA[[mathjax][/mathjax]

字符串匹配问题是算法领域的经典问题，C/C++中常用的<span class="lang:default highlight:0 decode:true crayon-inline">strstr</span>函数就是这个问题的定义:

<blockquote>
  const char* strstr( const char* str, const char* target );
  char* strstr( char* str, const char* target );
  
  Finds the first occurrence of the byte string target in the byte string pointed to by str. The terminating  null characters are not compared.
</blockquote>

在目标字符串<span class="lang:default highlight:0 decode:true crayon-inline">str</span>中寻找是否存在子串<span class="lang:default highlight:0 decode:true crayon-inline">target</span>，字符串<span class="lang:default highlight:0 decode:true crayon-inline">str</span>的长度为&#92;(n&#92;)，<span class="lang:default highlight:0 decode:true crayon-inline">target</span>的长度为&#92;(m&#92;)。这个问题最为人所熟知的算法应该是KMP（Knuth-Morris-Pratt）算法，其时间复杂度为&#92;(O(n)&#92;)，想法非常酷。

但是，Can we do better？

<!--more-->

如我们所知的，KMP算法是一个前缀匹配算法，因为从前向后匹配比较自然也比较保守，所以很难突破&#92;(O(n)&#92;)的天花板，但后缀匹配算法没有这样的限制，比如BM（Boyer-Moore）算法就实现了&#92;(O(n/m)&#92;)的最好情况时间复杂度，最差情况时间复杂度为&#92;(O(n)&#92;)，虽然与KMP算法相比BM算法的最差情况具有更大的常数，但是在实际使用中（自然语言）BM算法往往具有优于KMP的性能表现，并且模式串越长性能表现越好。我不想浪费时间搬运现有的算法资料，也不认为我可以讲的更好，所以在本文中会直接给出相应算法的链接，比如<a href="http://www-igm.univ-mlv.fr/~lecroq/string/node14.html#SECTION00140">BM算法</a>。

在BM算法横空出世以后，人们惊讶的发现原来这个问题还可以这么玩！于是非常多的算法研究人员对BM算法进行了研究并提出了各种各样的改进方案，Horspool在1980年提出的<a href="http://www-igm.univ-mlv.fr/~lecroq/string/node18.html#SECTION00180">Boyer-Moore-Horspool算法</a>就是一种基于BM的改进（或者应该说是简化更合适）：Horspool只使用了BM算法中的坏字符规则（基于窗口的最右字符），并且在实验中验证了其实际使用中的性能甚至要优于BM算法。需要注意的是这并不能代表BM算法中的好字符规则是毫无意义的，好字符规则保证了BM算法具有&#92;(O(n)&#92;)的最差情况时间复杂度，而Horspool的最差情况时间复杂度为&#92;(O(nm)&#92;)，只是在实际使用中很难出现而已。

下图是对一些字符串匹配算法进行测试的结果：

[caption id="attachment_1417" align="aligncenter" width="496"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/09/CompareAlgs.gif"><img src="http://blog.kongfy.com/wp-content/uploads/2015/09/CompareAlgs.gif" alt="算法性能对比" width="496" height="532" class="size-full wp-image-1417" /></a> 算法性能对比[/caption]

可以看到，抛弃了好字符规则的Horspool具有很好的运行效果。需要注意的是，这些实验是在自然语言（ASCII）中测试得到的，在小字符集的字符串（比如DNA序列）可能会得到不同的结果。

Sunday在1990年提出了另一个基于Boyer-Moore算法的改进（简化）的算法，通常称为<a href="http://www-igm.univ-mlv.fr/~lecroq/string/node19.html">Sunday算法</a>，同样只使用坏字符规则，和Horspool算法的思路一脉相承，不同点在于：Horspool算法使用窗口的最右字符，而Sunday更激进，使用窗口后的第一个字符来计算偏移量，获得了更快的窗口移动速度，代码如下：

<pre lang="cpp">
#include <string.h>

const int CSIZE = 256; // size of whole character set

/**
 * preprocessing step for sunday algorithm
 * calculate bad-character shift table
 */
static void prepare(const char *target, int m, int bad_table[])
{
    for (int i = 0; i < CSIZE; ++i) {
        bad_table[i] = m + 1;
    }

    for (int i = 0; i < m; ++i) {
        bad_table[target[i]] = m - i;
    }
}

/**
 * strstr function implemented using sunday algorithm
 */
const char* strstr_sunday(const char* str, const char* target)
{
    if (NULL == str || NULL == target) {
        return NULL;
    }

    int n, m;
    n = strlen(str);
    m = strlen(target);

    if (!m) return str;
    if (!n) return NULL;

    /* preprocessing */
    int bad_table[CSIZE];
    prepare(target, m, bad_table);

    /* searching */
    int i = 0;
    while (i <= n - m) {
        if (memcmp(target, str + i, m) == 0) {
            return str + i;
        }

        i += bad_table[str[i + m]];
    }

    return NULL;
}
</pre>

<h1>参考资料</h1>

<hr />

<ul>
<li>《Algorithms, Part II》on Coursera</li>
<li><a href="http://www.mathcs.emory.edu/~cheung/Courses/323/Syllabus/Text/Matching-Boyer-Moore2.html">The Boyer-Moore-Horspool Algorithm</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1414</wp:post_id>
		<wp:post_date><![CDATA[2015-09-08 12:42:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-08 04:42:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d%e7%9a%84%e5%90%8e%e7%bc%80%e7%ae%97%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4108285873]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>博弈论笔记:Normal form game and Nash equilibrium</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/</link>
		<pubDate>Sat, 10 Oct 2015 03:23:57 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1433</guid>
		<description></description>
		<content:encoded><![CDATA[斯坦福在coursera上的博弈论课程又开放了，这么高大上的课程怎么能错过呢？现在课程已经过半，回过头来对前几周的内容做个小结。

[caption id="attachment_1454" align="aligncenter" width="640"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/842972-14349115-640-360.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/842972-14349115-640-360.jpg" alt="真实的博弈" width="640" height="360" class="size-full wp-image-1454" /></a> 真实的博弈[/caption]

<!--more-->

<h2>什么是Game?</h2>

<hr />

博弈论中的game不是指我们平时玩的电脑游戏，而是指代多个角色之间进行的“博弈”，比如说非常流行的“石头-剪子-布”的游戏。

具体来讲，game由以下几个部分组成：

<ul>
<li><strong>Players</strong>：参与博弈的主体</li>
<li><strong>Actions</strong>：Player可以采取的行动</li>
<li><strong>Payoffs</strong>：Player行动可以获取的回报</li>
</ul>

博弈论中对所谓game有不同的描述形式：Normal form game用来表示一些Payoffs可以看做是Actions的函数的game，在这种game中Players往往同时采取行动（或可以看做是同时），而Extensive form game中引入了时间的概念，Players按次序采取行动，如扑克，象棋等。

这次我们先关注Normal form game，形式化定义一个可终止(Finite)的&#92;(n&#92;)主体的game为：&#92;(\langle N, A, u\rangle&#92;)：

<ul>
<li><strong>Players</strong>：&#92;(N= \left&#92;{ 1,\dots,n \right&#92;} &#92;)表示参与博弈的主体，以&#92;(i&#92;)作为索引</li>
<li><strong>Actions</strong>：&#92;(A_i&#92;)表示Player &#92;(i&#92;)可以采取的Actions集合，定义action profile为&#92;(a=(a_1,\dots,a_n)\in A=A_1\times \dots \times A_n&#92;)，表示一组可能出现的情况</li>
<li><strong>Payoffs</strong>：&#92;(u_i&#92;)表示Player &#92;(i&#92;)的utility function，用来计算特定action profile下Player &#92;(i&#92;)可以获取的回报：&#92;(u_i(a), a\in A&#92;)</li>
</ul>

举个栗子，将“石头-剪子-布”游戏展现为Matrix如下：

[caption id="attachment_1446" align="aligncenter" width="550"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/matching-pennies.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/matching-pennies.jpg" alt="石头-剪子-布" width="550" height="322" class="size-full wp-image-1446" /></a> 石头-剪子-布[/caption]

游戏中&#92;(N=&#92;{1,2&#92;}&#92;)，&#92;(A_1=A_2=&#92;{Rock, Paper, Scissors&#92;}&#92;)，对应的Payoffs写在表格中，当&#92;(a=&#92;{Paper, Paper&#92;}&#92;)时，&#92;(u_1(a)=u_2(a)=0&#92;)，表示平局。

<h2>Strategy</h2>

<hr />

除了Actions，game中还有一个重要的概念：Strategy。Strategy表示了Player如何使用Actions的“策略”，形式上来讲，对Player &#92;(i&#92;)有strategy &#92;(s_i&#92;)，代表Actions集合&#92;(A_i&#92;)上的一个概率分布。

大体上可以将所有strategy分为两种：

<ul>
<li><strong>pure strategy</strong>：是一种特殊情况，在集合&#92;(A_i&#92;)中仅有一项概率为正（为1？），这种情况下该strategy即确定了使用某一Action</li>
<li><strong>mixed strategy</strong>：混合策略引入了随机性，strategy按一定概率使用不同的Actions</li>
</ul>

对于Player &#92;(i&#92;)，&#92;(S_i&#92;)表示其所有可用的strategy的集合，和Actions类似定义strategy profile &#92;(s=(s_1,\dots ,s_n)\in S=S_1\times \dots \times S_n&#92;)，表示一组在游戏中各个Player使用的strategy。

因为有了strategy的概念，我们需要一个新的能够针对给定strategy profile计算回报的utility function，由于不是单一Action，我们需要将头脑切换至概率模式研究下面的公式：

<center>[latex]
\begin{aligned} 
u_i(s)=&\sum_{a \in A}u_i(a)Pr(a|s)\\
Pr(a|s)=&\prod_{j \in N}s_j(a_j)
\end{aligned}
[/latex]</center>

看上去很复杂，实际上可以按照概率论中期望值的感觉来理解：如果用这样的strategy profile进行大量试验，某个Player期望获得的Payoff是多少？

<h2>Best response</h2>

<hr />

既然是game，那么每个Player都希望自己可以赢（获得尽可能高的Payoff），由此引出了best response的概念。

<strong>在pure strategy中</strong>，假如Player &#92;(i&#92;)已经知道了其他Players的行动&#92;(a_{-i}=\langle a_1,\dots,a_{i-1},a_{i+1},\dots,a_n \rangle&#92;)，那么他可以根据情况做出best response &#92;(BR(a_{-i})&#92;)，定义如下：

&#92;[
a_i^* \in BR(a_{-i}) \iff \forall a_i \in A_i,u_i(a_i^*,a_{-i}) \geq u_i(a_i,a_{-i})
&#92;]

<strong>在mixed strategy中</strong>，同样类似的如果Player &#92;(i&#92;)已经知道了其他Players的strategy &#92;(s_{-i}=\langle s_1,\dots,s_{i-1},s_{i+1},\dots,s_n \rangle&#92;)，那么他可以根据情况做出best response &#92;(BR(s_{-i})&#92;)，定义如下：

&#92;[
s_i^* \in BR(s_{-i}) \iff \forall s_i \in S_i,u_i(s_i^*,s_{-i}) \geq u_i(s_i,s_{-i})
&#92;]

<h2>Nash equilibrium</h2>

<hr />

然而在实际的博弈过程中，任何一个Player实际上并不知道他的对手们会采用什么样的action &#92;(a_{-i}&#92;)（或者strategy &#92;(s_{-i}&#92;)），但是经过实践验证，在这样的博弈过程中Players为了争取最大化Payoffs，Players之间相互的制约关系导致他们所做的选择会逐渐趋向于形成“稳定”的action profile(或stategy profile)，这样的profiles就是Nash equilibrium。

Nash equilibrium具有的特征是：<strong>所有Player采用的action（或者strategy）都是best response。</strong>这意味着任何Player都没有办法采用其他的方法来获得更好的Payoff了。

形式化来讲，<strong>对于pure strategy</strong>：

&#92;[
a=\langle a_1,\dots,a_n\rangle\ \text{is a ("pure strategy") Nash equilibrium} \iff \forall i,a_i\in BR(a_{-i}).
&#92;]

<strong>对于mixed strategy</strong>：

&#92;[
s=\langle s_1,\dots,s_n\rangle\ \text{is a ("mixed strategy") Nash equilibrium} \iff \forall i,s_i\in BR(s_{-i}).
&#92;]

Nash在1950年证明了所有有穷的(finite)的game都存在Nash equilibrium。但要注意，这个证明针对于mixed strategy nash equilibrium，<strong>并不一定存在pure strategy nash equilibrium</strong>。

这有什么用呢？研究Nash equilibrium意味着如果我们知道了一个game的基本元素：Players、Actions、Payoffs，则我们可以通过寻找这个game的Nash equilibrium来对Players的行为做出一些预测和判断。

<h2>点球博弈</h2>

<hr />

来看一个非常有意思的例子：罚点球。

Ignacio Palacios-Heurta在2003年的论文“Professionals Play Minimax”中对1417场西班牙、英国、意大利的FIFA联赛中出现的点球进行了统计，得出下面的game：

[caption id="attachment_1448" align="aligncenter" width="530"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks.jpg" alt="点球“大战”" width="530" height="155" class="size-full wp-image-1448" /></a> 点球“大战”[/caption]

参与博弈的双方毫无意外的是射手（Kicker）和守门员（Goalie），双方的Actions均包含两个方向：向左踢（扑救）或者向右踢（扑救），Payoffs可以看做是射进点球的概率和成功守住的概率。

很明显可以看出在这个game中不存在pure strategy nash equilibrium（双方总可以通过选择相反方向获得更高的回报），那么我们来寻找它的mixed strategy nash equilibrium。

[caption id="attachment_1451" align="aligncenter" width="846"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-solve.png"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-solve.png" alt="求解纳什均衡" width="846" height="461" class="size-full wp-image-1451" /></a> 求解纳什均衡[/caption]

下图是我们所求得的mixed strategy nash equilibrium，可以看到和真实统计得到的结果非常接近！

[caption id="attachment_1450" align="aligncenter" width="711"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-data.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/penalty-kicks-data.jpg" alt="数据对比" width="711" height="182" class="size-full wp-image-1450" /></a> 数据对比[/caption]

虽然球场上双方球员都没有经过这样一系列运算，但是最终的结果居然惊人的一致！是不是很神奇~

<h2>参考资料</h2>

<hr />

<ul>
<li>《Game Theory Course: Jackson, Leyton-Brown &amp; Shoham》on Coursera</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1433</wp:post_id>
		<wp:post_date><![CDATA[2015-10-10 11:23:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-10 03:23:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8d%9a%e5%bc%88%e8%ae%ba"><![CDATA[博弈论]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[杂七杂八]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4211046153]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>博弈论笔记:囚徒困境和重复博弈</title>
		<link>http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0%ef%bc%9a%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83%e5%92%8c%e9%87%8d%e5%a4%8d%e5%8d%9a%e5%bc%88/</link>
		<pubDate>Tue, 27 Oct 2015 09:33:08 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1465</guid>
		<description></description>
		<content:encoded><![CDATA[[mathjax][/mathjax]

继续<a href="http://blog.kongfy.com/2015/10/%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0normal-form-game-and-nash-equilibrium/">上次的笔记</a>，记录下之前几周课程中我觉得比较有意思的一个问题：大名鼎鼎的<strong>囚徒困境（Prisoner’s dilemma）</strong>。

[caption id="attachment_1486" align="aligncenter" width="1024"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/8245423564_0efd54b09c_b.jpg" rel="attachment wp-att-1486"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/8245423564_0efd54b09c_b.jpg" alt="囚徒困境" width="1024" height="768" class="size-full wp-image-1486" /></a> 囚徒困境[/caption]

<!--more-->

<h2>囚徒困境</h2>

<hr />

囚徒困境实在是太经典了，一个通俗的例子是说一件案子的两个罪犯（团伙）同时被逮捕并且带到警察局分别审问，两个罪犯之间无法沟通，每个罪犯都可以选择抵赖（Collaborate 即与对方合作）或是交代（Defect 即背叛对方），可能的结果如下：

<ul>
<li>如果两个罪犯同时选择抵赖，由于证据不足，只能判两个罪犯都服刑一年</li>
<li>如果其中一个罪犯选择抵赖而另一个罪犯选择交代，则选择的抵赖的罪犯被判服刑四年，而选择交代的罪犯被赦免，无需服刑</li>
<li>如果两个罪犯同时选择交代，则两个罪犯都要服刑三年</li>
</ul>

展现为Matrix如下：

[caption id="attachment_1473" align="aligncenter" width="330"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/pd3.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/pd3.jpg" alt="囚徒困境" width="330" height="240" class="size-full wp-image-1473" /></a> 囚徒困境[/caption]

从全局的观点来看，两个罪犯应该选择合作（即全部抵赖），这样两个罪犯都服刑一年，是一个较优的全局解，但是由于两个罪犯不能确定对方会选择什么，从单个罪犯的角度来想，都会担心对方为了他个人的利益而出卖自己，凸显了人性本恶，囧...

囚徒困境实际上是一类game，其Matrix如下：

[caption id="attachment_1471" align="aligncenter" width="300"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/pd2.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/pd2.jpg" alt="又是囚徒困境" width="300" height="256" class="size-full wp-image-1471" /></a> 又是囚徒困境[/caption]

只要这个game中满足&#92;(c>a>d>b&#92;)，就是一个囚徒困境问题。

<h2>走出困境</h2>

<hr />

假如你是其中一个罪犯，你会如何选择？没错，我当然要best response对方的Action，于是乎，Nash equilibrium出现了！当两个罪犯都选择&#92;(D&#92;)，即背叛对方的时候，任何一方都没有办法获得更好的Payoff了。

吐个槽：这个解明显是警察更愿意看到的，所以才有了美剧中各种隔离审问，“他已经出卖了你”、“我们来做个交易”等等之类的桥段么...

<h2>悖论（The paradox）？</h2>

<hr />

但是，这样的局面看上去似乎很奇怪？为什么双方最后会选择出一个从团体角度来看直观上最差的outcome呢？

本质上来讲，因为这样的game中，Players都是self-interested Agent，即Player没有全局观，他们选择的Action都是基于自己所能获得的Payoff，而非整体的Payoff。

从全局的角度来看问题，Players之间并没有优劣之分，那么又该如何判断哪一个outcome是更好的呢？

由此引出Pareto Optimality的概念：

<ul>
<li>假设一个outcome &#92;(o&#92;)对于任何一个Player所能获得的Payoff都不差于在另一个outcome &#92;(o'&#92;)中获得的Payoff，则称&#92;(o \text{ Pareto-dominates } o'&#92;)</li>
<li>当存在一个outcome &#92;(o^*&#92;)，没有任何一个其他的outcome可以Pareto-dominates它，则称其为Pareto-optimal</li>
</ul>

例如在先前所举的囚徒困境中，action profile &#92;((C,C),(C,D),(D,C)&#92;)所对应的outcome都是Pareto-optimal，而Nash equilibrium &#92;((D,D)&#92;)所对应的outcome是唯一一个non-Pareto-optimal的outcome！

也就是说，这样的博弈中Nash equilibrium总会得到团体收益最低的outcome，这也是『悖论』所在：非零和博弈中，Pareto-optimal和Nash equilibrium是互相冲突的。

<h2>重复囚徒困境</h2>

<hr />

然而，当我们重复进行囚徒困境时，情况产生了变化。

[caption id="attachment_1470" align="aligncenter" width="300"]<a href="http://blog.kongfy.com/wp-content/uploads/2015/10/pd.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2015/10/pd.jpg" alt="还是囚徒困境" width="300" height="200" class="size-full wp-image-1470" /></a> 还是囚徒困境[/caption]

试想一下在上图所描述的stage game中，如果我们随着时间推移<strong>不断的</strong>进行这样的game（无穷次），双方都不能仅仅只考虑眼前的利益，还需要考虑长远的收益：选择背叛虽然可以获取较大的短期回报，但是对方可以选择在之后的game中进行报复，导致长期回报遭受损失。

比如在重复囚徒困境中就有两个非常有名的策略：

<ul>
<li><strong>tit-for-tat</strong>：以牙还牙，刚开始选择合作，一旦对方背叛，则下一回合选择背叛惩罚对方，然后回到合作状态</li>
<li><strong>triger</strong>：触发，刚开始选择合作，一旦对方背叛，则之后永远选择背叛惩罚对方</li>
</ul>

在无限重复博弈中，衡量收益的Utility函数必然也会发生变化，一种建模方式认为Player相对未来的Payoff来讲更重视当前对局的Payoff，假定Player &#92;(i&#92;)对未来Payoff的重视因子为&#92;(\beta&#92;)，且&#92;(0&lt;\beta&lt;1&#92;)，Player &#92;(i&#92;)所获得的Payoffs序列为Player &#92;(r_1,r_2,\dots&#92;)，那么Player &#92;(i&#92;)所获得的的整体收益为：

&#92;[\sum_{j=1}^\infty \beta^jr_j&#92;]

假如你是这里的Player之一，且你知道你的对手采用triger策略，那么该怎么判断要不要背叛对方么？

当然是在<strong>背叛的利益超过合作的利益</strong>的时候！（人性啊...）

与对方持续保持合作的收益为：

&#92;[3+\beta 3+\beta ^2+\beta ^33\dots=\frac{3}{1-\beta}&#92;]

背叛对方后被惩罚的总收益为：

&#92;[5+\beta 1+\beta ^21+\beta ^31\dots=5+\beta\frac{1}{1-\beta}&#92;]

两者之差为：

&#92;[-2+\beta 2+\beta ^22+\beta ^32\dots=\beta\frac{2}{1-\beta}-2&#92;]

当&#92;(\beta > 1/2&#92;)时，有两者之差大于0，此时与对方保持合作才是上策。

换个角度来看，我们越重视未来的收益，就越倾向于与对方合作；另一方面，背叛所带来的利益越高，也就越有可能导致一方的背叛，和直觉非常相符。

<h2>参考资料</h2>

<hr />

<ul>
<li>《Game Theory Course: Jackson, Leyton-Brown &amp; Shoham》on Coursera</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1465</wp:post_id>
		<wp:post_date><![CDATA[2015-10-27 17:33:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-27 09:33:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%bc%88%e8%ae%ba%e7%ac%94%e8%ae%b0%ef%bc%9a%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83%e5%92%8c%e9%87%8d%e5%a4%8d%e5%8d%9a%e5%bc%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8d%9a%e5%bc%88%e8%ae%ba"><![CDATA[博弈论]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[杂七杂八]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4263546477]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分布式共识(Consensus)：Viewstamped Replication、Raft以及Paxos</title>
		<link>http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/</link>
		<pubDate>Wed, 25 May 2016 11:12:31 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1494</guid>
		<description></description>
		<content:encoded><![CDATA[[mathjax][/mathjax]

从上篇文章到现在，已经有半年多的时间没有写过什么了，时间真是匆匆而过，感觉从上次写博客到现在似乎也就是一眨眼的功夫。

回顾我这大半年，完全可以用四个字概括：“不务正业”，先是跟着曼昆的书学习了微观、宏观经济学的基础知识，恶补了一下个人理财的基础理论（很有意思，但依然挡不住我买的基金嗷嗷跌），然后又入坑了摄影（其实就是买个微单瞎拍瞎修）。至于个人的技术提升方面就显得捉襟见肘了，先是跟着斯坦福CS145、CS245两门课程复习了一下数据库方面的知识，然后就在分布式系统的泥沼中挣扎到了现在...可能唯一一件值得纪念的事情就是去年年底抱大牛大腿参加某司举办的hackathon，过程中学到了一点Golang的皮毛，最后搞了个apple watch耍（队友大牛依然表示对结果不太满意...），另外出于对tby大牛的仰慕，又补习了一下前端开发技能，然并卵，已经又忘光了...

一不小心写了一大段流水账，回归主题。之前花了大概两个多月时间从头琢磨分布式系统，研一时候修这门课完全是白学了，本来学的就不好，两年过去基本也不剩什么了。翻了两本最出名的教材，看了一些高校的课程安排和slides，总算感觉自己有点“上道”了~

这篇文章主要总结一下我个人认为是整个分布式系统中最为重要的问题（没有之一）：<strong>分布式共识（Consensus）</strong>。

[caption id="attachment_1519" align="aligncenter" width="747"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/committee-meeting.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/committee-meeting.jpg" alt="达成共识" width="747" height="514" class="size-full wp-image-1519" /></a> 达成共识[/caption]

PS：我在学习过程中是以《分布式系统：概念与设计》<sup id="fnref-1494-book"><a href="#fn-1494-book">1</a></sup>这本书作为基础的，在下文中如果没有特别指明，所提书中内容均指该书。

<!--more-->

<h2>写在前面</h2>

<hr />

老实说，以我现在对分布式系统粗浅的理解，很难将这个问题总结清楚，因此文中免不了会有些写不明白甚至错误的地方，先留个笔记，待以后有了更加深入的理解再回来修改吧。

<h2>分布式系统模型</h2>

<hr />

想说明白分布式共识问题，首先还是得说说分布式系统中的基础模型，我们在设计和思考分布式算法时，首先需要思考的一点就是算法运行的环境是什么，算法运行中需要处理什么样的问题，一般来说从以下三个方面来考虑：

<ol>
<li><strong>分布式系统中进程（节点）会发生什么样的故障？。</strong>最为常用的两种故障模型是<strong>故障-停止（Fail-stop）</strong>和<strong>随机故障（Byzantine）</strong>，在故障-停止模型中当进程发生故障后简单的停止运行，相对的，随机故障又称为拜占庭故障，意指发生故障的进程会像不忠的拜占庭将军一样，产生无法预料的响应结果。故障-停止是随机故障的一种特殊形式，因此，能够容忍随机故障的算法也能够容忍故障-停止。</p></li>
<li><p><strong>分布式系统的网络传输时延特性是什么样的？</strong>在分布式系统中，进程间通过传递消息进行通信，按照消息在网络中传递时间是否有上限，可以将分布式系统分为<strong>同步模型（Synchronous model）</strong>和<strong>异步模型（Asynchronous model）</strong>，在同步分布式系统中消息传递时间的上限是已知的，而在异步分布式系统中消息可能在任何时间送达。因此在同步分布式系统中，由于消息传递时间的上限已知，则可以根据超时来检测进程故障（非拜占庭故障），大大简化了分布式算法的设计，但遗憾的是，大部分实际的分布式系统往往是异步的，比如互联网就是异步分布式系统，如果为异步分布式系统中设计分布式算法，必须意识到消息可能延迟任意长的时间到达。</p></li>
<li><p><strong>分布式系统消息传递的可靠性如何？</strong>在分布式系统中传递的消息有可能出现丢失、乱序甚至重复送达的情况，算法是否需要容忍这些情况（网络分区就是一种常见的需要加以考虑的现象）？或者，是否可以使用更加可靠的传输协议（比如TCP）来简化算法的设计（Zookeeper<sup id="fnref-1494-zookeeper"><a href="#fn-1494-zookeeper">2</a></sup>中使用的原子组播协议Zab<sup id="fnref-1494-zab"><a href="#fn-1494-zab">3</a></sup>就是一个例子）。</p></li>
</ol>

<p>在整个设计和思考分布式算法的过程中，都要基于同样的系统模型来进行，并对分布式算法的正确性进行证明。通常来讲，一个<strong>正确</strong>的分布式算法需要满足两条性质：

<ul>
<li><strong>Safety</strong>：具备Safety性质的算法保证坏的事情绝对不会发生，例如对于满足Safety性质的分布式选主(Leader election)算法，绝对不会出现一个以上进程被选为Leader的情况。</li>
<li><strong>Liveness</strong>：具备Liveness性质的算法保证好的事情终将发生，即算法在有限的时间内可以结束。</li>
</ul>

综上，一个<strong>正确</strong>的分布式算法可以在<strong>指定的分布式系统模型</strong>中保证<strong>Safety</strong>和<strong>Liveness</strong>属性。

<h2>分布式共识（Consensus）</h2>

<hr />

分布式共识问题，简单说，就是在一个或多个进程提议了一个值应当是什么后，使系统中所有进程对这个值达成一致意见。

这样的协定问题在分布式系统中很常用，比如说选主（Leader election）问题中所有进程对Leader达成一致；互斥（Mutual exclusion）问题中对于哪个进程进入临界区达成一致；原子组播（Atomic broadcast）中进程对消息传递（delivery）顺序达成一致。对于这些问题有一些特定的算法，但是，<strong>分布式共识问题试图探讨这些问题的一个更一般的形式，如果能够解决分布式共识问题，则以上的问题都可以得以解决。</strong>

分布式共识问题的定义如下图所示：

[caption id="attachment_1508" align="aligncenter" width="654"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/consensus.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/consensus.jpg" alt="分布式共识问题" width="654" height="305" class="size-full wp-image-1508" /></a> 分布式共识问题[/caption]

为了达到共识，每个进程都提出自己的提议（propose），最终通过共识算法，所有正确运行的进程决定（decide）相同的值。

共识算法的正确性要求是在运行中满足以下条件：

<ul>
<li><strong>终止性（Liveness）</strong>：所有正确进程最后都能完成决定。</li>
<li><strong>协定性（Safety）</strong>：所有正确进程决定相同的值。</li>
<li><strong>完整性（Integrity）</strong>：如果正确的进程都提议同一个值，那么所有正确进程最终决定该值。</li>
</ul>

接下来让我们结合系统模型来思考共识问题。

如果在一个不出现故障的系统中，很容易可以构造出一个符合要求的共识算法：每个进程都将自己的提议通过<strong>可靠组播（Reliable broadcast）</strong>（见书15.4.2节）发送给其他进程，当进程收到所有成员的提议后，取所有提议中出现最多的值作为最终决定即可。

如果在存在故障的同步系统中，书中15.5.2节给出了一种解法，不是本文重点，因此不做过多讨论。

而如果是在存在故障的异步系统中，共识问题是否有可用的解法呢？著名的FLP不可能性证明<sup id="fnref-1494-flp"><a href="#fn-1494-flp">4</a></sup>告诉我们：<strong>没有任何算法可以在存在任何故障的异步系统中确保达到共识</strong>，FLP的证明过于庞大，本文不做展开，但其意义是非常重要的，正如之前说的，大部分实际的分布式系统都是异步的，FLP不可能性证明阻止了无数分布式系统设计者把时间浪费在寻找一个完美的异步系统共识算法上，而更应该去使用一个不那么完美却有实际意义的解法。

正如FLP不可能性证明所述，不存在算法可以<strong>“确保”</strong>达到共识，但我们可以设计出有较大概率可以达到共识的算法。绕过不可能性结论的办法是考虑<strong>部分同步系统</strong>，利用<strong>故障屏蔽</strong>、<strong>故障检测器</strong>或<strong>随机化</strong>手段避开异步系统模型（详见书15.5.4节），构造出可接受的共识算法，在后文中会重点关注几个异步系统中共识问题的著名工作，并解释它们是如何做到的。

<h2>共识与多副本状态机（Replicated state machines）</h2>

<hr />

分布式系统中对共识问题的直接应用常常是在多副本状态机（不太确定这个翻译对不对）的场景中出现的。多副本状态机是指多台机器具有完全相同的状态，并且运行有完全相同的确定性状态机。通过使用这样的状态机，可以解决很多分布式系统中的容错问题，因为多副本状态机通常可以容忍&#92;(\lfloor \frac{N}{2}\rfloor&#92;)进程故障，且所有正常运行的副本都完全一致，所以，可以使用多副本状态机来实现需要避免单点故障的组件，如集中式的选主或是互斥算法中的协调者（coordinator），如图所示：

[caption id="attachment_1509" align="aligncenter" width="500"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/leader_election.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/leader_election.png" alt="高可用“单点”的集中式架构" width="500" height="446" class="size-full wp-image-1509" /></a> 高可用“单点”的集中式架构[/caption]

集中式的选主或互斥算法逻辑简单，但最大的问题是协调者的单点故障问题，通过采用多副本状态机来实现协调者实现了高可用的“单点”，回避了单点故障。Google的Chubby服务<sup id="fnref-1494-chubby"><a href="#fn-1494-chubby">5</a></sup>和类似的开源服务Zookeeper就是这样的例子。

虽然有很多不同的多副本状态机实现，但其基本实现模式是类似的：状态机的每个副本上都保存有完全相同的操作日志，保证所有副本状态机按照相同的顺序执行操作，这样由于状态机是确定性的，则一定会得到相同的状态，如下图：

[caption id="attachment_1510" align="aligncenter" width="485"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/RSM.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/RSM.jpg" alt="多副本状态机" width="485" height="268" class="size-full wp-image-1510" /></a> 多副本状态机[/caption]

共识算法的作用就是在这样的场景中保证所有副本状态机上的操作日志具有完全相同的顺序，具体来讲：<strong>如果状态机的任何一个副本在本地状态机上执行了一个操作，则绝对不会有别的副本在操作序列相同位置执行一个不同的操作</strong>。

接下来，我将对三个我认为非常有代表性的分布式共识算法的工作进行简要介绍，分别是Viewstamped Replication<sup id="fnref-1494-vr"><a href="#fn-1494-vr">6</a></sup>、Raft<sup id="fnref-1494-raft"><a href="#fn-1494-raft">7</a></sup>和大名鼎鼎的Paxos算法<sup id="fnref-1494-paxos"><a href="#fn-1494-paxos">8</a></sup>，前两个工作本身就是基于多副本状态机的场景完成的，而Paxos算法是作为独立的分布式共识算法提出，并给出了使用该算法实现多副本状态机的范例。

<h2>Viewstamped Replication</h2>

<hr />

Viewstamp Replication（以下简称VR）最初被提出是作为数据库中的一部分工作，2012年作为单独的分布式共识算法再次发表。

<h3>系统模型</h3>

VR算法适用于允许故障-停止的异步系统中，并且VR不要求可靠的消息传递，即VR可以容忍消息丢失、延迟、乱序以及重复。

<h3>容错</h3>

在一个总共有&#92;(2f+1&#92;)个进程的VR服务中，VR可以容忍最多不超过&#92;(f&#92;)个进程同时发生故障。

<h3>原理介绍</h3>

从整体上来看，正常运行中的VR副本中一个作为<em>primary</em>，其余副本都作为<em>backup</em>，正如上文所说的，Replicated state machine最关键的问题在于让所有副本状态机按照相同的顺序执行命令，VR中<em>primary</em>副本决定命令的顺序，所有其他的<em>backup</em>副本仅仅接受<em>primary</em>所决定好的顺序。当<em>primary</em>出现故障时，VR执行一个称为<em>view change</em>的过程，在VR中每个<em>view</em>中都有且仅有一个固定的<em>primary</em>，通过执行<em>view change</em>，可以使系统进入下一个<em>view</em>，并选出新的<em>primary</em>取代故障的旧<em>primary</em>副本。

当<em>primary</em>没有发生故障时，VR在一个稳定的<em>view</em>中运行，副本之间通过消息通信，每个消息中都包含了自己当前所处的<em>view-number</em>，仅当收到的消息包含和自己所知吻合的<em>view-number</em>时副本才会处理该消息，如果收到来自旧<em>view</em>的消息，副本简单丢弃该消息，而如果收到更新的<em>view</em>的消息，则副本知道自己落后了，这时需要执行一套特殊的<em>state transfer</em>过程来赶上系统的最新状态。在正常运行中，VR按以下过程执行用户请求：

<ol>
<li>client向<em>primary</em>发出请求&#92;(\langle \text{REQUEST } op, c, s\rangle&#92;)，其中&#92;(op&#92;)代表需要运行的操作，&#92;(c&#92;)代表<em>client-id</em>，&#92;(s&#92;)代表对于每个client单调递增的<em>request-number</em>。</li>
<li><em>primary</em>接收到请求后，会对比收到的<em>request-number</em>和本地记录中该client最近的一次请求，如果新请求不比之前本地记录的请求更新，则拒绝执行该请求，并将之前请求的应答再次返回给client。（每个client同时只能发出一个请求）</li>
<li>否则，<em>primary</em>为接收到的请求确定<em>op-number</em>（在<em>view</em>中递增），将该请求添加到本地<em>log</em>中，并用它来更新本地记录中该client的最新请求。然后，<em>primary</em>向所有<em>backup</em>副本发送消息&#92;(\langle \text{PREPARE }v, m, n, k\rangle&#92;)，&#92;(v&#92;)是当前的<em>view-number</em>，&#92;(m&#92;)是client发出的请求消息，&#92;(n&#92;)是<em>op-number</em>，&#92;(k&#92;)是<em>commit-number</em>，代表最近的已提交<em>op-number</em>。</li>
<li><em>backup</em>收到<em>PREPARE</em>消息后，严格按照顺序处理所有<em>PREPARE</em>消息（和第2步中<em>primary</em>定序结合，相当于构造了全序组播），当该请求的所有前置请求都处理过后，<em>backup</em>副本与<em>primary</em>一样，递增本地<em>op-number</em>、将请求添加到本地<em>log</em>、更新本地对该client的请求记录，最后向<em>primary</em>回复&#92;(\langle\text{PREPAREOK }v, n, i\rangle&#92;)来确认准备完成。</li>
<li><em>primary</em>在收到超过&#92;(f&#92;)个来自不同<em>backup</em>的<em>PREPAREOK</em>消息后，对该消息（及之前的所有消息，如果有）执行提交操作：执行client提交的操作，并递增<em>commit-number</em>，最后向client返回应答&#92;(\langle \text{REPLY }v, s, x\rangle&#92;)，&#92;(x&#92;)是操作的执行结果，同时<em>primary</em>会将该结果保存在本地，用于防止client故障产生的重复请求（见2）</li>
<li><em>primary</em>可以通过<em>PREPARE</em>消息或&#92;(\langle \text{COMMIT }v, k\rangle&#92;)消息通知<em>backup</em>已确认提交的请求。</li>
<li>当<em>backup</em>副本收到提交确认消息后，如果该消息已经在本地<em>log</em>中（有可能有落后的副本），则它执行操作、递增<em>commit-number</em>，然后更新本地client请求结果。</li>
</ol>

这个处理过程如下图所示：

[caption id="attachment_1512" align="aligncenter" width="500"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/vr.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/vr.jpg" alt="VR正常执行流程" width="500" height="287" class="size-full wp-image-1512" /></a> VR正常执行流程[/caption]

另外，在整个过程中，在没有收到回复时发送方会重复发送消息，以此来对抗可能出现的消息丢失。在VR中只有<em>primary</em>副本可以响应client请求，<em>backup</em>对client请求仅仅是简单的丢弃，如果<em>primary</em>发生了变化，当请求超时后client会向所有副本发送请求以找到新的<em>primary</em>。

如果<em>primary</em>故障，<em>backup</em>就无法收到来自<em>primary</em>的<em>PREPARE</em>和<em>COMMIT</em>（当没有请求是被周期发送，相当于心跳的作用）消息，当触发一个超时后，<em>backup</em>认为<em>primary</em>发生了故障，此时进入了<em>view change</em>阶段，如下：

<ol>
<li>对于副本&#92;(i&#92;)，当它发现<em>primary</em>发生了故障（超时）或着收到了来自其他副本的<em>STARTVIEWCHANGE</em>或<em>DOVIEWCHANGE</em>消息，进入<em>view-change</em>状态，它将递增<em>view-number</em>，并且向其他副本发出&#92;(\langle \text{STARTVIEWCHANGE }v, i\rangle&#92;)消息。</li>
<li>当副本&#92;(i&#92;)收到来自超过&#92;(f&#92;)个不同副本的吻合它<em>view-number</em>的<em>STARTVIEWCHANGE</em>消息后，它向新的<em>primary</em>副本（VR中选主过程非常简单，所有进程根据IP地址排序获得编号，在每次<em>view change</em>过程中按顺序轮流当<em>primary</em>）发送&#92;(\langle \text{DOVIEWCHANGE }v, l, v',n ,k ,i\rangle&#92;)，&#92;(l&#92;)是它的日志，&#92;(v'&#92;)是它转为<em>view change</em>状态之前的<em>view-number</em>。</li>
<li>当新的<em>primary</em>副本收到超过&#92;(f+1&#92;)个来自不同副本的<em>DOVIEWCHANGE</em>消息后，它将自己的<em>view-number</em>修改为消息中携带的值，并选择具有最大的&#92;(v'&#92;)的消息中的&#92;(l&#92;)作为新的<em>log</em>，如果多条消息具有同样的&#92;(v'&#92;)，则选择具有最大&#92;(n&#92;)的那个。同时，它将<em>op-number</em>设置为<em>log</em>中尾部请求的序号，将<em>commit-number</em>设置为收到所有消息中最大的。然后将自身状态修改回<em>normal</em>，并向其他副本发送&#92;(\langle \text{STARTVIEW }v, l, n, k\rangle&#92;)以通知他们<em>view change</em>完成。</li>
<li>新的<em>primary</em>开始正常响应client的请求，并且同时执行任何之前没有执行完的命令（根据新获得的<em>log</em>）。</li>
<li>其他副本在收到<em>STARTVIEW</em>消息后，根据消息的内容修改本地状态和<em>log</em>，执行本地没有提交的操作（由于该副本有落后），并将自身状态修改回<em>normal</em>，另外，如果<em>log</em>中包含未提交的操作（当旧<em>primary</em>还没来得及向其他副本确认提交成功就故障了），则向新<em>primary</em>发送&#92;(\langle \text{PREPAREOK }v, n, i\rangle&#92;)消息。</li>
</ol>

到这里已经完成了VR算法核心流程的叙述：包括正常状态下的执行和<em>primary</em>副本故障后的<em>view change</em>过程，VR算法还包括了故障进程恢复协议以及动态修改副本配置的<em>Reconfiguration</em>协议，限于篇幅和精力，就不再展开叙述了。

<h3>正确性</h3>

那么VR算法是正确的么？前文中描述过了共识算法正确性的标准，那么对于VR来说，其共识算法需要保证所有状态机副本以相同的顺序执行操作。

我们分两部分来讨论VR算法的正确性。首先，在正常运行过程中（无<em>primary</em>故障）VR算法显然是正确的，<em>primary</em>决定了统一的操作顺序并将其传播到<em>backup</em>副本上，因此在<em>primary</em>发生故障时的<em>view change</em>协议必须可以保障整体VR算法的正确性。

<strong>从Safety的角度来讲</strong>，<em>view change</em>必须保证每一个在先前<em>view</em>中已经提交的操作必须能够传递到新的<em>view</em>中，并且处于操作序列中完全相同的位置。理解这个正确性的关键在于注意到VR算法中的两个细节：<em>primary</em>只有在超过&#92;(f+1&#92;)个副本已经收到某操作的前提下才会提交该操作，而在<em>view change</em>过程中，新的<em>primary</em>必须收到来自超过&#92;(f+1&#92;)个副本的<em>log</em>才能开始工作。由于VR最多只容忍&#92;(f&#92;)个副本同时故障，则必然有至少一个了解该操作的副本向新的<em>primary</em>提交了自己的<em>log</em>。

另一个对Safety非常非常关键的点在于：副本一旦进入<em>view-change</em>状态，就不会再响应任何来自旧<em>view</em>的<em>PREPARE</em>消息。这是因为VR算法应用于异步系统，当<em>primary</em>出现超时并不代表<em>primary</em>真正故障了，有可能它只是运行缓慢或者网络延迟严重，随后有可能会出现延时到达的<em>PREPARE</em>消息，这样的消息是非常致命的，为了保证<em>DOVIEWCHANGE</em>消息中包含了所有的已提交操作，必须保证屏蔽掉旧<em>view</em>中的<em>primary</em>。<strong>这种方式实际上相当于使用故障检测器屏蔽超时进程，将异步系统改造成为了半同步系统，绕过了FLP不可能性结论。</strong>

<strong>至于Liveness</strong>，论文证明了<em>view change</em>满足liveness，这也是我的一个疑问，不是说异步系统不能确保达到共识么（后文中的两个算法在Liveness上都有些缺陷）...

<h2>Raft</h2>

<hr />

Raft是近些年比较新的关于分布式共识的工作，其最大的优点在于易于理解、易于实现（相对于之前的统治者Paxos，这是极大的优势），这也极大的推动了它的发展，现在很多新的分布式项目都转而使用Raft作为核心，例如etcd。<a href="https://raft.github.io/">这里</a>有一个Raft可交互的在线展示，对理解Raft很有帮助。

<h3>系统模型</h3>

Raft同样运行在允许故障-停止的异步系统中，并且不要求可靠的消息传递，及可以容忍消息丢失、延迟、乱序以及重复。

<h3>容错</h3>

在一个总共有&#92;(2f+1&#92;)个进程的Raft部署中，可以容忍最多不超过&#92;(f&#92;)个进程同时发生故障。

<h3>原理介绍</h3>

Raft的整体思路与VR基本相似，在Raft中有存在唯一的<em>leader</em>，由<em>leader</em>全权负责响应用户的请求，<em>leader</em>对用户请求的操作确定顺序并传递给其他<em>follower</em>，并在可以提交操作时通知其他<em>follower</em>。如果<em>leader</em>发生了故障，则执行<em>leader election</em>过程选出新的<em>leader</em>。

从上述整体思路可以看出，Raft中最为核心的部分是<em>leader election</em>和<em>log replication</em>。

<em>leader election</em>用来选出新的<em>leader</em>，Raft将运行过程划分为不同的<em>term</em>（类似于VR中的<em>view</em>），每个<em>term</em>都由<em>leader election</em>开始，且每个<em>term</em>中最多只存在一个<em>leader</em>，Raft中所有的通信消息都包含有副本本地的<em>current term</em>，相当于整个系统的逻辑时钟。

Raft中所有的<em>follower</em>需要定期接收到来自<em>leader</em>的心跳消息，并各自维护一个超时计时器，如果在计时器完结时没有收到心跳消息，该<em>follower</em>认为<em>leader</em>发生了故障，开始执行<em>leader election</em>，具体流程如下：

<ol>
<li>该副本增加自己的<em>current term</em>并转换为<em>candidate</em>状态，它将为自己投票并向其他副本发出请求投票的消息。</li>
<li>如果<em>candidate</em>收到来自于更新<em>term</em>（<em>current term</em>大于或等于自己的值）的<em>leader</em>发来的消息，则认同该<em>leader</em>，转换为<em>follower</em>继续运行。</li>
<li>当副本接收到来自其他副本请求投票的消息时，如果该投票请求的<em>current term</em>大于自己的<em>term</em>，则首先更新自己的<em>current term</em>，然后它将<strong>对比本地<em>log</em>与发出请求投票消息的<em>candidate</em>的<em>log</em>哪个比较新（比较<em>log</em>最后条目的<em>index</em>和<em>term</em>，见下文），如果本地的比较新，则拒绝为该<em>candidate</em>投票，反之对<em>candidate</em>投票。</strong>另外，每个副本在每个<em>term</em>中仅能投出一票。</li>
<li>当<em>candidate</em>收集到超过总数一半的投票时，它将变为新的<em>leader</em>并作为<em>leader</em>开始工作。</li>
</ol>

在<em>leader election</em>的过程中有可能出现一种情况，称为"split vote"：多个<em>follower</em>几乎同时转换为<em>candidate</em>并发起投票，结果最后没有任何一个<em>candidate</em>获得了足够的投票，当出现这种情况时，<em>candidate</em>会在等待超时后进入下一个<em>term</em>重新开始<em>leader election</em>，为了避免这种的情形重复发生，<strong>Raft中每个副本随机选择超时时间（论文中例子为在150-300ms中），降低了冲突发生的可能性。</strong>

当完成<em>leader election</em>后，Raft进入新的<em>term</em>开始工作， <em>leader</em>接受到client的请求后，会为该操作生成一条<em>log</em>项，并同时记录该项的<em>index</em>（表明该项在<em>log</em>中的位置）和<em>term</em>，如下图：

[caption id="attachment_1514" align="aligncenter" width="480"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/raft1.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/raft1.jpg" alt="Raft中的log" width="480" height="468" class="size-full wp-image-1514" /></a> Raft中的log[/caption]

然后，<em>leader</em>会向所有<em>follower</em>发送该请求，将该<em>log</em>项传播出去，如果有副本失败的情况，<em>leader</em>会不断执行重传。当<em>leader</em>成功将该<em>log</em>项复制到超过一半的副本上后，<em>leader</em>认为该<em>log</em>项（及其之前的所有<em>log</em>项）可以被提交了（<strong>仅限于当前<em>term</em>的<em>log</em>项，见下文</strong>），它将在本地状态机执行对应操作，并向client返回执行结果，<em>leader</em>记录已提交的最高<em>index</em>，并告知<em>follower</em>，<em>follower</em>据此知晓已确认提交的操作并在本地执行。

在正常运行中以上的过程就足够了，然而在考虑到各类故障的影响，各个副本上的<em>log</em>可能会出现各种不一致的情况，如下图：

[caption id="attachment_1515" align="aligncenter" width="500"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/raft2.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/raft2.jpg" alt="log不一致" width="500" height="561" class="size-full wp-image-1515" /></a> log不一致[/caption]

Raft用来处理这种情况的对策很简单：以<em>leader</em>上的日志为准，将与<em>leader</em>不一致的日志进行重写（这个过程比较繁琐，但思路是简单的，通过不断向前检查<em>follower</em>上<em>log</em>项，直到找到分叉点，然后进行修正）。这样的重写使得旧<em>term</em>中遗留的<em>log</em>项可能出现被覆盖丢失的情况，如下图：

[caption id="attachment_1516" align="aligncenter" width="494"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/raft3.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/raft3.jpg" alt="Raft中旧term日志覆盖问题" width="494" height="588" class="size-full wp-image-1516" /></a> Raft中旧term日志覆盖问题[/caption]
因此，Raft约束<strong>对于来自旧<em>term</em>的<em>log</em>项不能根据多数原则提交，而只能随着当前<em>term</em>的<em>log</em>项一起提交。</strong>

<h3>正确性</h3>

Raft的完整的正确性证明在论文中推倒的非常详细，我实在做不出什么精简，其核心证明过程在于在整个算法中保证下图中的几点性质：

[caption id="attachment_1517" align="aligncenter" width="511"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/raft4.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/raft4.jpg" alt="Raft中的Safety保证" width="511" height="448" class="size-full wp-image-1517" /></a> Raft中的Safety保证[/caption]

可以看到通过这几点性质，Raft满足了<strong>Safety</strong>要求，但其在<strong>Liveness</strong>上是有缺陷的，例如<em>leader election</em>过程可能会出现无法完成的情况，虽然出现概率非常非常低，在实践中可以忽略不计，但从理论证明角度是无法确保Liveness的。

其中有一点非常值得注意，在VR中任何副本都可以作为新的<em>primary</em>，而Raft则不同，Raft的<em>leader election</em>过程保证了只有包含原<em>term</em>中所有已提交<em>log</em>项的<em>candidate</em>才能够被选为<em>leader</em>（因为要获取一半以上投票），这样通过对<em>leader</em>的选择过程做出了限制，Raft做到了<em>log</em>的单向传递：仅从<em>leader</em>传递到<em>follower</em>，而没有相反方向。

另外，Raft和VR一样，通过屏蔽旧<em>term</em>的消息，将异步系统改造成为了半同步系统，绕过了FLP不可能性结论。

<h2>Paxos</h2>

<hr />

Paxos是一个传奇。

Paxos是Lamport宗师在1998年首次公开的<sup id="fnref-1494-paxos_old"><a href="#fn-1494-paxos_old">9</a></sup>，最初的描述使用希腊的一个城邦Paxos作为比喻，描述了Paxos中通过决议的流程，并以此命名这个算法。后来在2001年，Lamport觉得同行不能理解他的幽默感，于是重新发表了朴实的算法描述版本《Paxos Made Simple》。

自Paxos问世以来就持续垄断了分布式共识算法，Paxos这个名词几乎等同于分布式共识（直到Raft问世？），Google更是对Paxos算法宠爱有加，在Chubby、Megastore<sup id="fnref-1494-megastore"><a href="#fn-1494-megastore">10</a></sup>以及Spanner<sup id="fnref-1494-spanner"><a href="#fn-1494-spanner">11</a></sup>中都声称自己使用Paxos来解决分布式共识问题。

然而，Paxos的最大特点就是“难”...不仅难以理解，而且难以实现。

<h3>系统模型</h3>

Paxos同样运行在允许故障-停止的异步系统中，并且不要求可靠的消息传递，及可以容忍消息丢失、延迟、乱序以及重复。

<h3>容错</h3>

在一个总共有&#92;(2f+1&#92;)个进程的Paxos部署中，可以容忍最多不超过&#92;(f&#92;)个进程同时发生故障。

<h3>Paxos与多副本状态机</h3>

Paxos和之前介绍的两个算法不同，Paxos是一个独立的分布式共识算法，为了与前文一致，先介绍一下如何在Paxos算法的基础下实现多副本状态机。

我们先将Paxos作为黑盒对待，一个Paxos实例（指运行一次Paxos算法）可以使多个进程在一个值上达成一致，为了实现多副本状态机，核心在于使所有的副本按照一致的顺序执行操作序列，那么我们可以同时运行多个独立的Paxos实例（带序号），第&#92;(i&#92;)个Paxos实例决定的值就是状态机日志中第&#92;(i&#92;)项操作。

<h3>原理介绍</h3>

打开黑盒。

Paxos算法的设计过程就是从正确性开始的，对于分布式共识问题，很多进程提出（propose）不同的值，共识算法保证最终只有其中一个值被选定，<strong>Safety</strong>表述如下：

<ul>
<li>只有被提出（propose）的值才可能被最终选定（chosen）。</li>
<li>只有<strong>一个</strong>值会被选定（chosen）。</li>
<li>进程只会获知到已经确认被选定（chosen）的值。</li>
</ul>

Paxos以这几条约束作为出发点进行设计，只要算法最终满足这几点，正确性就不需要证明了。Paxos算法中共分为三种参与者：<em>proposers</em>、<em>acceptors</em>以及<em>learners</em>，<strong>通常实现中每个进程都同时扮演这三个角色</strong>。

<em>proposers</em>向<em>acceptors</em>提出<em>proposal</em>，为了保证最多只有<strong>一个</strong>值被选定（chosen），<em>proposal</em>必须被超过一半的<em>acceptors</em>所接受（accept），且每个<em>acceptor</em>只能接受一个值（Paxos算法的出发点，易于理解但难以实现，后面会被修改）。

为了保证正常运行（必须有值被接受），所以Paxos算法中：

<center><strong>P1：acceptor必须接受（accept）它所收到的第一个<em>proposal</em>。</strong></center>

先来先服务，合情合理。但这样产生一个问题，如果多个<em>proposers</em>同时提出<em>proposal</em>，很可能会导致无法达成一致，因为没有<em>propopal</em>被超过一半<em>acceptors</em>的接受，因此，<em>acceptor</em>必须能够接受多个<em>proposal</em>，不同的<em>proposal</em>由不同的编号（可以有各种实现方式）进行区分，当某个<em>proposal</em>被超过一半的<em>acceptors</em>接受后，这个<em>proposal</em>就被选定了。

既然允许<em>acceptors</em>接受多个<em>proposal</em>就有可能出现多个不同值都被最终选定的情况，这违背了<strong>Safety</strong>要求，为了保证<strong>Safety</strong>要求，Paxos进一步提出：

<center><strong>P2：如果值为&#92;(v&#92;)的<em>proposal</em>被选定（chosen），则任何被选定（chosen）的具有更高编号的<em>proposal</em>值也一定为&#92;(v&#92;)</strong></center>

只要算法同时满足<strong>P1</strong>和<strong>P2</strong>，就保证了<strong>Safety</strong>。<strong>P2</strong>是一个比较宽泛的约定，完全没有算法细节，我们对其进一步延伸：

<center><strong>P2a：如果值为&#92;(v&#92;)的<em>proposal</em>被选定（chosen），则对所有的<em>acceptors</em>，它们接受（accept）的任何具有更高编号的<em>proposal</em>值也一定为&#92;(v&#92;)</strong></center>

如果满足<strong>P2a</strong>则一定满足<strong>P2</strong>，显然，因为只有首先被接受才有可能被最终选定。但是<strong>P2a</strong>依然难以实现，因为<em>acceptor</em>很有可能并不知道之前被选定的<em>proposal</em>（恰好不在接受它的多数派中），因此进一步延伸：

<center><strong>P2b：如果值为&#92;(v&#92;)的<em>proposal</em>被选定（chosen），则对所有的<em>proposer</em>，它们提出的的任何具有更高编号的<em>proposal</em>值也一定为&#92;(v&#92;)</strong></center>

更进一步的：

<center><strong>P2c：为了提出值为&#92;(v&#92;)且编号为&#92;(n&#92;)的<em>proposal</em>，必须存在一个包含超过一半<em>acceptors</em>的集合&#92;(S&#92;)，满足(a)没有任何&#92;(S&#92;)中的<em>acceptors</em>曾经接受（accept）过编号比&#92;(n&#92;)小的<em>proposal</em>，或者(b)&#92;(v&#92;)和&#92;(S&#92;)中的<em>acceptors</em>所接受过(accept)的编号最大且小于&#92;(n&#92;)的<em>proposal</em>值一致。</strong></center>

满足<strong>P2c</strong>即满足<strong>P2b</strong>即满足<strong>P2a</strong>即满足<strong>P2</strong>。至此Paxos提出了<em>proposer</em>的执行流程，以满足<strong>P2c</strong>：

<ol>
<li><em>proposer</em>选择一个新的编号&#92;(n&#92;)，向超过一半的<em>acceptors</em>发送请求消息，<em>acceptor</em>回复: (a)承诺不会接受编号比&#92;(n&#92;)小的<em>proposal</em>，<strong>以及</strong>(b)它所接受过的编号比&#92;(n&#92;)小的最大<em>proposal</em>（如果有）。该请求称为<em>prepare</em>请求。</li>
<li>如果<em>proposer</em>收到了超过一半<em>acceptors</em>的回复，它就可以提出<em>proposal</em>了，<em>proposal</em>的值为收到回复中编号最大的<em>proposal</em>的值，如果没有这样的值，则可以自由提出任何值。</li>
<li>向收到回复的<em>acceptors</em>发送<em>accept</em>请求，请求对方接受提出的<em>proposal</em>。</li>
</ol>

仔细品味<em>proposer</em>的执行流程，其完全吻合<strong>P2c</strong>中的要求，但你可能也发现了，当多个<em>proposer</em>同时运行时，有可能出现没有任何<em>proposal</em>可以成功被接受的情况（编号递增的交替完成第一步），这就是Paxos算法的<strong>Liveness</strong>问题，有些文档中称其为“活锁”，论文中建议通过对<em>proposers</em>引入选主算法选出<em>distinguished proposer</em>来全权负责提出<em>proposal</em>来解决这个问题，但是即使在出现多个<em>proposers</em>同时提出<em>proposal</em>的情况时，Paxos算法也可以保证<strong>Safety</strong>。

接下来看看<em>acceptors</em>的执行过程，和我们对<strong>P2</strong>做的事情一样，我们对<strong>P1</strong>进行延伸：

<center><strong>P1a：acceptor可以接受（accept）编号为&#92;(n&#92;)的<em>proposal</em>当且仅当它没有回复过一个具有更大编号的<em>prepare</em>消息。</strong></center>

易见，<strong>P1a</strong>包含了<strong>P1</strong>，对于<em>acceptors</em>：

<ol>
<li>当收到<em>prepare</em>请求时，如果其编号&#92;(n&#92;)大于之前所收到的<em>prepare</em>消息，则回复。</li>
<li>当收到<em>accept</em>请求时，仅当它没有回复过一个具有更大编号的<em>prepare</em>消息，接受该<em>proposal</em>并回复。</li>
</ol>

以上涵盖了满足<strong>P1a</strong>和<strong>P2b</strong>的一套完整共识算法，其中一点优化在于<em>acceptor</em>可以提前终止较小编号的<em>proposal</em>过程。

Paxos算法中的另一部分是<em>learners</em>如何知晓已被选中的<em>proposal</em>，本文不再展开。

<h3>多说两句</h3>

观察Paxos和前文中的VR和Raft算法，最大的区别在于Paxos是“非集中式”的，在Paxos中不存在地位特殊的进程，引入选主也只是因为多个活动的<em>proposers</em>可能导致活锁；VR和Raft是基于“集中式”的设计的，它们在算法中自带了选主，并要求在每个“view”或“term”中只能存在一个<em>leader</em>，由<em>leader</em>来负责定序等操作，这样极大的简化了设计和实现的难度，在系统设计中，简单不一定是个坏事，即使是使用了Paxos算法的Chubby系统，实际上也只是使用Paxos来完成选主，当选主结束后Chubby仍然是作为一个“集中式”的系统来运行的。

另外，Paxos算法作为一个理论工作，它的实现难度不容忽视，分布式系统的设计者往往从Paxos开始，但由于实现难度大而不得不做一些这样那样的修改，这样的修改看似无妨，却极有可能导致最终实现一个没有理论证明的算法（比如Zab）。即使是Google的Chubby工程师团队，在实现Paxos的过程中也吃尽了苦头，他们在发表的关于Paxos工程实现的文章<sup id="fnref-1494-live"><a href="#fn-1494-live">12</a></sup>中如此评论：

<blockquote>
  There are significant gaps between the description of the Paxos algorithm and the needs of a real-world system. In order to build a real-world system, an expert needs to use numerous ideas scattered in the literature and make several relatively small protocol extensions. The cumulative effort will be substantial and the final system will be based on an unproven protocol.
</blockquote>

那么，是否Raft可以取Paxos而代之呢？我还不知道...留待以后在实践中思考。

<h2>延伸思考</h2>

<hr />

多副本状态机在本质上是一种副本技术，我们使用副本技术的目的往往是容错和负载均衡，不但要保证副本能够容忍进程故障，也希望能通过负载均衡提高整体的性能。

我们可以看到前文中描述的几个多副本状态机性能都十分有限，首先，它们都只有<em>leader</em>节点可以处理请求，而从节点只是作为副本保障容错性；第二点，在这样的多副本状态机中，读请求也是作为一个常规操作执行的，也就是说单纯的读操作也需要在多副本状态机中产生消息交互并生成对应的日志条目，限制了单纯的读请求执行效率。

在我所了解的一些系统中，已经有了不少优秀的思路可以用来提高多副本状态机的性能。

针对读请求多的场景，Harp<sup id="fnref-1494-harp"><a href="#fn-1494-harp">13</a></sup>提出了一种方法：针对读请求这类不影响状态机状态的操作，可以不将其作为需要在状态机副本中同步的操作，而直接由<em>leader</em>副本处理，这样产生的一个问题是可能会由于网络分区等异常而读到失效的错误信息，违背了副本的线性化能力（强一致性），可以通过对<em>leader</em>引入Leases<sup id="fnref-1494-leases"><a href="#fn-1494-leases">14</a></sup>机制来消除这个问题，只要当<em>leader</em>持有Lease，就可以直接响应读请求，而其他副本也保证在Lease失效前不会产生新的<em>leader</em>，因此保证了一致性要求。更进一步的，如果系统可以接受更加放松的一致性要求，则可以允许非<em>leader</em>节点响应读请求，达到负载均衡的效果，通过对client的请求引入向量时钟（vector timestamps）或Lamport时钟，可以在这样的模式中实现较弱的一致性要求。

另一种解决思路是为多副本状态机加入缓存机制，例如Chubby和Zookeeper都在client端为数据做了缓存，在Chubby中client只允许访问<em>leader</em>进程，但对数据使用了基于Leases的缓存机制，保证了副本的线性化能力；而Zookeeper则放松了一致性要求，client不仅可以访问非<em>leader</em>的副本，而且使用“watch”机制提高系统处理能力。Chubby的设计者认为使用较弱的一致性模型会造成用户的困惑，而具备线性化能力的副本行为要更加容易被程序员所接受，但Zookeeper的设计者认为程序员应该理解所使用服务的一致性保证，并将进行更强一致性操作选择权交给了程序员用户（Zookeeper提供sync API），这就是性能和一致性之间常有的trade off，留给每个系统设计者思考。

<h2>参考资料</h2>

<div class="footnotes">
<hr />
<ol>

<li id="fn-1494-book">
Coulouris G F, Dollimore J, Kindberg T. Distributed systems: concepts and design[M]. pearson education, 2005.&#160;<a href="#fnref-1494-book">&#8617;</a>
</li>

<li id="fn-1494-zookeeper">
Hunt P, Konar M, Junqueira F P, et al. ZooKeeper: Wait-free Coordination for Internet-scale Systems[C]//USENIX Annual Technical Conference. 2010, 8: 9.&#160;<a href="#fnref-1494-zookeeper">&#8617;</a>
</li>

<li id="fn-1494-zab">
Reed B, Junqueira F P. A simple totally ordered broadcast protocol[C]//proceedings of the 2nd Workshop on Large-Scale Distributed Systems and Middleware. ACM, 2008: 2.&#160;<a href="#fnref-1494-zab">&#8617;</a>
</li>

<li id="fn-1494-flp">
Fischer M J, Lynch N A, Paterson M S. Impossibility of distributed consensus with one faulty process[J]. Journal of the ACM (JACM), 1985, 32(2): 374-382.&#160;<a href="#fnref-1494-flp">&#8617;</a>
</li>

<li id="fn-1494-chubby">
Burrows M. The Chubby lock service for loosely-coupled distributed systems[C]//Proceedings of the 7th symposium on Operating systems design and implementation. USENIX Association, 2006: 335-350.&#160;<a href="#fnref-1494-chubby">&#8617;</a>
</li>

<li id="fn-1494-vr">
Liskov B, Cowling J. Viewstamped replication revisited[J]. 2012.&#160;<a href="#fnref-1494-vr">&#8617;</a>
</li>

<li id="fn-1494-raft">
Ongaro D, Ousterhout J. In search of an understandable consensus algorithm[C]//2014 USENIX Annual Technical Conference (USENIX ATC 14). 2014: 305-319.&#160;<a href="#fnref-1494-raft">&#8617;</a>
</li>

<li id="fn-1494-paxos">
Lamport L. Paxos made simple[J]. ACM Sigact News, 2001, 32(4): 18-25.&#160;<a href="#fnref-1494-paxos">&#8617;</a>
</li>

<li id="fn-1494-paxos_old">
Lamport L. The part-time parliament[J]. ACM Transactions on Computer Systems (TOCS), 1998, 16(2): 133-169.&#160;<a href="#fnref-1494-paxos_old">&#8617;</a>
</li>

<li id="fn-1494-megastore">
Baker J, Bond C, Corbett J C, et al. Megastore: Providing Scalable, Highly Available Storage for Interactive Services[C]//CIDR. 2011, 11: 223-234.&#160;<a href="#fnref-1494-megastore">&#8617;</a>
</li>

<li id="fn-1494-spanner">
Corbett J C, Dean J, Epstein M, et al. Spanner: Google’s globally distributed database[J]. ACM Transactions on Computer Systems (TOCS), 2013, 31(3): 8.&#160;<a href="#fnref-1494-spanner">&#8617;</a>
</li>

<li id="fn-1494-live">
Chandra T D, Griesemer R, Redstone J. Paxos made live: an engineering perspective[C]//Proceedings of the twenty-sixth annual ACM symposium on Principles of distributed computing. ACM, 2007: 398-407.&#160;<a href="#fnref-1494-live">&#8617;</a>
</li>

<li id="fn-1494-harp">
Liskov B, Ghemawat S, Gruber R, et al. Replication in the Harp file system[M]. ACM, 1991.&#160;<a href="#fnref-1494-harp">&#8617;</a>
</li>

<li id="fn-1494-leases">
Gray C, Cheriton D. Leases: An efficient fault-tolerant mechanism for distributed file cache consistency[M]. ACM, 1989.&#160;<a href="#fnref-1494-leases">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1494</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 19:12:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 11:12:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="consensus"><![CDATA[consensus]]></category>
		<category domain="post_tag" nicename="paxos"><![CDATA[paxos]]></category>
		<category domain="post_tag" nicename="raft"><![CDATA[raft]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4856186846]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
			<wp:meta_value><![CDATA[分布式共识]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[分布式共识]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1192</wp:comment_id>
			<wp:comment_author><![CDATA[rebornix]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[penn.lv@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[131.107.147.79]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-05-26 07:45:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-05-25 23:45:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[老师你又回来写文章了。至于 sunicy ，他消失太久了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2695573518]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1193</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.212.86.23]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-05-26 10:48:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-05-26 02:48:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[记性越来越差了，不写出来很快就忘。sunicy这样的大牛就不需要写了...而且他现在忙着加班，哪有空...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1192</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2695573518]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2695782916]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1195</wp:comment_id>
			<wp:comment_author><![CDATA[ckwood]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ckwood@foxmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[27.38.118.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-06-09 16:49:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-06-09 08:49:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[获益良多]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2720454056]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1286</wp:comment_id>
			<wp:comment_author><![CDATA[Chen Li]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[togetherlichen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.69.132.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-07-05 17:21:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-07-05 09:21:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[学到了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3974613824]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>被误用的“一致性”</title>
		<link>http://blog.kongfy.com/2016/08/%e8%a2%ab%e8%af%af%e7%94%a8%e7%9a%84%e4%b8%80%e8%87%b4%e6%80%a7/</link>
		<pubDate>Sat, 06 Aug 2016 12:39:59 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1546</guid>
		<description></description>
		<content:encoded><![CDATA[想必每个接触过分布式系统的同学都没少看到过“一致性”这个词，但是我最近有一个越来越强烈的感觉：“一致性”这个词已经被严重的误用了，以至于当我看到这个词的时候，我甚至得花些功夫去思考这到底指的是哪个“一致性”，更严重的是，当别人在谈到“一致性”的时候，实际上他们在谈的完全是另一种东西。

<h2>无辜的Paxos</h2>

<hr />

故事的起因来源于Paxos（没错，又是这货），网上对于Paxos的文献太多，而且质量参差不齐，在绝大多数的中文文档中，你都可以看到这样的描述：“Paxos是一个分布式<strong>强一致性</strong>协议”，不瞒你说，每次看到这样的表述的时候，我的内心是崩溃的...且听我慢慢道来。

问题的由来很大一部分原因在于英文对中文的翻译，因此我们必须将术语还原到英文进行讨论，『一致性』对应的英文名词应该是<strong>Consistency</strong>没错了，然后我们在Lamport大神的原始论文《Paxos Made Simple》中搜索关键词，你会发现：

[caption id="attachment_1549" align="aligncenter" width="510"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/08/C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/08/C5DB82C2-3E8F-4E45-9728-9AEEDB582EEC.jpg" alt="&quot;Consistency&quot; Not Found" width="510" height="259" class="size-full wp-image-1549" /></a> "Consistency" Not Found[/caption]

没错，论文中一次都没有提到过<strong>Consistency</strong>，也就是说，Paxos和『一致性』根本半毛钱关系都没有啊！那Paxos究竟是什么呢？论文中写的很明确——"The <strong>Consensus</strong> Algorithm"。

PS：本文中所有使用中文“一致”均指Consistency，“共识”为Consensus。

<!--more-->

<h2>Consistency = Consensus?</h2>

<hr />

词典会告诉你，<strong>Consusens</strong>的意思就是“一致”（我想这也许就是中文文献中对“一致性”误用的根源），似乎和<strong>Consistency</strong>是一样的？答案是否定的。虽然这两个单词的译意接近，但是在分布式系统中作为专业名词来讲，其代表的含义实则相差甚远。

我们常说的“<strong>一致性（Consistency）</strong>”在分布式系统中指的是<strong>副本（Replication）问题</strong>中对于同一个数据的多个副本，其对外表现的数据一致性，如线性一致性、因果一致性、最终一致性等，都是用来描述副本问题中的一致性的。

而<strong>共识（Consensus）</strong>则不同，我认为对<strong>Censensus</strong>最合适的翻译是<strong>共识</strong>而非一致，关于共识问题的定义详见我<a href="http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/">之前的文章</a>，简单来说，共识问题中所有的节点要最终<strong>达成共识</strong>，由于最终目标是<strong>所有节点</strong>都要达成一致，所以根本不存在一致性强弱之分。

[caption id="attachment_1508" align="aligncenter" width="654"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/05/consensus.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2016/05/consensus.jpg" alt="分布式共识问题" width="654" height="305" class="size-full wp-image-1508" /></a> 分布式共识问题[/caption]

只有当你使用像Paxos这样的共识算法作为解决副本问题的核心组件时（工业界非常常见，通常是变种的Paxos作为核心实现Replicated State Machine，同样见<a href="http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/">这篇文章</a>），才会对外展现出不同的一致性级别。但是，<strong>即使是在这样的场景下，讨论一个共识算法的一致性也是不合适的</strong>，因为整个副本系统最终的一致性并不单单取决于共识算法，Client访问所遵循的规范也会有决定性的作用。比如说：即使副本系统使用multi-paxos在所有副本服务器上同步了日志序号，但如果Client被允许从非Leader节点获取数据，则整个副本系统仍然不是强一致的（思考如果访问了非多数派节点的情况）。

做个总结：

<ol>
<li>Paxos是<strong>共识（Consensus）算法</strong>而不是<strong>强一致性（Consistency）协议</strong></li>
<li><strong>一致性（Consistency）</strong>是副本（Replication）问题中的概念，<strong>共识（Consensus）算法</strong>没有一致性级别的区分</li>
</ol>

<h2>CAP和ACID</h2>

<hr />

Consistency和Consensus的区分就很头大了，但这还不算完，大名鼎鼎的CAP定理和关系数据库ACID属性中的字母“C”代表的都是Consistency，然而却也代表着截然不同的含义，前者是数据副本的更新一致性，后者则是数据库状态的一致性，这里就不展开了，感兴趣的话可以翻翻任意一本数据库基础教材。

<h2>这重要么？</h2>

<hr />

这种误用真的很严重么？我觉得需要从两个角度看，其一：对于真心想了解分布式系统的人来说，很严重，对他们的学习造成了很大阻碍（依赖于中文资料者尤甚），其二：对于工业界的分布式系统从业者来说，没什么关系，实际上这样的使用反而方便了大家日常的交流，极大的简化了问题和模型。

所以说，我写这篇文章的目的绝对不是要指责谁，事实上，很多中文资料的笔者都是在分布式领域有着深厚践经验的大牛，对分布式系统的理解比我不知高到哪里去了，我想要做的，只是要指出这个现象，避免更多刚进入分布式系统领域的新人被这种误用阻碍了前进的步伐（我就曾经被这些似是而非的”一致性“搞得头晕脑胀）。

究其根本，还是学术界和工业界的思路不同。学术界注重体系，探讨问题往往是从模型出发，从问题入手，而工业界则讲究实用，不求体系，更加侧重于场景，副本问题是共识算法在工业界中最主要的应用场景，因此才更加滋长了这种误用。

最后，附上一张我在学习分布式系统理论的过程中梳理的脑图供君参考，本来是想拿来单独写一篇文章的，惭愧。

[caption id="attachment_1551" align="aligncenter" width="2381"]<a href="http://blog.kongfy.com/wp-content/uploads/2016/08/分布式系统.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/08/分布式系统.png" alt="分布式系统知识梳理" width="2381" height="2077" class="size-full wp-image-1551" /></a> 分布式系统知识梳理[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1546</wp:post_id>
		<wp:post_date><![CDATA[2016-08-06 20:39:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-06 12:39:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a2%ab%e8%af%af%e7%94%a8%e7%9a%84%e4%b8%80%e8%87%b4%e6%80%a7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="consensus"><![CDATA[consensus]]></category>
		<category domain="post_tag" nicename="paxos"><![CDATA[paxos]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5044862299]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1232</wp:comment_id>
			<wp:comment_author><![CDATA[Benedict Jin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[benedictjin2016@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.yuzhouwan.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[104.149.203.187]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-11 10:58:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-11 02:58:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[厚颜无耻地 求一个友链~
宇宙湾（http://www.yuzhouwan.com）]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3299391469]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1231</wp:comment_id>
			<wp:comment_author><![CDATA[Benedict Jin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[benedictjin2016@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.yuzhouwan.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[104.149.203.187]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-11 10:51:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-11 02:51:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真牛掰~~ 去年看的你的文章，一下子刷新了三观，，最近整理一下分布式的东西，刚又看了一遍 感觉又学习到了，真棒！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3299384746]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1280</wp:comment_id>
			<wp:comment_author><![CDATA[Benedict Jin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[benedictjin2016@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://yuzhouwan.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[176.122.159.85]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-06-08 11:03:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-06-08 03:03:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[简述了一下，放在我的博客里面啦，哈哈，不知道有没有理解到位

Zookeeper 原理与优化
https://yuzhouwan.com/posts/31915#%e5%b8%b8%e8%a7%81%e8%af%af%e5%8c%ba]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3935257498]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1270</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[35.201.167.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-03-24 14:00:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-03-24 06:00:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mac下面的MindNode]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1268</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3800281113]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3821563000]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1267</wp:comment_id>
			<wp:comment_author><![CDATA[ramboww]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dlut200803001@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.205.141.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-03-13 14:23:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-03-13 06:23:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[请教一下，知识梳理是什么工具画的。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3800279671]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1268</wp:comment_id>
			<wp:comment_author><![CDATA[ramboww]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dlut200803001@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.205.141.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-03-13 14:24:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-03-13 06:24:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[请教一下，知识梳理是什么工具画的。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3800281113]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1279</wp:comment_id>
			<wp:comment_author><![CDATA[Jingyi Yang]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[skyvoice@foxmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[185.209.84.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-06-07 16:14:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-06-07 08:14:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最近看Designing Data-Intensive Application，里面的Consistency和Consensus区别明显，不过没这篇Blog之前还没意识到看中文资料无意形成的误区。感谢大佬。另思维导图里是截自某ppt吗？求ppt title。。。。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3934008180]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1281</wp:comment_id>
			<wp:comment_author><![CDATA[kongfy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[njukongfy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[35.201.167.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-06-08 21:28:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-06-08 13:28:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是一个在线课程，讲的比较系统。ID2203-VT16]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1279</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3934008180]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[3935717016]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Sequential Consistency，Cache-Coherence及Memory barrier</title>
		<link>http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/</link>
		<pubDate>Mon, 17 Oct 2016 15:59:18 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1558</guid>
		<description></description>
		<content:encoded><![CDATA[如今多核CPU在服务器中已经是标配，如何更好的发挥多核CPU进行并行计算相信是每个后端开发都会遇到的难题。这篇文章主要是梳理一下我最近学习的一些关于C++多线程编程的知识。

<h2>并发 VS 并行</h2>

<hr />

提到并发编程，有很多不同的编程模型，如多进程、多线程、协程，还可以结合使用I/O多路复用技术来进行异步并发编程，由此产生了很多不同类型的并发编程技巧来解决各类场景下的问题。

其中，协程模型也称为“用户态线程”，在用户态对程序流进行切换，避免了系统上下文切换的开销，属于<strong>并发</strong>而不是<strong>并行</strong>的（协程也可以和多进程、多线程模型结合，此处不做探讨），多进程和多线程的编程模型是真正<strong>并行</strong>的，即多个程序流是真正同时运行的，因此可以更好的利用多核优势，由于多线程之间共用进程地址空间，所以多线程模型相对多进程模型而言可以减少一些进程间的通信开销。

<h2>多线程同步</h2>

<hr />

然而，凡事有利必有弊，共用进程地址空间带来了性能上的提高必然也会产生一些复杂的问题，及引入了线程间同步的问题。多个线程如果不加保护的访问共享的变量，必然会引发严重问题，这些在线程间共享的变量被称为“<a href="https://en.wikipedia.org/wiki/Critical_section">临界区</a>”，最为经典的例子就是多个线程同时对单变量执行递增操作，相信诸位都已经听到耳朵起茧，就不再展开了。

在多线程编程中，常用的同步方式是使用pthread库中提供的线程同步手段（暂不考虑C++11中提供的线程库），如互斥锁、自旋锁、信号量、条件变量等等，但这些方法不是本文的主要内容，因此也不做展开，有兴趣的同学可以自行阅读《UNIX环境高级编程》中关于多线程同步的章节。

PS：在Linux内核中由于内核线程共用内核地址空间，所以内核线程之间也需要使用线程同步机制进行保护，Linux内核中所使用的几种常见同步机制分析见我<a href="http://blog.kongfy.com/2014/11/linux%E5%86%85%E6%A0%B8%E5%90%8C%E6%AD%A5/">之前的文章</a>。

<!--more-->

<h2>Lockless</h2>

<hr />

到这里一切都很好，我们可以使用多线程作为并行编程手段，并且使用pthread提供的同步机制对临界区进行保护，pthread库为我们屏蔽了底层的复杂性，在我们看来多核CPU是透明的计算资源，而不需要特别为多核CPU进行太多的考虑。

然而，随着对性能的要求进一步提高，当我们需要达到更大的并发度时，pthread库提供的同步手段将成为瓶颈，因此在需要高性能的程序中往往会借助于一些lock-free的编程技术来提高程序的性能，这样的程序中不再使用pthread所提供的保护元语，必须自行处理多核CPU环境中产生的各种问题，这样不显式使用底层锁同步机制的程序我们成为是lockless的（注：lockless不是lock-free，比如常见的使用CAS操作做循环等待是lockless的，但是却不是lock-free的，lock-free是另一个重要的概念，本文中不涉及）。

<h2>什么是Cache-Coherence</h2>

<hr />

那么，多核环境和单核究竟有什么不同？实际上，问题的来源是cache。我们都知道，因为CPU的运行速度比内存访问速度快很多(百倍的量级差距)，所以每个CPU都有自己的cache来加速对内存的访问（局部性原理），如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/perf3_9.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/perf3_9.png" alt="" width="553" height="485" class="aligncenter size-full wp-image-1565" /></a>

这样造成的一个问题是同一份数据有可能会分布在各个CPU的cache中，和分布式系统一样，数据的副本会带来一致性问题，事实上，在同一时间，同一变量在不同的CPU上会有不同的值，如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/perf14_5.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/perf14_5.png" alt="" width="750" height="270" class="aligncenter size-full wp-image-1567" /></a>

举个例子，当CPU 0刚刚修改了内存中某处的值时，最新的值是先写入到CPU 0的局部cache中，等待cache line淘汰才会被写回内存，如果此时另一个CPU（如CPU 7）想要访问内存中同一位置的值，则不论是CPU 7的局部cache中还是内存中都没有最新值，最新值只存在于CPU 0的局部cache中，因此我们需要一个机制来保证cache在不同CPU间的一致性，这个机制就是Cache-Coherence Protocal。

MESI是一种使用最广泛的Cache-Coherence Protocal，Intel使用的MESIF就是在MESI协议基础上改进而来。为了理解原理的目的，我们只需要了解MESI协议就可以了。

MESI这四个字母分别代表了每一个cache line可能处于的四种状态：“Modified”、“Exclusive”、“Shared”和“Invalid”：

<ul>
<li><strong>Modified</strong>：处于该状态的cache line刚刚被该CPU修改过，且该修改还没有同步到其他的CPU及内存中，这个状态的cache line是被这个CPU所“拥有”的，所以这个CPU必须负责将这个cache line写回内存或是交给其他的CPU。</li>
<li><strong>Exclusive</strong>：和Modified状态很接近，区别在于CPU已经“拥有”了这个cache line，但还没有修改cache line的值，可以在任意时刻修改并不需要询问其他的CPU。</li>
<li><strong>Shared</strong>：处于该状态的cache line被多个CPU所共享，所以CPU无法直接修改该cache line，只可以读取其上的值。</li>
<li><strong>Invalid</strong>：这个状态是所有cache line的初始状态，表明该cache line为空，没有存储数据。</li>
</ul>

当CPU对cache line进行操作时，就会导致cache line的状态发生变化，这样的变化往往需要通过在CPU之间传递消息来完成，MESI的状态转换图如下：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/mesi-1.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/mesi-1.png" alt="" width="552" height="447" class="aligncenter size-full wp-image-1580" /></a>

图中所列出的状态变化都值得仔细考量，为了下文叙述方便，我在这里重点描述其中一种情况：多个CPU都持有同一cache line，初始状态为“Shared”，当其中一个CPU想要修改该cache line的内容时，它向其他所有CPU发送“Invalidate”消息，其他CPU收到消息以后必须将该cache line的状态修改为“Invalid”，随后回复“Invalidate Acknowledge”消息给发送方CPU，当发送方CPU收到所有的“Invalidate Acknowledge”消息后，就可以将该cache line修改为“Exclusive”状态并执行数据修改了。

上述过程实际是一次cache line“所有权”的获取过程，其他的状态过程切换见RCU一哥书中的表述<sup id="fnref-1558-perfbook"><a href="#fn-1558-perfbook" class="jetpack-footnote">1</a></sup>。

<h3>False sharing</h3>

在这里我们先开个小差，讨论下另外一个问题——False sharing。

如我们所见，这个cache line“所有权”的获取过程涉及到了多个CPU之间的消息通信，相比起直接在单核上进行操作一定是低效的，然而此处有一个陷阱：在我们编程时通常是以变量为思考单元的，但这里CPU之间争夺“所有权”的单元是cache line(通常为64字节)，那么就会下图中的一种情况：在一个并行的程序中，一个线程不断写入变量X，另一个线程不断写入变量Y，本来是没有冲突的，但是两个变量在内存中落在了同一cache line上，这就是导致执行过程中在两个CPU之间不断发生该cache line“所有权”的争夺，导致性能的下降，这个问题就叫False sharing(名字也很直观)。

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/false_share.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/false_share.png" alt="" width="532" height="444" class="aligncenter size-full wp-image-1577" /></a>

知道了问题发生的原因，解决起来就不难了，既然是因为多个本不相干的变量落在同一cache line上产生的冲突，那么我们只要在这些变量之间添加适当的padding，使得他们落在不同的cache line上就可以了，这在GNU C中可以通过设置变量属性 <span class="lang:c decode:true  crayon-inline " >__attribute__((aligned(64)))</span> 解决。

让我们写个代码来实际验证这个问题：

<pre class="lang:c decode:true " >
/*
 * Demo program for showing the drawback of "false sharing"
 *
 * Use it with perf!
 *
 * Compile: g++ -O2 -o false_share false_share.cpp -lpthread
 * Usage: perf stat -e cache-misses ./false_share <loopcount> <is_aligned>
 */

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <sys/resource.h>

#define CACHE_ALIGN_SIZE 64
#define CACHE_ALIGNED __attribute__((aligned(CACHE_ALIGN_SIZE)))

int gLoopCount;

inline int64_t current_time()
{
  struct timeval t;
  if (gettimeofday(&t, NULL) < 0) {
  }
  return (static_cast<int64_t>(t.tv_sec) * static_cast<int64_t>(1000000) + static_cast<int64_t>(t.tv_usec));
}

struct value {
  int64_t val;
};
value data[2] CACHE_ALIGNED;

struct aligned_value {
  int64_t val;
} CACHE_ALIGNED;
aligned_value aligned_data[2] CACHE_ALIGNED;

void* worker1(int64_t *val)
{
  printf("worker1 start...\n");

  volatile int64_t &v = *val;
  for (int i = 0; i < gLoopCount; ++i) {
    v += 1;
  }

  printf("worker1 exit...\n");
}

// duplicate worker function for perf report
void* worker2(int64_t *val)
{
  printf("worker2 start...\n");

  volatile int64_t &v = *val;
  for (int i = 0; i < gLoopCount; ++i) {
    v += 1;
  }

  printf("worker2 exit...\n");
}

int main(int argc, char *argv[])
{
  pthread_t race_thread_1;
  pthread_t race_thread_2;

  bool is_aligned;

  /* Check arguments to program*/
  if(argc != 3) {
    fprintf(stderr, "USAGE: %s <loopcount> <is_aligned>\n", argv[0]);
    exit(1);
  }

  /* Parse argument */
  gLoopCount = atoi(argv[1]); /* Don't bother with format checking */
  is_aligned = atoi(argv[2]); /* Don't bother with format checking */

  printf("size of unaligned data : %d\n", sizeof(data));
  printf("size of aligned data   : %d\n", sizeof(aligned_data));

  void *val_0, *val_1;
  if (is_aligned) {
    val_0 = (void *)&aligned_data[0].val;
    val_1 = (void *)&aligned_data[1].val;
  } else {
    val_0 = (void *)&data[0].val;
    val_1 = (void *)&data[1].val;
  }

  int64_t start_time = current_time();

  /* Start the threads */
  pthread_create(&race_thread_1, NULL, (void* (*)(void*))worker1, val_0);
  pthread_create(&race_thread_2, NULL, (void* (*)(void*))worker2, val_1);

  /* Wait for the threads to end */
  pthread_join(race_thread_1, NULL);
  pthread_join(race_thread_2, NULL);

  int64_t end_time = current_time();

  printf("time : %d us\n", end_time - start_time);

  return 0;
}
</pre>

代码很简单，不需要太多解释，重点看下perf结果：

<pre class="lang:default decode:true " >
[jingyan.kfy@OceanBase224006 work]$ perf stat -e cache-misses ./false_share 100000000 0
size of unaligned data : 16
size of aligned data   : 128
worker2 start...
worker1 start...
worker1 exit...
worker2 exit...
time : 452451 us

 Performance counter stats for './false_share 100000000 0':

         3,105,245 cache-misses

       0.455033803 seconds time elapsed

[jingyan.kfy@OceanBase224006 work]$ perf stat -e cache-misses ./false_share 100000000 1
size of unaligned data : 16
size of aligned data   : 128
worker1 start...
worker2 start...
worker1 exit...
worker2 exit...
time : 326994 us

 Performance counter stats for './false_share 100000000 1':

            27,735 cache-misses

       0.329737667 seconds time elapsed
</pre>

可以看出在进行了aligned之后减少了非常多cache-misses，运行速度也加快了很多。

PS：这个代码只能定性的说明False sharing对性能是有影响的，如果想要定量的分析False sharing对性能的影响，那就需要结合所使用CPU的架构来做具体分析。

<h2>Reorder</h2>

<hr />

回到正题，在有了Cache-Coherence协议之后，似乎一切看上去都很完美，即使在多核环境下，cache之间仍然维持了一致，似乎我们并不需要考虑什么？

可惜的是，事实并非如此...

CPU的设计者实在是太聪明了，为了提高CPU的性能，CPU设计者做出了非常多的优化，以至于在外界看来，似乎CPU在以完全不可理喻的方式运行...CPU是不是疯了？为了解释这一点，我们首先需要明白CPU对执行顺序的约定是怎样的.

<h3>美好的Sequential Consistency</h3>

在程序员的直觉里，不论多核与否，所有线程的执行顺序（内存读写顺序）都应该和我们源码中所写的保持一致，并且所有核看到的某个线程的执行顺序（内存读写顺序）都应该是一致的，这就是Sequential Consistency。

然而，现在的多核CPU由于性能发展的要求，采用了各种各样的手段来加快运算速度，Sequential Consistency对CPU性能的提高是一个很强的阻碍，因此现在的CPU大都选择不同程度的违背Sequential Consistency的要求来达到提高执行速度的目的，CPU所提供保障的底线是：<strong>在单核看来，线程的内存读写顺序要和源码中所写的一致。</strong>

<h3>CPU重排</h3>

那CPU为什么要对指令进行重排呢？回到我们对Cache-Coherence协议的分析，我们会发现一些比较慢的操作。

首先一点，当CPU需要写入一个“Shared”状态的cache line时，它向其他CPU发出“Invalidate”消息，而在收到其他CPU“Invalidate Acknowledge”回复之前都必须等待，这就对内存写入操作造成了一个阻塞，如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_4.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_4.png" alt="" width="523" height="495" class="aligncenter size-full wp-image-1570" /></a>

为了避免这个阻塞，聪明的CPU设计者在CPU和cache之间加入了一个缓冲Store Buffer，当执行store操作时，CPU无需阻塞等待其他CPU的回复，而是直接将该store操作缓冲在Store Buffer中，然后继续执行后续操作，当收到其他所有CPU的回复后再把数据从Store Buffer中移入cache，和cache一样，Store Buffer也是CPU局部的，一个CPU不能访问除自己以外的Store Buffer，如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_6.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_6.png" alt="" width="601" height="529" class="aligncenter size-full wp-image-1571" /></a>

对执行store操作的CPU本身来说这是一个绝妙的点子，因为CPU对内存的读取也会先查询Store Buffer中缓存的store指令，所以在执行store指令的CPU自己看来是维持了指令的执行顺序的，然而对其他CPU来说就没有那么幸运了...试想如下场景：

<ol>
<li>CPU 0先修改cache line c1上的数据，c1处于“Shared”状态，CPU 0发出“Invalidate c1”消息后将store指令存入Store Buffer</li>
<li>CPU 0修改cache line c2上的数据，c2处于“Exclusive”状态，则直接写入到cache中</li>
<li>CPU 1从CPU 0获取了c2（通过“Read”消息）</li>
<li>CPU 1在还没有收到“Invalidate c1”消息时从cache读出了处于“Shared”状态的c1</li>
</ol>

这样在CPU 1看来CPU 0的两次修改操作就出现了重排，即CPU1看到了CPU0后做的修改c2却没有看到先做的修改c1。

情况看上去是不是很糟，然而这还不算完...CPU设计者很快又注意到另一个问题：Store Buffer的大小是有限的，如果“Invalid Acknowledge”回复到达的速度不够快，Store Buffer将会很快被填满，CPU就又必须阻塞等待store指令完成了，于是乎他们在每个CPU上又加了一个Invalidate Queue，它的作用很简单，就是加速“Invalidate”消息的处理速度，当cache收到“Invalidate”消息后不马上执行cache line的invalidate操作（有些耗时），而是把这个消息缓存在Invalidate Queue之后直接回复“Invalidate Acknowledge”消息，之后cache再异步的处理Invalidate Queue中的消息，如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_7.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_7.png" alt="" width="595" height="614" class="aligncenter size-full wp-image-1572" /></a>

这样的设计使得多个CPU之间的关系更加复杂了，由于Invalidate Queue导致“Invalidate”消息的处理被延迟，所以CPU先发出的load操作有可能读出已经被确认“Invalidate”但在本地状态还没有切换的cache line，导致CPU的load操作好像也是会乱序的。

<h3>编译器重排</h3>

更加雪上加霜的是...不光是CPU，编译器也会在更高层次上进行优化，只要编译器认为不会有影响的，编译器会把对变量的操作顺序重新排列，甚至直接消除。

<h2>如何写正确的程序</h2>

<hr />

看到这里是不是觉得CPU和编译器的设计者简直都是疯子，在这样的平台上还如何能够愉快的写代码？简直寸步难行有木有...

庆幸的是，CPU和编译器的设计者除了做出这些优化之外，也给我们留下了后路，让我们能够在需要时使用这些工具来抑制CPU和编译器的优化功能，保证程序的正确性，这就是memory barrier和编译器屏障。

PS：回顾前文，为什么使用pthread库的程序就不需要考虑这些复杂的情况呢？这些库在CPU和编译器看来也并没有什么特别的，原因在于库的编写者已经仔细的考虑了这些情况，并且在库的代码中加入了适当的memory barrier，减轻了库使用者的负担。

<h3>memory barrier</h3>

对于编译器来说，编译器屏障即程序中插入的<span class="lang:c decode:true  crayon-inline " >asm volatile("" ::: "memory");</span> ，其作用是告诉编译器，不管怎么优化，程序的读写操作影响不能跨过这个“屏障”，通俗的说就是告诉编译器不要自作聪明，在屏障后的读写都老老实实去内存位置上读写，不能偷懒使用“屏障”之前的临时结果。

CPU针对可能出现的重排给出三种memory barrier（不同体系结构的CPU都不太一样，这里给出通常的定义）：

<ul>
<li><strong>写屏障（store fence）</strong>：维持屏障前后的store操作的偏序关系，即屏障后的store一定发生在屏障前的store之后，结合之前所讲的CPU优化机制，写屏障的作用在于在Store Buffer，实现上既可以等待Store Buffer清空，也可以在Store Buffer中写入一个标记，并禁止后续的store指令直接写入cache，转而写入Store Buffer中，直到Store Buffer中没有标记才恢复正常</li>
<li><strong>读屏障（load fence）</strong>：维持屏障前后的load操作的偏序关系，即屏障后的load一定发生在屏障前的load之后，结合之前所讲的CPU优化机制，读屏障的作用在于Invalidate Queue，读屏障会强制等待Invalidate Queue清空才继续执行，这样可以消除其引发的读乱序问题</li>
<li><strong>全屏障（full fence）</strong>：作用相当于前两者加起来</li>
</ul>

关于memory barrier，还有几点是必须要明确的：

<ol>
<li><strong>memory barrier并不提供时间保障</strong>：即使是非常有经验的程序员，也总会使用“刷cache”这样的说法来形容store fence，意思是使用store fence指令后就可以确保数据进入cache中了，实际上这种描述是不稳妥的，memory barrier并没有提供时间上的保障，store fence指令执行结束并不代表Store Buffer已经清空写入了cache中（所谓的“全局可见”），memory barrier只是提供了barrier前后指令的偏序关系保证</li>
<li><strong>memory barrier没有办法对其他CPU产生影响</strong>：在某一CPU上执行的memory barrier指令并没有办法对其他CPU的cache和执行产生直接影响，只会改变其他CPU看到的本CPU的内存访问顺序。</li>
<li><strong>memory barrier需要成对使用</strong>：即使使用了store fence维持了屏障前后的store操作偏序关系，由于Invaliate Queue的影响，其他CPU可能仍无法看到正确的顺序，因此往往在程序中store fence要和load fence成对使用。</li>
</ol>

Tips：不管是编译器屏障还是CPU屏障，其真实的作用都是抑制优化，是对性能有损的。所以，在使用这些机制时一定要慎之又慎，仔细考量方可。即使在Linux内核的编程中，也是不建议直接使用这些底层工具的，而总是首选一些易用的封装好的同步机制（如RCU）。

<h3>慎用volatile</h3>

C/C++的程序员应该对volatile都很熟悉了，但volatile在多线程并行编程中实际实际上也是最容易被误用的。在变量声明前加上volatile表示该变量“可能被意外的修改（当前流程之外）”，要求编译器在每次使用该变量时都要从内存地址中读出最新值。

这意味着对编译器优化的抑制，也就是性能的降低。更糟的是，通常程序中对volatile的使用都无法达到你想要的效果。

这是因为单单保证编译器不优化掉读操作<strong>并不能保证CPU不会产生乱序行为</strong>，如果读操作被提前，即使没有被优化掉也可能读出你意料之外的值，让我们看个例子，下面是一种<a href="https://en.wikipedia.org/wiki/Dekker%27s_algorithm">Dekker算法</a>的实现：

<pre class="lang:c decode:true " >
/*
 * Dekker's algorithm, implemented on pthreads
 *
 * To use as a test to see if/when we can make
 * memory consistency play games with us in
 * practice.
 *
 * Compile: gcc -O2 -o dekker dekker.c -lpthread
 * Source: http://jakob.engbloms.se/archives/65
 */

#include <assert.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

static volatile int flag1 = 0;
static volatile int flag2 = 0;
static volatile int turn  = 1;
static volatile int gSharedCounter = 0;
int gLoopCount;
int gOnePercent;

void dekker1(void) {
  flag1 = 1;
  turn = 2;
  // __sync_synchronize();
  while((flag2 == 1) && (turn == 2)) ;
  // Critical section
  gSharedCounter++;
  // Let the other task run
  flag1 = 0;
}

void dekker2(void) {
  flag2 = 1;
  turn = 1;
  // __sync_synchronize();
  while((flag1 == 1) && (turn == 1)) ;
  // critical section
  gSharedCounter++;
  // leave critical section
  flag2 = 0;
}

//
// Tasks, as a level of indirection
//
void *task1(void *arg) {
  int i,j;
  printf("Starting task1\n");
  // Do the dekker very many times
#ifdef PRINT_PROGRESS
  for(i=0;i<100;i++) {
    printf("[One] at %d%%\n",i);
    for(j=gOnePercent;j>0;j--) {
      dekker1();
    }
  }
#else
  // Simple basic loop
  for(i=gLoopCount;i>0;i--) {
    dekker1();
  }
#endif
}

void *task2(void *arg) {
  int i,j;
  printf("Starting task2\n");
#ifdef PRINT_PROGRESS
  for(i=0;i<100;i++) {
    printf("[Two] at %d%%\n",i);
    for(j=gOnePercent;j>0;j--) {
      dekker2();
    }
  }
#else
  for(i=gLoopCount;i>0;i--) {
    dekker2();
  }
#endif
}

int
main(int argc, char ** argv)
{
  int loopCount = 0;
  pthread_t dekker_thread_1;
  pthread_t dekker_thread_2;
  void * returnCode;
  int result;
  int expected_sum;

  /* Check arguments to program*/
  if(argc != 2)
    {
      fprintf(stderr, "USAGE: %s <loopcount>\n", argv[0]);
      exit(1);

    }

  /* Parse argument */
  loopCount = atoi(argv[1]); /* Don't bother with format checking */
  gLoopCount = loopCount;
  gOnePercent = loopCount/100;
  expected_sum = 2*loopCount;

  /* Start the threads */
  result = pthread_create(&dekker_thread_1, NULL, task1, NULL);
  result = pthread_create(&dekker_thread_2, NULL, task2, NULL);

  /* Wait for the threads to end */
  result = pthread_join(dekker_thread_1,&returnCode);
  result = pthread_join(dekker_thread_2,&returnCode);
  printf("Both threads terminated\n");

  /* Check result */
  if( gSharedCounter != expected_sum ) {
    printf("[-] Dekker did not work, sum %d rather than %d.\n", gSharedCounter, expected_sum);
    printf("%d missed updates due to memory consistency races.\n", (expected_sum-gSharedCounter));
    return 1;

  } else {
    printf("[+] Dekker worked.\n");
    return 0;
  }
}
</pre>

在这个例子中我们可以看到关键变量flag1、flag2和turn已经声明为volatile了，如果就此认为线程总能读到这三个变量的“最新值”，那Dekker算法已经被理论证明是正确的（可以尝试推导看看），那么结果如何呢？我在多核x86机器上（关于体系结构的说明见后文）运行了该程序：

<pre class="lang:default decode:true " >
➜  test git:(master) ✗ ./dekker 10000000
Starting task2
Starting task1
Both threads terminated
[-] Dekker did not work, sum 19999915 rather than 20000000.
85 missed updates due to memory consistency races.
</pre>

显然结果是不正确的，问题就在于volatile并不能保证能够读到“最新”的值，它只保证了编译器每一次都生成load操作，而CPU所产生的乱序却使得该load操作读到了“旧值”，导致了混乱。在代码中合适的位置添加memory barrier即可防止这种异常（去掉注释即可）。

上面的例子说明单独使用volatile很有可能无法得到你想要的结果。所以，当你要使用volatile时，一定要思考清楚究竟为什么要用它？是否需要使用memory barrier？是不是对编译器优化产生了无谓的抑制？

<a href="https://www.kernel.org/doc/Documentation/volatile-considered-harmful.txt">Linux内核社区对volatile的思考</a>中提到，在Linux内核中使用volatile的场景绝大部分都是错误使用，这也足以证明随意使用volatile的危险性：即使对聪明的Linux内核开发人员来说，也常常难以正确的使用volatile。

我的想法是：存在即有道理，volatile的存在一定是有其使用场景的，但volatile也确实是一个非常危险的关键字，在想要使用volatile时一定要谨记在心：“volatile<strong>只是</strong>对编译器起作用，让编译器老老实实的按照程序描述生成变量store/load指令”，然后再问自己一个问题：这真的是你想要的效果么？

<h2>x86体系结构</h2>

<hr />

即使有了这些用来抑制优化的工具，是不是仍然感觉难以写出正确的代码...可能发生乱序的情况如此之多，似乎在任何时候都需要考虑要不要使用memory barrier，实在是太复杂了。

没错，在多核环境并行编程就是这么复杂，但前提是你要写的是<strong>可移植</strong>的代码。因为不同体系结构的CPU实现有很大差别，所以他们所提供的顺序保证也一定是不同的。x86平台作为目前最为流行的体系结构，实际上已经为我们提供了很强的顺序性保证了，如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_5.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/perfc_5.png" alt="" width="467" height="709" class="aligncenter size-full wp-image-1573" /></a>

可以看到x86体系结构中只会发生一种乱序(忽略图中最后一列，最后一列的含义是指令cache的一致性，不在讨论范围内)：store-load乱序，举个例子，如下图在两个CPU上并行执行代码：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder.png" alt="slreorder" width="319" height="134" class="aligncenter size-full wp-image-1574" /></a>

在CPU代码中，两个线程都是先执行store操作（x和y的初始值都是0），然后再执行load操作，按照这个逻辑，我们可以确认执行完毕后后r1和r2的值至少有一个是1。然而在x86体系结构中由于会出现store-load乱序，所以两个线程的store-load执行顺序都有可能产生变化，如下图：

<a href="http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2016/10/slreorder2.png" alt="slreorder2" width="459" height="182" class="aligncenter size-full wp-image-1575" /></a>

所以可能会产生r1和r2都为0的执行结果，这是不符合程序执行逻辑的。下面让我们通过程序实际验证这种乱序行为（上文中的Dekker算法也是一个例子）：

<pre class="lang:c decode:true " >
/*
 * Demo program for catching cpu reorder behaviors
 *
 * Compile: g++ -O2 -o reorder reorder.cpp -lpthread
 * Usage: ./reorder <loopcount>
 */

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <sys/resource.h>

int gLoopCount;
int A, B, X, Y;

inline int64_t current_time()
{
  struct timeval t;
  if (gettimeofday(&t, NULL) < 0) {
  }
  return (static_cast<int64_t>(t.tv_sec) * static_cast<int64_t>(1000000) + static_cast<int64_t>(t.tv_usec));
}

void* worker1(void *arg)
{
  X = 1;
  asm volatile("" ::: "memory");
  A = Y;
}

void* worker2(void *arg)
{
  Y = 1;
  asm volatile("" ::: "memory");
  B = X;
}


int main(int argc, char *argv[])
{
  pthread_t race_thread_1;
  pthread_t race_thread_2;

  int64_t count = 0;

  /* Check arguments to program*/
  if(argc != 2) {
    fprintf(stderr, "USAGE: %s <loopcount>\n", argv[0]);
    exit(1);
  }

  /* Parse argument */
  gLoopCount = atoi(argv[1]); /* Don't bother with format checking */

  for (int i = 0; i < gLoopCount; ++i) {
    X = 0;
    Y = 0;

    /* Start the threads */
    pthread_create(&race_thread_1, NULL, (void* (*)(void*))worker1, NULL);
    pthread_create(&race_thread_2, NULL, (void* (*)(void*))worker2, NULL);

    /* Wait for the threads to end */
    pthread_join(race_thread_1, NULL);
    pthread_join(race_thread_2, NULL);

    if (A == 0 && B == 0) {
      printf("reorder caught!\n");
      count++;
    }

  }

  printf("%d reorder cought in %d iterations.\n", count, gLoopCount);

  return 0;
}
</pre>

在多核x86机器上运行该程序会发现冲突：

<pre class="lang:default decode:true " >
➜  test git:(master) ✗ ./reorder 100000
reorder caught!
reorder caught!
reorder caught!
...
164 reorder cought in 100000 iterations.
</pre>

在store-load操作之间加上memory barrier指令（例如使用GNU C的 <span class="lang:default decode:true  crayon-inline " >__sync_synchronize();</span> )后可以消除这种异常。

Trade off无处不在，对CPU设计人员也是一样，如果使用更多的Trick，虽然可以达到更高的指令执行速度，但却要为上层程序开发人员带来更大的负担。一般来说，如果你只是编写在x86平台上运行的代码，那么只需要考虑store-load乱序就可以了，这也是x86体系结构为我们提供的巨大便利。

<h2>What's next</h2>

<hr />

这篇文章概要性的介绍了一些在多核环境中并行编程所需要注意的几个基本问题，还有很多问题没有展开探讨，以后可能会写基于一些细节展开进行分析，以及lock-free数据结构、内存回收技术相关的文章。

<h2>参考资料</h2>

<div class="footnotes">
<hr />
<ol>

<li id="fn-1558-perfbook">
Is Parallel Programming Hard, And, If So, What Can You Do About It?&#160;<a href="#fnref-1558-perfbook">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1558</wp:post_id>
		<wp:post_date><![CDATA[2016-10-17 23:59:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-17 15:59:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cache-coherence-sequential-consistency-and-memory-barrier]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="memory-barrier"><![CDATA[memory barrier]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e6%a0%b8"><![CDATA[多核]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e7%ba%bf%e7%a8%8b"><![CDATA[多线程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5230332817]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1416</wp:comment_id>
			<wp:comment_author><![CDATA[Cache line alignment optimization not reducing cache miss &#8211; Windows Questions]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://windowsquestions.com/2021/12/17/cache-line-alignment-optimization-not-reducing-cache-miss/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[51.195.124.108]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-12-18 07:39:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-12-17 23:39:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] I got this piece of code demonstrating how cache line alignment optimization works by reducing &#8216;false sharing&#8217; from http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639784357.8781569;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>推荐几个不错的VPS</title>
		<link>http://blog.kongfy.com/2016/12/%e6%8e%a8%e8%8d%90%e5%87%a0%e4%b8%aa%e4%b8%8d%e9%94%99%e7%9a%84vps/</link>
		<pubDate>Sun, 11 Dec 2016 02:30:14 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1602</guid>
		<description></description>
		<content:encoded><![CDATA[最近抽空把服务器迁移到了linode的Fremont机房，没啥特别原因，内存大啊~10刀2G内存，终于可以大胆的多开几个php-fpm进程了：）

于是我又无耻的来贴推广链接了...

<!--more-->

Linode就不用介绍了，老牌VPS厂商了，10刀2G内存真心良心。他家的tokyo机房应该是最出名的，不过已经卖光了，现在又出了tokyo 2机房，但线路一般（科学上网你懂的）。用我的<a href="https://www.linode.com/?r=ca34c2c65b5dd1c5405be6c9e7ba3746aabaaadc">推广链接</a>可以获得<strong>10刀优惠</strong>。

Vultr也算是名气挺大VPS厂商了，5刀的小机器很划算，我用了一个东京的机器用来做『跳板机』。不过缺点是...国人太多，线路拥堵严重，需要多换几个IP碰碰运气，用我的<a href="http://www.vultr.com/?ref=7040779-3B">推广链接</a>可以获得<strong>20刀优惠</strong>（指写本文时，过一段时间应该会减少到10刀）。

虽然我刚刚迁移出DigitalOcean，但这么些年他家的机器一直很稳定，还是要赞一个的。用我的<a href="https://m.do.co/c/12b0d4e80ee5">推广链接</a>可以获得<strong>10刀优惠</strong>。

PS:中国网络情况复杂，买以前建议通过各家的speedtest地址看看自己连接的实际线路效果（google一下都能找到，然后ping+traceroute）。<strong>网上的评测好不等于自己用着好</strong>，这很重要。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1602</wp:post_id>
		<wp:post_date><![CDATA[2016-12-11 10:30:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-11 02:30:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8e%a8%e8%8d%90%e5%87%a0%e4%b8%aa%e4%b8%8d%e9%94%99%e7%9a%84vps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[杂七杂八]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5371748765]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e8%bf%99%e5%8f%88%e6%98%af%e4%b8%80%e6%9d%a1%e5%b9%bf%e5%91%8a]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>多核并发编程中的cache line对齐问题</title>
		<link>http://blog.kongfy.com/2017/01/%e5%a4%9a%e6%a0%b8%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%e4%b8%ad%e7%9a%84cache-line%e5%af%b9%e9%bd%90%e9%97%ae%e9%a2%98/</link>
		<pubDate>Mon, 02 Jan 2017 03:23:50 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1610</guid>
		<description></description>
		<content:encoded><![CDATA[先看一段代码：

<pre class="lang:c++ mark:13-21 decode:true " >#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;algorithm&gt;

using namespace std;

static const int64_t MAX_THREAD_NUM = 128;

static int64_t n          = 0;
static int64_t loop_count = 0;

#pragma pack (1)
struct data
{
  int32_t pad[15];
  int64_t v;
};
#pragma pack ()

static data value __attribute__((aligned(64)));
static int64_t counter[MAX_THREAD_NUM];

void worker(int *cnt)
{
  for (int64_t i = 0; i &lt; loop_count; ++i) {
    const int64_t t = value.v;

    if (t != 0L &amp;&amp; t != ~0L) {
      *cnt += 1;
    }

    value.v = ~t;
    asm volatile("" ::: "memory");
  }
}

int main(int argc, char *argv[])
{
  pthread_t threads[MAX_THREAD_NUM];

  /* Check arguments to program*/
  if(argc != 3) {
      fprintf(stderr, "USAGE: %s &lt;threads&gt; &lt;loopcount&gt;\n", argv[0]);
      exit(1);
  }

  /* Parse argument */
  n          = min(atol(argv[1]), MAX_THREAD_NUM);
  loop_count = atol(argv[2]); /* Don't bother with format checking */

  /* Start the threads */
  for (int64_t i = 0L; i &lt; n; ++i) {
    pthread_create(&amp;threads[i], NULL, (void* (*)(void*))worker, &amp;counter[i]);
  }

  int64_t count = 0L;
  for (int64_t i = 0L; i &lt; n; ++i) {
    pthread_join(threads[i], NULL);
    count += counter[i];
  }

  printf("data size: %lu\n", sizeof(value));
  printf("data addr: %lX\n", (unsigned long)&amp;value.v);
  printf("final: %016lX\n", value.v);

  return 0;
}

</pre>

这段代码的逻辑很简单，开多个线程并行执行一个不断对全局变量取反的操作，你觉得最后的结果会是什么呢？

<!--more-->

简单理解似乎没什么可考虑的，不断取反即使并发产生冲突，但结果也只有两个情况：全0或者全1，运行一下看看结果（<strong>一定要在多核机器上运行</strong>）：

<pre class="lang:sh decode:true " >[jingyan.kfy@OceanBase224006 test]$ ./alignment 24 10000
data size: 68
data addr: 6016FC
final: FFFFFFFF00000000</pre>

最后的结构居然是一半1和一半0！是不是很神奇~

出现这种结果的原因其实很简单，我在程序中设置了特殊的对齐，把这个变量放在了跨越两个cacheline的位置（仔细看代码中高亮的部分）。这样的设置会引发一个反直觉的事实：<strong>CPU的一条访存指令是分成两个访存操作执行的</strong>。

如果你看过我的<a href="http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/" target="_blank">前一篇文章</a>，那你应该会很容易理解这个现象：Cache-Coherence的基本单元就是cache line，为了写内存，CPU必须Exclusive的占有这个cache line，而如果一个变量分布在两个不同的cache line上，那么cache line的争用过程是没有原子性保证的。读的过程也是类似的。

这一点在Intel的文档<sup id="fnref-1610-intel"><a href="#fn-1610-intel" class="jetpack-footnote">1</a></sup>中也得到了验证：

<blockquote>
  Intel 64 memory ordering guarantees that for each of the following memory-access instructions, the constituent memory operation appears to execute as a single memory access regardless of memory type:
  
  <ol>
  <li>Instructions that read or write a single byte.</li>
  <li>Instructions that read or write a word (2 bytes) whose address is aligned on a 2 byte boundary.</li>
  <li>Instructions that read or write a doubleword (4 bytes) whose address is aligned on a 4 byte boundary.</li>
  <li>Instructions that read or write a quadword (8 bytes) whose address is aligned on an 8 byte boundary.</li>
  </ol>
  
  All locked instructions (the implicitly locked xchg instruction and other read-modify-write instructions with a lock prefix) are an indivisible and uninterruptible sequence of load(s) followed by store(s) regardless of memory type and alignment.
  
  <strong>Other instructions may be implemented with multiple memory accesses</strong>. From a memory- ordering point of view, <strong>there are no guarantees regarding the relative order in which the constituent memory accesses are made</strong>. There is also no guarantee that the constituent operations of a store are executed in the same order as the constituent operations of a load.
</blockquote>

可以看到Intel只保证了满足对齐规则的变量的访存操作原子性，这样的对齐规则保证变量不会跨越多个cache line。

那么我们该怎么办呢？其实很简单，Gcc默认的变量对齐是符合Intel的对齐要求的，所以正常情况下这种“异常”是完全不会发生的。但是当你自行操作内存的时候就一定要注意了：因为这个时候没有人会再来帮你对变量进行对齐了，You are on your own。

所以在进行底层系统编程的时候，一定要了解硬件的脾性，小心小心再小心。

<h2>参考资料</h2>

<div class="footnotes">
<hr />
<ol>

<li id="fn-1610-intel">
Intel® 64 Architecture Memory Ordering White Paper&#160;<a href="#fnref-1610-intel">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1610</wp:post_id>
		<wp:post_date><![CDATA[2017-01-02 11:23:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-02 03:23:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%9a%e6%a0%b8%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%e4%b8%ad%e7%9a%84cache-line%e5%af%b9%e9%bd%90%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e6%a0%b8"><![CDATA[多核]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e7%ba%bf%e7%a8%8b"><![CDATA[多线程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5428408112]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用户态同步之自旋锁</title>
		<link>http://blog.kongfy.com/2017/01/%e7%94%a8%e6%88%b7%e6%80%81%e5%90%8c%e6%ad%a5%e4%b9%8b%e8%87%aa%e6%97%8b%e9%94%81/</link>
		<pubDate>Fri, 27 Jan 2017 15:58:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1616</guid>
		<description></description>
		<content:encoded><![CDATA[最近花了一些时间研究如何在用户态实现自旋锁，这里简单的总结一下。本文的所有代码以及配套的测试用代码都可以在我的<a href="https://github.com/kongfy/playground/tree/master/lock" target="_blank">github</a>上找到。

<h2>问题在哪</h2>

<hr />

首先明确问题，我们需要一种用户态实现的线程同步机制，正确性当然是最重要的。本文的目的是实现正确的自旋锁（自旋锁比较简单轻量，但了解了原理后实现互斥锁并不困难，自行维护等待关系并通过 <span class="lang:default decode:true  crayon-inline " >futex</span> 对线程执行挂起、唤醒操作就可以了）。

概念上这个问题很简单啊，是不是我们只要用一个线程共享的变量做互斥，然后在线程获得和释放锁时修改这个变量就行了？比如像下面这样：

<pre class="lang:c++ decode:true " >#ifndef _FAKELOCK_H_
#define _FAKELOCK_H_

class FakeLock
{
public:
  FakeLock() {};
  virtual ~FakeLock() {};

  FakeLock(const FakeLock&amp;) = delete;
  FakeLock &amp;operator=(const FakeLock&amp;) = delete;

  virtual int lock()
  {
    while (1L == lock_) {
      asm volatile("pause\n" ::: "memory");
    }
    lock_ = 1L;
    return 0;
  }

  virtual int unlock()
  {
    lock_ = 0L;
    return 0;
  }

 private:
  int64_t lock_;
};

#endif /* _FAKELOCK_H_ */</pre>

然而事情没这么简单，因为对这个变量的操作不是<strong>原子</strong>的，所以会导致这个锁无法正确的运行（即使在单核环境也如此），因此我们需要<strong>利用硬件提供的原子操作</strong>来实现锁（FYI. 一种不需要原子操作的锁实现方法见<a href="http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/" target="_blank">前文</a>中提到过的Dekker算法，非常漂亮，但通用性不足）。

除此之外，另一个问题是多核争用的性能问题，这一点我会在后文中提到。

另外由于在用户态实现锁对硬件体系结构提供的一致性保证非常相关，所以必须注明，本文中所有实现<strong>针对于x86体系结构</strong>（<del datetime="2019-07-04T10:39:41+00:00">也就是acquire-release语义</del>TSO内存模型），<strong>不具备可移植性</strong>。

<!--more-->

<h2>接口说明</h2>

<hr />

为了后续说明方便，首先定义出自旋锁的接口：

<pre class="lang:c++ decode:true " >#ifndef _LOCK_H_
#define _LOCK_H_

#include &lt;stdio.h&gt;

class BaseLock
{
public:
  BaseLock() {};
  virtual ~BaseLock() {};

  BaseLock(const BaseLock&amp;) = delete;
  BaseLock &amp;operator=(const BaseLock&amp;) = delete;

  virtual int lock() = 0;
  virtual int unlock() = 0;
};


class BaseLockGuard
{
public:
  BaseLockGuard(BaseLock &amp;lock) : lock_(lock)
  {
    if (lock_.lock()) {
      printf("lock failed.\n");
    }
  }

  virtual ~BaseLockGuard()
  {
    if (lock_.unlock()) {
      printf("unlock failed.\n");
    }
  }

  BaseLockGuard(const BaseLockGuard&amp;) = delete;
  BaseLockGuard &amp;operator=(const BaseLockGuard&amp;) = delete;
private:
  BaseLock &amp;lock_;
};

#endif /* _LOCK_H_ */</pre>

后续的几种实现继承 <span class="lang:default decode:true  crayon-inline " >BaseLock</span> ，通过 <span class="lang:default decode:true  crayon-inline " >lock</span> 和 <span class="lang:default decode:true  crayon-inline " >unlock</span> 方法来进行加锁解锁操作。 <span class="lang:default decode:true  crayon-inline " >BaseLockGuard</span> 是RAII的资源管理类，可选。

<h2>TAS(test and set) lock</h2>

<hr />

首先是最为基础的TAS lock，即利用test and set原子操作实现自旋锁。原理和我们上文看到的 <span class="lang:default decode:true  crayon-inline " >FakeLock</span> 是一样的，但是通过test and set把“读-写”的两个步骤原子化，保证了运行时的正确性。

<pre class="lang:c++ decode:true " >#ifndef _TASLOCK_H_
#define _TASLOCK_H_

#include "lock.h"

class TASLock : public BaseLock
{
public:
  TASLock() : lock_(0L)
  {
  }

  virtual ~TASLock() override
  {
  }

  virtual int lock() override
  {
    while (__sync_lock_test_and_set(&amp;lock_, 1L)) {
      asm volatile("pause\n");
    }
    return 0;
  }

  virtual int unlock() override
  {
    lock_ = 0L;
    return 0;
  }

private:
  int64_t lock_;
};

#endif /* _TASLOCK_H_ */</pre>

这个锁效率很低，是因为没有引入引用指数退避之类的策略，等待效率低下，不过这不妨碍我们理解原理。在引入生产环境时需要注意这些细节。

<h2>Tiket lock</h2>

<hr />

TAS lock存在的一个问题是公平性的问题，及等待在锁上的线程不是FIFO（先进先出）的，这可能会导致有些线程等待时间过长甚至饥饿。一般来说这并不是个好事情，于是有了一种保证FIFO的自旋锁：Tiket lock。（<strong>补充说明：</strong>FIFO的锁一定更好么？还是要分情况来看，FIFO的锁有可能性能更差，试想如果要获取锁的线程在锁空出来的时候恰好被调度出去了，那么其他所有线程都必须持续无意义的spin，导致了性能浪费。通过实验可以明显的看到当抢锁的线程数超过CPU核数时，FIFO的锁性能出现了明显的拐点）

Tiket lock的原理也十分简单：和我们在餐厅取号的原理相同，每一个尝试获取锁的线程都要先“取号”，然后等待“叫号”，解锁过程就是叫“下一个号”的过程，这样就保证了等待线程的FIFO。

<pre class="lang:c++ decode:true " >#ifndef _TIKETLOCK_H_
#define _TIKETLOCK_H_

#include "lock.h"

class TiketLock : public BaseLock
{
public:
  TiketLock() : next_tiket(0), now_serving(0)
  {
  }

  virtual ~TiketLock() override
  {
  }

  virtual int lock() override
  {
    int64_t my_tiket = __sync_fetch_and_add(&amp;next_tiket, 1);
    while (my_tiket != now_serving) {
      asm volatile("pause\n" ::: "memory");
    }
    return 0;
  }

  virtual int unlock() override
  {
    now_serving += 1;
    return 0;
  }
private:
  int64_t next_tiket, now_serving;
};


#endif /* _TIKETLOCK_H_ */</pre>

那Tiket lock还存在什么问题么？答案是多核并发的效率问题。不光是Tiket lock，前面的TAS lock也是一样，这两个锁的核心都是多线程同时访问一个变量，那么让我们回忆cache coherence的内容，这样的过程会引起大量的cache misses，以及必要的核间通信、cache line的争用。

如下图（ <span class="lang:default decode:true  crayon-inline " >unlock</span> 过程中对 <span class="lang:default decode:true  crayon-inline " >now_serving</span> 的修改要invalidate其他核上的对应cache line）：

[caption id="attachment_1618" align="aligncenter" width="969"]<a href="http://blog.kongfy.com/wp-content/uploads/2017/01/tiket.png"><img src="http://blog.kongfy.com/wp-content/uploads/2017/01/tiket.png" alt="tiket lock racing" width="969" height="353" class="size-full wp-image-1618" /></a> tiket lock racing[/caption]

解决方法很简单，只要每个核都spin在自己持有的cache line中的变量上就可以了。后文中提到的几种锁的基本思想都是如此。

<h2>Array based queue lock</h2>

<hr />

Array based queue lock，锁如其名，是基于数组实现的FIFO锁。使用数组代替单个变量来达到分离多核竞争的效果。

实现的原理是是当线程加锁时，找到锁的“等待队列”中上一个线程，spin在上一个线程的标记变量上，因为每个标记变量只被一个线程读取，所以减少了核之间的cache line争用。

<pre class="lang:c++ decode:true " >#ifndef _ARRAYLOCK_H_
#define _ARRAYLOCK_H_

#include &lt;utmpx.h&gt;
#include &lt;string.h&gt;

#define CACHE_ALIGN_SIZE 64
#define CACHE_ALIGNED __attribute__((aligned(CACHE_ALIGN_SIZE)))

static const int64_t MAX_THREAD_NUM = 128;

class ArrayLock
{
public:
  ArrayLock() : pack_(0L)
  {
    memset(slots_, 0L, sizeof(slots_));
    pack_ = (unsigned long)&amp;slots_[0] | 1Lu;
  }

  virtual ~ArrayLock() {}

  ArrayLock(const ArrayLock&amp;) = delete;
  ArrayLock &amp;operator=(const ArrayLock&amp;) = delete;

  virtual int lock(const int64_t tid)
  {
    if (tid &lt; 0) return -1;

    unsigned long pack = __sync_lock_test_and_set(&amp;pack_, (unsigned long)&amp;slots_[tid] | (unsigned long)slots_[tid].v);
    bool *tail = &amp;(((aligned_bool *)(pack &amp; ~1Lu))-&gt;v);
    bool locked = pack &amp; 1Lu;

    while (locked == *tail) {
      asm volatile("pause\n" ::: "memory");
    }
    return 0;
  }

  virtual int unlock(const int64_t tid)
  {
    if (tid &lt; 0) return -1;

    slots_[tid].v = !slots_[tid].v;
    return 0;
  }
  
private:
  struct aligned_bool{
    bool v;
  } CACHE_ALIGNED slots_[MAX_THREAD_NUM];
  unsigned long pack_; // last bit is "this_means_locked"
};

class ArrayLockGuard
{
public:
  ArrayLockGuard(ArrayLock &amp;lock, const int64_t tid) : lock_(lock), tid_(tid)
  {
    if (lock_.lock(tid_)) {
      printf("lock failed.\n");
    }
  }

  virtual ~ArrayLockGuard()
  {
    if (lock_.unlock(tid_)) {
      printf("unlock failed.\n");
    }
  }

  ArrayLockGuard(const ArrayLockGuard&amp;) = delete;
  ArrayLockGuard &amp;operator=(const ArrayLockGuard&amp;) = delete;
private:
  ArrayLock &amp;lock_;
  const int64_t tid_;
};

#endif /* _ARRAYLOCK_H_ */</pre>

代码实现比较繁琐，比较重要的一点是数组中每一个元素一定要按照cache line对齐。我的实现 <span class="lang:default decode:true  crayon-inline " >tid</span> 的处理不是很好。

基于数组的实现看似已经很完美了，唯有一个问题就是拓展性不好，受制于数组的动态伸缩能力有限，于是又有了下文中的两种基于链表的实现方法。

<h2>MCS lock</h2>

<hr />

不论是基于链表还是基于数组，其基本思想依然是不变的：每一个核都等待在核局部的变量上。

[caption id="attachment_1619" align="aligncenter" width="777"]<a href="http://blog.kongfy.com/wp-content/uploads/2017/01/list_queue_lock.png"><img src="http://blog.kongfy.com/wp-content/uploads/2017/01/list_queue_lock.png" alt="list based queue lock" width="777" height="314" class="size-full wp-image-1619" /></a> list based queue lock[/caption]

和数组不同的是当加锁时，需要提供一个链表节点（按cache line对齐），所以需要一个独特的基类中，基类定义了链表节点 <span class="lang:default decode:true  crayon-inline " >qnode</span> ，并重载了 <span class="lang:default decode:true  crayon-inline " >new</span> 和 <span class="lang:default decode:true  crayon-inline " >delete</span> 操作符，为了让申请到的内存按照cache line对齐：

<pre class="lang:c++ decode:true " >#ifndef _LISTLOCK_H_
#define _LISTLOCK_H_

class ListLock
{
public:
  class qnode
  {
  public:
    qnode *p_qnode;
    bool locked;

    void *operator new(size_t request)
    {
      static const size_t needed = CACHE_ALIGN_SIZE + sizeof(void *) + sizeof(qnode);

      void *alloc = ::operator new(needed);
      void *ptr = (void *)((((unsigned long)alloc + CACHE_ALIGN_SIZE) &amp; ~(CACHE_ALIGN_SIZE - 1)) + sizeof(void *));

      ((void **)ptr)[-1] = alloc; // save for delete calls to use
      return ptr;
    }

    void operator delete(void *ptr)
    {
      if (ptr) { // 0 is valid, but a noop, so prevent passing negative memory
        void * alloc = ((void **)ptr)[-1];
        ::operator delete (alloc);
      }
    }
  };

  ListLock() {};
  virtual ~ListLock() {};

  ListLock(const ListLock&amp;) = delete;
  ListLock &amp;operator=(const ListLock&amp;) = delete;

  virtual int lock(qnode *node) = 0;
  virtual int unlock(qnode *&amp;node) = 0;
};

class ListLockGuard
{
public:
  ListLockGuard(ListLock &amp;lock) : lock_(lock)
  {
    node_ = new ListLock::qnode();
    lock_.lock(node_);
  }

  virtual ~ListLockGuard()
  {
    lock_.unlock(node_);
    delete node_;
  }

  ListLockGuard(const ListLockGuard&amp;) = delete;
  ListLockGuard &amp;operator=(const ListLockGuard&amp;) = delete;
private:
  ListLock &amp;lock_;
  ListLock::qnode *node_;
};

#endif /* _LISTLOCK_H_ */</pre>

有了这个基类，让我们来实现大名鼎鼎的MCS lock。MCS lock的基本思想是：<strong>当一个线程离开临界区解锁时，通知队列中的下一个线程。</strong>

<pre class="lang:c++ decode:true " >#ifndef _MCSLOCK_H_
#define _MCSLOCK_H_

#include "listlock.h"

class MCSLock : public ListLock
{
public:
  MCSLock() : lock_(NULL)
  {
  }

  virtual ~MCSLock()
  {
  }

  virtual int lock(qnode *node) override
  {
    node-&gt;p_qnode = NULL;

    qnode *prev = __sync_lock_test_and_set(&amp;lock_, node);
    // ATTENTION: time window here.
    if (prev) {
      node-&gt;locked = true;
      prev-&gt;p_qnode = node;

      while (node-&gt;locked) {
        asm volatile("pause\n" ::: "memory");
      }
    }
    return 0;
  }

  virtual int unlock(qnode *&amp;node) override
  {
    if (!node-&gt;p_qnode) {
      if (__sync_bool_compare_and_swap(&amp;lock_, node, NULL)) {
        return 0;
      }
      // take care of time window
      while (!node-&gt;p_qnode) {
        asm volatile("pause\n" ::: "memory");
      }
    }
    node-&gt;p_qnode-&gt;locked = false;
    return 0;
  }
private:
  qnode *lock_;
};

#endif /* _MCSLOCK_H_ */</pre>

<h2>CLH lock</h2>

<hr />

另外一个基于链表的锁实现是CLH lock，基本上来说和MCS的做法如出一辙，区别在于MCS lock是解锁时通知队列中的下一个线程，而CLH lock是每个线程等待在队列中前一个线程的锁节点上（有点绕，代码上表现的很明显）。

<pre class="lang:c++ decode:true " >#ifndef _CLHLOCK_H_
#define _CLHLOCK_H_

#include "listlock.h"

class CLHLock : public ListLock
{
public:
  CLHLock()
  {
    lock_ = new qnode();
    lock_-&gt;locked = false;
  }

  virtual ~CLHLock()
  {
    delete lock_;
  }

  virtual int lock(qnode *node) override
  {
    node-&gt;locked = true;

    qnode *prev = __sync_lock_test_and_set(&amp;lock_, node);
    while (prev-&gt;locked) {
      asm volatile("pause\n" ::: "memory");
    }
    return 0;
  }

  virtual int unlock(qnode *&amp;node) override
  {
    qnode *t = node-&gt;p_qnode;
    node-&gt;locked = false;
    node = t;
    return 0;
  }
private:
  qnode *lock_;
};


#endif /* _CLHLOCK_H_ */</pre>

其实代码上来看，CLH和MCS真的非常相似，如果硬要对比，CLH似乎更为简洁和高效？

<h2>参考资料</h2>

<hr />

<ul>
<li><a href="http://www.cs.rochester.edu/research/synchronization/pseudocode/ss.html">Algorithms for Scalable Synchronization on Shared-Memory Multiprocessors</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1616</wp:post_id>
		<wp:post_date><![CDATA[2017-01-27 23:58:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-27 15:58:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8%e6%88%b7%e6%80%81%e5%90%8c%e6%ad%a5%e4%b9%8b%e8%87%aa%e6%97%8b%e9%94%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e6%a0%b8"><![CDATA[多核]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e7%ba%bf%e7%a8%8b"><![CDATA[多线程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5498847165]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>无锁队列的一种实现</title>
		<link>http://blog.kongfy.com/2017/02/%e6%97%a0%e9%94%81%e9%98%9f%e5%88%97%e7%9a%84%e4%b8%80%e7%a7%8d%e5%ae%9e%e7%8e%b0/</link>
		<pubDate>Sat, 11 Feb 2017 16:46:00 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1627</guid>
		<description></description>
		<content:encoded><![CDATA[队列作为最常用的基础数据结构之一，相信大家都已经非常非常熟悉了，这里省略关于队列的介绍。在平时开发中队列的出现频率非常非常高，因此我们也会很关心队列的性能问题。当并发访问队列时，队列的性能往往受到同步手段的制约，最简单的方式是使用互斥锁对整个队列加锁，但其并发性能却惨不忍睹。

因此，有了各式各样的无锁队列实现，本文介绍其中的一种实现。还是老样子，实现基于x86体系结构，Linux环境。

<!--more-->

<h2>初始化</h2>

<hr />

和大部分无锁数据结构的实现一样，这个无锁队列的实现也是基于链表的，声明如下：

<pre class="lang:c++ decode:true " >#ifndef _QUEUE_H_
#define _QUEUE_H_

#define CACHE_ALIGN_SIZE 64
#define CACHE_ALIGNED __attribute__((aligned(CACHE_ALIGN_SIZE)))

template &lt;typename T&gt;
class Queue
{
public:
  Queue() : head_(NULL), tail_(NULL)
  {
    head_ = tail_ = new qnode();
    head_-&gt;next = NULL;
  }

  virtual ~Queue()
  {
    T tmp;
    while (dequeue(tmp)) {
    }

    delete head_;
  }

  void enqueue(const T &amp;data);
  bool dequeue(T &amp;data);
private:
  class qnode
  {
  public:
    T data;
    qnode *next;
  };

  qnode * head_ CACHE_ALIGNED;
  qnode * tail_ CACHE_ALIGNED;
};

#endif /* _QUEUE_H_ */</pre>

初始化后队列的头尾都指向一个dummy节点，并且头尾指针都按照cache line对齐，以避免产生false sharing问题。

<h2>进队（enqueue）</h2>

<hr />

进队操作分三步：

<ol>
<li>创建新节点</li>
<li>将当前尾节点的<span class="lang:default decode:true  crayon-inline " >next</span>指针指向新节点</li>
<li>修改尾指针指向新创建的节点</li>
</ol>

其中第二步和第三步在常规的队列实现中往往需要借助于锁来保证原子性，如果不使用锁会怎么样？

除了第一步是没有竞争的，第二步和第三步在并发执行的时候都会有竞争（都是对共享变量的read-modify-write操作），这要求我们需要使用原子操作来实现这两步。然而仅仅这样也还是不够的，这不能保证第二步和第三步的原子性，因此需要一些特殊的处理，看代码：

<pre class="lang:c++ decode:true " >template &lt;typename T&gt;
void Queue&lt;T&gt;::enqueue(const T &amp;data)
{
  qnode *node = new qnode();
  node-&gt;data = data;
  node-&gt;next = NULL;
  qnode *t = NULL;
  qnode *next = NULL;

  while (true) {
    t = tail_;
    next = t-&gt;next;
    asm volatile("" ::: "memory");
    if (tail_ != t) {
      continue;
    }
    if (next) {
      __sync_bool_compare_and_swap(&amp;tail_, t, next);
      continue;
    }
    if (__sync_bool_compare_and_swap(&amp;t-&gt;next, NULL, node)) {
      break;
    }
  }
  __sync_bool_compare_and_swap(&amp;tail_, t, node);
}</pre>

注意代码17-20行，这段逻辑就是处理两个操作不原子的关键所在。当并发执行进队时，通过循环检查并向前推进尾指针来保证拿到最新的尾指针。

另一段有意思的代码是13-16行，这一行对变量<span class="lang:default decode:true  crayon-inline " >t</span>进行检查，目的在于确认<span class="lang:default decode:true  crayon-inline " >t</span>和<span class="lang:default decode:true  crayon-inline " >next</span>的值是一致的，但是在这个特定的情景中我理解实际上可以删去而不影响正确性，因为后续的CAS操作同样会检查这一条件。

<h2>出队（dequeue）</h2>

<hr />

出队操作相对入队要简单不少，只要把头指针向后移并拿出数据就可以了。但是在无锁并发的情况下仍有不少细节需要考虑，直接看代码：

<pre class="lang:c++ decode:true " >template &lt;typename T&gt;
bool Queue&lt;T&gt;::dequeue(T &amp;data)
{
  qnode *t = NULL;
  qnode *h = NULL;
  qnode *next = NULL;

  while (true) {
    h = head_;
    t = tail_;
    next = h-&gt;next;
    asm volatile("" ::: "memory");
    if (head_ != h) {
      continue;
    }
    if (!next) {
      return false;
    }
    if (h == t) {
      __sync_bool_compare_and_swap(&amp;tail_, t, next);
      continue;
    }
    data = next-&gt;data;
    if (__sync_bool_compare_and_swap(&amp;head_, h, next)) {
      break;
    }
  }

  h-&gt;next = (qnode *)1; // bad address, It's a trap!
  /* delete h; */
  return true;
}</pre>

需要解释的地方不多，只有一个比较有意思的地方，在代码的12-15行有一个检查，这个检查和之前提到的一样，是用来保证<span class="lang:default decode:true  crayon-inline " >h</span>和<span class="lang:default decode:true  crayon-inline " >next</span>变量是一致的。和进队过程中的那个不同的是，这段逻辑不是可有可无的，因为在23行对<span class="lang:default decode:true  crayon-inline " >next</span>指针的访问发生在CAS操作之前，如果访问了已经出队的节点则会导致程序崩溃。

<h2>What's next?</h2>

<hr />

到这里看上去这个无锁队列已经完成了，并且可以正确的运行。但你一定会发现一个严重的问题：这个队列中的内存从来没有被释放所以在不断的泄露。

没错，这就是无锁数据结构普遍存在的问题，因为没有使用互斥的同步机制，所以很难找到一个安全的释放内存的时机。你可能会认为在完成出队后释放掉内存不就可以了么？但是由于没有使用同步机制，我们无法保证这个已经出队的节点没有被其他并发线程持有，如果此时释放内存，Boom...如果之后这个内存又被重用，那又可能会遇到著名的ABA问题。

那这个无锁队列岂不是没用了么？当然不是，只是我们需要一种与之配套的内存生命周期管理机制，比如Linux内核中广泛使用的RCU，又比如我之后会介绍的Hazard Pointer。

<h2>一点解释</h2>

<hr />

你可能注意到了我在出队逻辑的29-30行写了两行略有些奇怪的代码，这里我来做一些解释。实际上这里本应该执行的操作是释放<span class="lang:default decode:true  crayon-inline " >h</span>指向的节点占用的内存，但是我在论文<sup id="fnref-1627-queue"><a href="#fn-1627-queue" class="jetpack-footnote">1</a></sup>原本算法的基础上做了一点改动，删除了modify count的部分（一种常用的避免ABA问题的方法），这就导致如果真的执行了内存释放就会产生ABA问题。因此我不对内存进行释放，但是修改节点保存的内容为一个非法指针，让内存非法访问的问题暴露出来（比如你可以尝试去掉出队代码12-15行的检查，这一段真的非常精妙，值得细细品味）。

我之所以做这样的修改，并不是因为论文中提出的算法不好，恰恰相反，论文中的算法非常精妙，但通用性不足，我只是单纯的为了引出一种更为通用的内存生命周期管理机制：Hazard Pointer。

<h2>参考资料</h2>

<div class="footnotes">
<hr />
<ol>

<li id="fn-1627-queue">
Michael M M, Scott M L. Simple, fast, and practical non-blocking and blocking concurrent queue algorithms[C]//Proceedings of the fifteenth annual ACM symposium on Principles of distributed computing. ACM, 1996: 267-275.&#160;<a href="#fnref-1627-queue">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1627</wp:post_id>
		<wp:post_date><![CDATA[2017-02-12 00:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-11 16:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e9%94%81%e9%98%9f%e5%88%97%e7%9a%84%e4%b8%80%e7%a7%8d%e5%ae%9e%e7%8e%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<category domain="post_tag" nicename="data-structure"><![CDATA[data structure]]></category>
		<category domain="post_tag" nicename="lock-free"><![CDATA[lock free]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5542580867]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hazard Pointer</title>
		<link>http://blog.kongfy.com/2017/02/hazard-pointer/</link>
		<pubDate>Wed, 22 Feb 2017 13:28:42 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1645</guid>
		<description></description>
		<content:encoded><![CDATA[上一篇文章中实现了一个lock-free的队列，但是有一个问题：内存无法被安全的回收。那么，这次就来把这缺失的一环补上：hazard pointer，一种lock-free对象的内存回收机制。

[caption id="attachment_1646" align="aligncenter" width="541"]<a href="http://blog.kongfy.com/wp-content/uploads/2017/02/hp.png"><img src="http://blog.kongfy.com/wp-content/uploads/2017/02/hp.png" alt="hazard pointer" width="541" height="487" class="size-full wp-image-1646" /></a> hazard pointer[/caption]

PS：因为hazard pointer完整代码略有些长，不适合贴在文章内部，完整代码可以在<a href="https://github.com/kongfy/playground/tree/master/hazard_pointer">这里</a>找到。

<!--more-->

[mathjax][/mathjax]

<h2>解决了什么问题</h2>

<hr />

在并发编程中，当我们在操作共享的内存对象时，需要考虑到其他线程是否有可能也正在访问同一对象，如果要释放该内存对象时不考虑这个问题，会引发严重的后果（访问悬空指针）。

线程互斥方法是解决这个最简单最直接的方法，访问共享内存时加锁即可保证没有其他线程正在访问同一对象，也就可以安全的释放内存了。但是如果我们正在操作的是一种lock-free的数据结构，我们自然不能容忍在这个问题上使用互斥来解决，这样会破坏lock-free的特性（不管任何线程失败，其他线程都能继续运行），那么，我们就需要<strong>一种同样lock-free的方法来解决共享内存对象的回收问题</strong>，Hazard Pointer就是其中一种方法。

除了共享内存的回收问题之外，另一个在lock-free编程中不得不提到的就是大名鼎鼎<a href="https://en.wikipedia.org/wiki/ABA_problem">ABA问题</a>。依我的理解来看，ABA问题和内存回收问题是相关的，都是<strong>内存的生命周期管理问题</strong>。具体来说，内存回收问题解的是共享内存什么时候能安全的回收，而ABA问题解的是共享内存什么时候能被安全的重新使用。因此，Hazard Pointer也可以用来解决ABA问题。

<h3>和GC有什么区别？</h3>

<hr />

一种你可能最为熟悉的解决内存回收问题的方案是GC（垃圾回收）。GC的确可以解决内存回收问题，也可以解决大部分的ABA问题（先释放后重用的使用模式），但是却不能解决所有的ABA问题。例如两个链表实现的栈，不断在两个栈之间交换节点（弹出到对面），这样做内存并没有被回收，但是却面临重用问题，有ABA风险。而Hazard Pointer可以结合数据结构解决这一问题。

<h3>和智能指针有什么区别？</h3>

<hr />

另一种C++中常见的内存管理机制是智能指针，惭愧的是我对智能指针实践有限，只能谈谈粗浅的理解。智能指针也是用来解决内存回收问题的，其本质是自动引用计数，通过智能指针对象的复制和销毁来维护引用计数。但智能指针和Hazard Pointer所解决问题的场景有很大差别：智能指针并不是线程安全的（多线程访问同一智能指针），用时髦点的话说，智能指针是一个语法糖（让你写起来很爽，但其实没有解决什么问题）。

<h2>基本原理</h2>

<hr />

在我看来，hazard pointer的原理真的非常简单直接，而且易于理解。

首先看看hazard pointer使用的数据存储结构。如题图所示，我们需要为每个线程准备一些<strong>线程局部</strong>的内存，用来存储两部分内容：

<ul>
<li>pointers:用来存储这个线程当前正在访问的内存对象，正在访问的内存对象不能被任何线程释放</li>
<li>retire list:被这个线程删除的内存对象，但还没有释放</li>
</ul>

既然我们需要安全的释放内存，那么hazard pointer的思路也很清晰：

<ol>
<li>每个线程都将自己正在访问且不希望被任何线程释放的内存对象存放在线程局部的pointers中</li>
<li>当任何线程删除内存对象后，都需要先把该内存对象放入自己线程局部的retire list</li>
<li>当retire list中的内存对象数量超过一定限度时，扫描retire list，找到没有被任何线程使用的内存节点并将其安全的释放</li>
</ol>

以上三步就构成了hazard pointer的全部内容。仔细分析流程会发现pointers是<strong>单写多读</strong>，而retire list是<strong>单写单读</strong>的，这个性质很重要，不然的话我们又需要另一种机制来保护hazard pointer了...

<h2>怎么用</h2>

<hr />

hazard pointer的使用是要结合具体的数据结构的，我们需要分析所要保护的数据结构的每一步操作，找出需要保护的内存对象并使用hazard pointer替换普通指针对危险的内存访问进行保护。还是以上次的lock-free队列来说，使用了hazard pointer后代码变为下面的样子：

<pre class="lang:c++ decode:true " >template &lt;typename T&gt;
void Queue&lt;T&gt;::enqueue(const T &amp;data)
{
  qnode *node = new qnode();
  node-&gt;data = data;
  node-&gt;next = NULL;
  // qnode *t = NULL;
  HazardPointer&lt;qnode&gt; t(hazard_mgr_);
  qnode *next = NULL;

  while (true) {
    if (!t.acquire(&amp;tail_)) {
      continue;
    }
    next = t-&gt;next;
    if (next) {
      __sync_bool_compare_and_swap(&amp;tail_, t, next);
      continue;
    }
    if (__sync_bool_compare_and_swap(&amp;t-&gt;next, NULL, node)) {
      break;
    }
  }
  __sync_bool_compare_and_swap(&amp;tail_, t, node);
}

template &lt;typename T&gt;
bool Queue&lt;T&gt;::dequeue(T &amp;data)
{
  qnode *t = NULL;
  // qnode *h = NULL;
  HazardPointer&lt;qnode&gt; h(hazard_mgr_);
  // qnode *next = NULL;
  HazardPointer&lt;qnode&gt; next(hazard_mgr_);

  while (true) {
    if (!h.acquire(&amp;head_)) {
      continue;
    }
    t = tail_;
    next.acquire(&amp;h-&gt;next);
    asm volatile("" ::: "memory");
    if (head_ != h) {
      continue;
    }
    if (!next) {
      return false;
    }
    if (h == t) {
      __sync_bool_compare_and_swap(&amp;tail_, t, next);
      continue;
    }
    data = next-&gt;data;
    if (__sync_bool_compare_and_swap(&amp;head_, h, next)) {
      break;
    }
  }

  /* h-&gt;next = (qnode *)1; // bad address, It's a trap! */
  /* delete h; */
  hazard_mgr_.retireNode(h);
  return true;
}</pre>

不要纠结在具体的实现定义上，可以看到的是队列的基本算法是没有改变的（如果你不熟悉这个队列的实现，请参考我的上一篇文章），区别在于我们使用 <span class="lang:c++ decode:true  crayon-inline " >HazardPointer</span> 保护了几个运行中需要持续保护的指针，在队列这个数据结构中，同一线程最多需要保存两个pointer就够了。

在获取内存对象地址时，我们使用 <span class="lang:c++ decode:true  crayon-inline " >HazardPointer::acquire</span> 方法将要保护的内存对象放入到hazard pointer中，在删除节点后，我们将内存对象交给 <span class="lang:c++ decode:true  crayon-inline " >retireNode</span> 方法，由hazard pointer负责安全的释放对应内存。

<h2>正确性保证</h2>

<hr />

hazard pointer的正确性在论文<sup id="fnref-1645-hp"><a href="#fn-1645-hp" class="jetpack-footnote">1</a></sup>中有非常完整的论述，我就挑其中一个我认为非常重要的点来解释为什么hazard pointer可以正确的工作。

考虑这种情况：

<ol>
<li>线程A开始访问内存对象o，拿到了o的地址</li>
<li>线程B将内存对象o从数据结构中删除，加入retire list，并扫描所有线程的pointers，此时线程A还没有来得及将o放入到pointers中，因此B可以将o释放</li>
<li>线程A将o放入pointers中</li>
<li>线程A访问o，crash...</li>
</ol>

看上去很危险，但实际上这种情况在hazard pointer中并不会发生，因为hazard pointer的正确性证明要求线程在pointers中持有的内存对象都必须是“连续安全的”，这是什么意思呢？简单来说，就是说从线程取到该内存对象的一刻开始到将其放入pointers的这段过程中这个内存对象不能被其他线程从数据结构中删除，也就是说其安全状态必须是“连续”的（安全指不会被释放，在数据结构中或是加入到pointers中的的内存对象都是安全的）。

这个要怎么做到呢？其实很简单：double check，代码如下：

<pre class="lang:c++ decode:true " >template &lt;typename T&gt;
bool HazardPointer&lt;T&gt;::acquire(const T* const *node)
{
  release();

  node_ = *node;
  if (!mgr_.acquire(node_, tid_)) {
    return false;
  }
  // continuosly holding, need sequential consistency
  __sync_synchronize();
  if (*node != node_) {
    release();
    return false;
  }

  return true;
}</pre>

必须要特别注意这里要检查是<strong>对象是否还在数据结构中</strong>，上面的检查代码示例对一些使用场景是一个比较好用的简化封装，但<strong>不是一劳永逸</strong>的，比如前面的dequeue函数中第43行就需要做一个额外检查，这也是hazard point比较难用的一点。

于是流程变成了这样：

<ol>
<li>线程A开始访问内存对象o，拿到了o的地址</li>
<li>线程B将内存对象o从数据结构中删除，加入retire list，并扫描所有线程的pointers，此时线程A还没有来得及将o放入到pointers中，因此B可以将o释放</li>
<li>线程A将o放入pointers中</li>
<li>线程A对o执行double check，发现o已经不在数据结构中了（被删除），因此认为加入到pointers中的地址是无效的，撤销并失败退出</li>
</ol>

规避了这个问题，正确性证明的其他部分就非常容易理解了。

你可能注意到了我在代码中double check过程之前使用了内存屏障，这是因为此处必须避免可能发生的“写-读”乱序问题，一旦发生乱序，则double check将毫无意义，也就是说x86提供的<del datetime="2019-07-04T10:37:51+00:00">acquire-release语义</del>TSO内存模型不能满足hazard pointer的需求，我们需要更强的sequential consistency才行。

<h2>retire过程“优化”</h2>

<hr />

另一个值得一提的点是对论文中对retire list执行扫描的过程可以做一点小小的“优化”：论文中的做法是先将所有线程的pointers组织成一个有序数组，然后在扫描retire list时对该数组做二分查找（时间复杂度为&#92;(O(\log{n})&#92;)）；实际实现中可以采用一个更加激进的方法，把所有线程的pointers无视冲突的哈希到一个布尔数组上，然后对retire list中的每个元素都可以以&#92;(O(1)&#92;)的时间复杂度确认是否可以被释放，代码如下：

<pre class="lang:c++ decode:true " >void HazardManager::scan(threadlocal &amp;rdata)
{
  rnode *p = rdata.rlist;
  rnode *q = p-&gt;next;

  bool map[hash_size_];
  memset(map, 0, hash_size_);

  for (int64_t i = 0; i &lt; MAX_THREAD_NUM; ++i) {
    const threadlocal &amp;data = storage_[i];
    for (int64_t j = 0; j &lt; data.pcount; ++j) {
      map[(unsigned long)data.hp[j] &amp; hash_mask_] = true;
    }
  }

  while (q) {
    // scan and free
    if (!map[(unsigned long)q-&gt;node &amp; hash_mask_]) {
      const rnode *t = q;
      q = q-&gt;next;
      p-&gt;next = q;
      rdata.rcount--;
      delete t-&gt;node; // bad design...
      delete t;
    } else {
      p = q;
      q = p-&gt;next;
    }
  }
}</pre>

那么这样的做法为什么是正确的呢？因为即使哈希产生了冲撞，所造成的后果无非是一个本可以释放的对象无法立刻被释放（但最终一定会被释放），而<strong>绝不会产生一个不能被释放的对象被判断为可以安全释放</strong>的情况。这样，我们以稍微延迟一些对象内存释放的代价加速了整个扫描过程，何乐而不为呢？

<h2>其他方法</h2>

<hr />

Hazard Pointer虽然很好，但并不是解决这一问题的唯一方法。McKenney在论文<sup id="fnref-1645-fast"><a href="#fn-1645-fast" class="jetpack-footnote">2</a></sup>中将这类算法分为两类：阻塞和非阻塞的(McKenney只讨论lockless的概念，lockfree算法属于其中非阻塞类)。

阻塞算法的代表是Quiescent-State-Based Reclamation(QSBR)，Linux内核中广泛使用的RCU（read-copy-update）就属于此类（之后可能也会写篇文章介绍？）；非阻塞算法的代表就是本文所描述的Hazard Pointer，以及Lock-Free Reference Counting。

McKenney作为RCU维护者，必然要指出Hazard Pointer的痛处：需要的内存屏障多（每次aquire都要触发一次），要求sequential consistency，而内存屏障的性能开销是比较高的。但McKenney作为利益相关者，我对其结论持怀疑态度。

<h2>参考资料</h2>

<div class="footnotes">
<hr />
<ol>

<li id="fn-1645-hp">
Michael M M. Hazard pointers: Safe memory reclamation for lock-free objects[J]. IEEE Transactions on Parallel and Distributed Systems, 2004, 15(6): 491-504.&#160;<a href="#fnref-1645-hp">&#8617;</a>
</li>

<li id="fn-1645-fast">
Hart T E, McKenney P E, Brown A D. Making lockless synchronization fast: Performance implications of memory reclamation[C]//Parallel and Distributed Processing Symposium, 2006. IPDPS 2006. 20th International. IEEE, 2006: 10 pp.&#160;<a href="#fnref-1645-fast">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1645</wp:post_id>
		<wp:post_date><![CDATA[2017-02-22 21:28:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-22 13:28:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hazard-pointer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<category domain="post_tag" nicename="lock-free"><![CDATA[lock free]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5574695317]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1436</wp:comment_id>
			<wp:comment_author><![CDATA[无锁数据结构三:无锁数据结构的两大问题 - Java天堂]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.javatt.com/p/187865</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[47.111.225.203]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-10-09 10:18:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-10-09 02:18:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] http://blog.kongfy.com/2017/02/hazard-pointer/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1665281910.902035;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>并发编程牛刀小试：SeqLock</title>
		<link>http://blog.kongfy.com/2017/04/%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%e7%89%9b%e5%88%80%e5%b0%8f%e8%af%95%ef%bc%9aseqlock/</link>
		<pubDate>Tue, 18 Apr 2017 02:58:11 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1654</guid>
		<description></description>
		<content:encoded><![CDATA[Sequential lock，简称seq lock，是一种有点特殊的“读写锁”，Linux内核从2.6版本开始引入，是一种非常简单轻量保护共享数据读写的方法。

<h2>基本原理</h2>

<hr />

Sequential lock的原理非常简单，其核心就是通过维护一个序号(sequence)来避免读者(Reader)读到错误的数据，而写者(Writer)在加锁和解锁的过程中递增序号，多个写者之间<strong>需要借助于额外的互斥锁</strong>来保证互斥关系。

具体来讲，序号初始化为0，读者和写者的流程如下：

<ul>
<li>写者开始修改临界区中的数据时，首先获取写者间互斥锁，然后递增序号（奇数），开始修改数据，修改数据完成后会再次递增序号（偶数），然后释放写者间互斥锁。</li>
<li>对读者来说，在修改数据的过程中读者可能会读到错误的数据，但读者在读数据前后会分别获取一次序号，对两次获取的序号进行比较，如果不相同则说明在读取过程中有写者进入了临界区，需要重试；如果序号相同但是是奇数，说明读者开始读取到结束读取的这段时间写者占有了临界区，同样也需要重试。</li>
</ul>

[caption id="attachment_1655" align="aligncenter" width="602"]<a href="http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock1.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock1.jpg" alt="SeqLock时序示意" width="602" height="224" class="size-full wp-image-1655" /></a> SeqLock时序示意[/caption]

看个例子就明白了，如上图所示，是不是非常简洁明了。

<!--more-->

<h2>适用场景</h2>

<hr />

明白了seq lock的原理之后再来思考一下这个锁究竟特别在哪里，又适用于什么样的场景。

如果你熟悉并发控制的几种常用机制，你就会发现seq lock实际上是一种乐观并发控制(OCC)，也称为乐观锁。为什么乐观呢？因为像这样不阻塞读者执行，当发生冲突时读者重试的并发控制策略是建立在<strong>冲突发生频率较低</strong>这样的乐观假设之上的，试想如果冲突频率真的很高，势必会造成读者大量的重试，其效率还不如普通的互斥锁来的好。

所以说，seq lock适合于用来保护小的临界区（比较短，避免冲突），且尤其适合读多写少的场景。例如Linux内核中用seq lock来保护64位jiffies的读写，因为在某些体系结构上无法保证64位读写的原子性。

另外从读写锁的角度分析，seq lock中读者不会阻塞写者，也就是说只要没有别的写者，写者可以直接获取seq lock而不需要等待读者，这样的好处在于写者的阻塞很少。但是必须要注意的是，seq lock又不是一种通用的读写锁，正是因为读者不会阻塞写者，所有写者的修改仍会被读者看到（即使会失败重试），所以写者不能有类似于内存释放的操作，否则会导致程序出错。

<h2>正确性</h2>

<hr />

seq lock的正确性很容易理解，不过在多核并发的环境下还是得多说两句。下图所示是一个写者和一个读者的执行流程，如果执行正确不能够出现读出的a和b不等于v1的情况。

[caption id="attachment_1656" align="aligncenter" width="323"]<a href="http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock.png"><img src="http://blog.kongfy.com/wp-content/uploads/2017/04/seqlock.png" alt="SeqLock机器指令" width="323" height="134" class="size-full wp-image-1656" /></a> SeqLock机器指令[/caption]

我们知道，在多核环境中CPU之间由于独立cache的作用，看到的数据并不是实时同步的，（在我<a href="http://blog.kongfy.com/2016/10/cache-coherence-sequential-consistency-and-memory-barrier/" target="_blank">之前的文章</a>中介绍过多核并发编程的一些基本知识，如果感兴趣可以看看），那么这里就会产生一个有趣的问题：会不存在这样一种情况，读者所在的核没有及时看到写者对seq的修改，导致读到了错误的a和b？

当然这种论述是错误的，原因在于，在多核并发编程中，我们并<strong>不能依赖于绝对时间</strong>来分析程序运行，因为多核间数据并不存在绝对时间上的同步，这个问题最后还是要回归到内存模型上。比如说，考虑Sequential Consistency的内存模型上，由于不允许写乱序，所以如果没有读到写者对seq的第一次修改，是不可能读到写者对x和y的修改的，也就是说，虽然读者在绝对时间上发生在写者之后，但在逻辑时间上发生在写者之前。由于这两个过程并没有因果关系，所以在并发过程中这样的顺序是完全正常的。

更进一步分析，seq lock甚至不需要Sequential Consistency这么强的内存模型保证，仅要求不存在Store-Store乱序和Load-Load乱序，x86体系结构保证这一点，所以在x86体系上实现seq lock不需要使用任何内存屏障指令，十分高效。

<h2>实践</h2>

<hr />

纸上得来终觉浅，绝知此事要躬行。C++代码实现seq lock（老样子，只支持x86体系结构）：

<pre class="lang:c++ decode:true " >#ifndef _SEQLOCK_H_
#define _SEQLOCK_H_

#include "lock.h"

class SeqLock
{
public:
  SeqLock(BaseLock &amp;lock) : lock_(lock), seq_(0) {};
  virtual ~SeqLock() {}

  SeqLock(const SeqLock&amp;) = delete;
  SeqLock &amp;operator=(const SeqLock&amp;) = delete;

  int write_lock()
  {
    int ret = lock_.lock();
    seq_++;
    asm volatile("" ::: "memory");
    return ret;
  }

  int write_unlock()
  {
    asm volatile("" ::: "memory");
    seq_++;
    int ret = lock_.unlock();
    return ret;
  }

  uint64_t read_begin()
  {
    uint64_t seq = seq_;
    asm volatile("" ::: "memory");
    return seq;
  }

  bool read_retry(uint64_t seq)
  {
    asm volatile("" ::: "memory");
    if (seq_ != seq) {
      return true;
    }
    return seq &amp; 1;
  }
private:
  BaseLock &amp;lock_;
  uint64_t seq_;
};

#endif /* _SEQLOCK_H_ */</pre>

代码很短，seq lock中包含了一个用来做写者互斥的锁，可以使用<a href="http://blog.kongfy.com/2017/01/%e7%94%a8%e6%88%b7%e6%80%81%e5%90%8c%e6%ad%a5%e4%b9%8b%e8%87%aa%e6%97%8b%e9%94%81/" target="_blank">之前的文章</a>中的描述的任意一种均可。

另外还有一点值得注意的地方是在代码中使用了的几处编译器屏障，这个是在和编译器优化战斗，因为这样的实现编译器优化会将这几个函数做inline处理，而一旦inline之后又会和实际的读写指令做重排。

seq lock如何使用呢？

<pre class="lang:c++ decode:true " >static TiketLock tiket_lock;
static SeqLock seq_lock(tiket_lock);

void writter(void)
{
  seq_lock.write_lock();
  // modify critical region
  seq_lock.write_unlock();
}

void reader(void)
{
  uint64_t seq;

  do {
    seq = seq_lock.read_begin();
    // read critical region
  } while (seq_lock.read_retry(seq));
}
</pre>

是不是非常简单好用，总体来说，对于读多写少的小临界区，seq lock是一个非常实用的编程技术。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1654</wp:post_id>
		<wp:post_date><![CDATA[2017-04-18 10:58:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-18 02:58:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%e7%89%9b%e5%88%80%e5%b0%8f%e8%af%95%ef%bc%9aseqlock]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5735817858]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++实现成员函数检查</title>
		<link>http://blog.kongfy.com/2017/06/c%e5%ae%9e%e7%8e%b0%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0%e6%a3%80%e6%9f%a5/</link>
		<pubDate>Mon, 12 Jun 2017 13:21:13 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1668</guid>
		<description></description>
		<content:encoded><![CDATA[最近看到一段代码，感觉非常trick，但也非常有意思，写出来记录一下。

背景是这样的，有一个模板函数 <span class="lang:default decode:true  crayon-inline " >copy_assign</span> ，其作用非常简单，就是将第二参数“拷贝”给第一个参数，但是为了对能够进行深拷贝的类型进行深拷贝，希望的行为是这样的：

<blockquote>
  如果T有成员函数int assign(const T &amp;)，则调用dest.assign(src)，并以assign函数的返回值作为返回值；
  如果T没有成员函数int assign(const T &amp;)，则调用dest=src，并返回0。
</blockquote>

函数的原型如下：

<pre class="lang:default decode:true " >template &lt;typename T&gt;
inline int copy_assign(T &amp;dest, const T &amp;src);</pre>

并且为了降低运行时开销，我们希望这一切是在编译期确定的，所以我们需要在编译期就能够确定类型T是否有assign成员函数，并且根据结果指定对应的行为。

<!--more-->

<h2>如何判断一个类有没有特定成员函数？</h2>

<hr />

首先要解决的第一个问题是：在模板类的代码部分，我们并不知道类型T是否有我们想要的成员函数，据我所知C++也没有提供这样的机制来判断，那该怎么解决这个问题呢？

我们必须要在编译期利用C++的一些机制让编译器在不报错退出的情况下完成我们的目的，下面定义的模板类就是 <span class="lang:default decode:true  crayon-inline " >__has_assign__</span> 用来做这件事情的：

<pre class="lang:default decode:true   " >template &lt;typename T&gt;
struct __has_assign__
{
    typedef int (T::*Sign)(const T &amp;);
    typedef char yes[1];
    typedef char no[2];
    template &lt;typename U, U&gt;
    struct type_check;
    template &lt;typename _1&gt; static yes &amp;chk(type_check&lt;Sign, &amp;_1::assign&gt; *);
    template &lt;typename&gt; static no &amp;chk(...);
    static bool const value = sizeof(chk&lt;T&gt;(0)) == sizeof(yes);
};</pre>

代码着实有些trick，需要细细品味。这个模板类针对类型参数T的实例化的静态变量value的值，就代表了类型T中是否有我们想要的assign函数。

代码的关键步骤在函数的最后三行，声明了两个模板函数chk，而第二个函数是总是可以匹配上T的，这就利用了C++模板匹配中的一点规则：<strong>当有多个可行的匹配时，编译器总会选择更“紧”的匹配(更特例化)</strong>。那么什么情况下第一个函数声明会是一个匹配呢？答案在于type_check这个模板类，它接受两个相同的类型参数，而传入的第一个是我们想要的assign函数的类型，第二个参数是模板类型参数的成员函数assign（如果有的话），也就是说，如果传入的类型T是一个具有成员函数 <span class="lang:default decode:true    crayon-inline " >int assign(const T &amp;)</span> 的类型，则第一个chk会成为一个更“紧”的匹配被编译器选中，这样静态变量value就会被确定为true，目标达成。

<h2>如何判断变量是不是类的实例？</h2>

<hr />

上面这个函数只能对自定义类型使用，那C++的基本类型怎么办呢？我们当然也需要支持基本类型的拷贝。很简单：

<pre class="lang:default decode:true   " >template &lt;typename T&gt;
struct __has_assign__
{
    static bool const value = false;
};</pre>

直接把value设为false就可以了。

<h2>如何用一个函数同时适用于类和基本类型？</h2>

<hr />

但上面说的这两个模板类明显是冲突的，不能同时使用，那怎么办呢？

我们可以借助C++模板的偏特例化机制，把这两个模板类通过一个bool类型的参数区分开，形成同一个模板类的两种特例化形式：

<pre class="lang:default decode:true   " >template&lt;bool, typename T&gt; struct __has_assign__;

template &lt;typename T&gt;
struct __has_assign__&lt;true, T&gt;
{
    typedef int (T::*Sign)(const T &amp;);
    typedef char yes[1];
    typedef char no[2];
    template &lt;typename U, U&gt;
    struct type_check;
    template &lt;typename _1&gt; static yes &amp;chk(type_check&lt;Sign, &amp;_1::assign&gt; *);
    template &lt;typename&gt; static no &amp;chk(...);
    static bool const value = sizeof(chk&lt;T&gt;(0)) == sizeof(yes);
};

template &lt;typename T&gt;
struct __has_assign__&lt;false, T&gt;
{
    static bool const value = false;
};</pre>

这个模板类怎么用呢？对于一个类型 <span class="lang:default decode:true    crayon-inline " >someClass</span> 来说（可以是基础类型），我们可以通过 <span class="lang:default decode:true    crayon-inline " >__has_assign__&lt;__is_class(someClass), someClass&gt;::value</span> 来判断它有没有我们想要的assign函数。 <span class="lang:default decode:true    crayon-inline " >__is_class</span> 是gcc提供的编译期类型判断原语中的一个，见<a href="https://gcc.gnu.org/onlinedocs/gcc/Type-Traits.html">这里</a>。

<h2>实现copy_assign</h2>

<hr />

有了这个神奇的类，我们终于可以实现文章开头提到的 <span class="lang:default decode:true    crayon-inline " >copy_assign</span> 函数了。可是有一个问题，上面代码最后得到了一个表示有没有assign成员函数的bool类型，但是编译期是没有办法使用bool类型的变量值来改变行为的啊？

<strong>既然变量不行，那就用类型。</strong>

再声明一个模板类，用来把bool类型的变量转变为类型：

<pre class="lang:default decode:true   " >template &lt;bool c&gt;
struct BoolType
{
    static const bool value = c;
};
typedef BoolType&lt;false&gt; FalseType;
typedef BoolType&lt;true&gt; TrueType;</pre>

该模板类只有一个bool类型的非类型模板参数c，用这个模板类，我们可以把一个bool值转化成对应的类型了！有了不同的类型，再结合C++的重载机制，我们就可以在编译期完成这样的工作了：

<pre class="lang:default decode:true   " >template &lt;typename T&gt;
inline int copy_assign_wrap(T &amp;dest, const T &amp;src, TrueType c)
{
    return dest.assign(src);
}

template &lt;typename T&gt;
inline int copy_assign_wrap(T &amp;dest, const T &amp;src, FalseType c)
{
    dest = src;
    return 0;
}

// 此函数用于拷贝赋值
// - 如果T有成员函数int assign(const T &amp;)，则调用dest.assign(src)，
//   并以assign函数的返回值作为返回值；
// - 如果T没有成员函数int assign(const T &amp;)，则调用dest=src，
//   并返回0。
template &lt;typename T&gt;
inline int copy_assign(T &amp;dest, const T &amp;src)
{
    return copy_assign_wrap(dest, src, BoolType&lt;__has_assign__&lt;__is_class(T), T&gt;::value&gt;());
}</pre>

针对最后一个参数的类型不同，编译器会在两个重载的模板函数中选择合适的函数实例化，最后达到了我们的目的。

<h2>感慨一下</h2>

<hr />

我觉得能写出这样C++代码的人，一定是对C++有着非常深入的了解，真的可以说是<strong>精通</strong>C++了。而我等小菜，连读起来都费劲，只能望其项背啊。

据说C++的元编程是完备的，真的是太神奇了！但另一方面，<strong>C++也真的是太难学了！</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1668</wp:post_id>
		<wp:post_date><![CDATA[2017-06-12 21:21:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-12 13:21:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c%e5%ae%9e%e7%8e%b0%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0%e6%a3%80%e6%9f%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c-cpp"><![CDATA[C/C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5903069526]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paxos revisit</title>
		<link>http://blog.kongfy.com/2018/07/paxos-revisit/</link>
		<pubDate>Sat, 28 Jul 2018 07:16:31 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1687</guid>
		<description></description>
		<content:encoded><![CDATA[前一段时间借着组里的实习生学习交流的机会，又重新讨论了一次Paxos算法，颇有收获。本文整理记录几个我个人觉得比较有意义的问题，希望通过思考这几个问题，能够加深你对Paxos算法的理解。

本文假定读者已经对Paxos算法有一定了解（包括原理、正确性证明、执行流程），如果你还不了解Paxos，请移步<a href="http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/" rel="noopener" target="_blank">这里</a>。

<h2>Paxos算法流程</h2>

<hr />

在思考问题之前，首先重温一下Paxos算法的流程，同时统一变量名称，方便后文讨论。

<strong>Prepare阶段：</strong>

<ol>
<li>Proposer选择proposal number n，并向acceptors发送Prepare(n)消息</li>
<li>Acceptor收到Prepare(n)：if n > minProposal then minProposal = n; return (acceptedProposal, acceptedValue)</li>
</ol>

<strong>Accept阶段：</strong>

<ol>
<li>如果Proposer收到了超过多数派acceptors对于Prepare(n)的回复，如果回复中有包含acceptedValue，则选择acceptedProposal值最大的作为value，否则Proposer可以自行选择value</li>
<li>Proposer向所有acceptors发出Accept(n, value)消息</li>
<li>Acceptor收到Accept(n, value)：if n >= minProposal then acceptedProposal = n; acceptedValue = value，并回复AcceptAck(n)</li>
<li>Proposer收到来自多数派acceptors的AcceptAck消息，value已达成决议(chosen)</li>
</ol>

<h2>问题</h2>

<hr />

在上述Paxos算法流程的基础上，仔细思考下面几个问题：

<ol>
<li>为了保证算法在容灾（节点故障重启）场景下的正确性，Acceptor上需要持久化哪些信息？</p></li>
<li><p>如果Acceptor不持久化acceptedProposal，在Prepare阶段的第2步中minProposal代替，有没有问题？</p></li>
<li><p>Accept阶段，Proposer不用n覆盖acceptedProposal，仍将其发送给Acceptor，Acceptor收到Accept(n, acceptedProposal, value)之后使用消息中的acceptedProposal而不是n来作为acceptedProposal，有没有问题？</p></li>
<li><p>在5个节点的情况下，如果修改流程为Proposer要收到4个acceptor对Prepare(n)的回应才可以发送Accept消息，要收到2个acceptor对Accept(n, value)的回应才能确认决议，有没有问题？</p></li>
<li><p>论文中提到Proposer选择proposal number要递增且不重复，这个要求是不是必要的？如果把Prepare阶段第2步中的>改为>=呢？</p></li>
</ol>

<p><strong>WARNING： 强烈建议花一些来仔细思考上面的问题，在得出自己的答案之后再继续往下看</strong>

<!--more-->

</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>

<h2>解</h2>

<hr />

免责声明：我并不能保证这里给出的答案一定是正确的，如果你发现了问题，欢迎一起讨论。

<strong>1. 为了保证算法在容灾（节点故障重启）场景下的正确性，Acceptor上需要持久化哪些信息？</strong>

(minProposal, acceptedProposal, acceptedValue)

<strong>2. 如果Acceptor不持久化acceptedProposal，在Prepare阶段的第2步中minProposal代替，有没有问题？</strong>

有问题，会导致已经形成决议的value被推翻，如下图例：

<a href="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos.png" alt="" width="886" height="330" class="aligncenter size-full wp-image-1690" /></a>

注意在中间过程中blue已经达成了决议，但是后面由于prepare误认为red是之前的决议，而错误的把red重新达成决议。

<strong>3. Accept阶段，Proposer不用n覆盖acceptedProposal，仍将其发送给Acceptor，Acceptor收到Accept(n, acceptedProposal, value)之后使用消息中的acceptedProposal而不是n来作为acceptedProposal，有没有问题？</strong>

有问题，会导致已经形成决议的value被推翻，如下图例：

<a href="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos2.png" alt="" width="1016" height="323" class="aligncenter size-full wp-image-1691" /></a>

同样，在中间过程中red已经达成了决议，但是后面由于prepare误认为blue是之前的决议，而错误的把blue重新达成决议。

仔细分析这个问题，不难联想到Raft的做法：Raft更高Term的Leader会把自己的日志复制给其他人，但并没有修改这些日志的Term值，对比Paxos的做法，这就相当没有修改acceptedProposal。那么Raft算法为什么没有问题呢？因为Raft正确性保证的很重要的一点就是：更高Term的Leader不能按照多数派原则直接提交更低Term的日志，而依赖于后续使一条本Term的日志形成决议一起提交。

<strong>4. 在5个节点的情况下，如果修改流程为Proposer要收到4个acceptor对Prepare(n)的回应才可以发送Accept消息，要收到2个acceptor对Accept(n, value)的回应才能确认决议，有没有问题？</strong>

从正确性来说是没有问题的，因为只要prepare和accept所需的副本个数之和超过总数，就可以保证只要一个值形成了决议，那么Prepare消息的回复中一定包含这个值。

问题在于容错性，Paxos算法保证的是容忍F个节点宕机，需要2F+1个节点。也就是说5节点可以容忍2节点宕机，上面提到的修改显然无法做到。

<strong>5. 论文中提到Proposer选择proposal number要递增且不重复，这个要求是不是必要的？如果把Prepare阶段第2步中的>改为>=呢？</strong>

如果只需要保证协议的正确性，那么递增是不需要的，如果取的proposal number更小，则一定会被拒绝。选择递增只是为了效率的考虑。<del datetime="2019-03-16T01:22:42+00:00">同样，不重复也不是必须的，重复的proposal number在Prepare阶段同样会被拒绝。</del>

<del datetime="2019-03-16T01:22:42+00:00">但是出于实现考量，我们总是希望如果出现网络消息丢失，可以进行重试，也就是说，需要把Prepare阶段的第2步中的>改为>=。这样一来，不重复就是必须的了，如果不同节点选择了相同的proposal number，就可能导致多个Proposer同时在同一个proposal number上发起Accept。</del>

不重复是必要的，否则会出现错误：

<a href="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos3.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos3.png" alt="" width="858" height="320" class="aligncenter size-full wp-image-1770" /></a>

S1宕机恢复后如果重新用相同的proposal number执行Paxos，可能会收到过去的prepare ok消息（没有包含acceptedValue），导致覆盖决议。

一个更直接的反例是Fast Paxos论文中提到的方法，当使用相同的proposal number执行Paxos时，必须修改多数派的数量，才能保证协议的正确性。

<h2>写在最后</h2>

<hr />

理解Paxos算法的关键还是要完全理解论文中的正确性证明，尤其是P1a和P2c两个条件。前者保证了proposal number更小的proposal无法干扰后续的决议，后者保证了已经达成的决议绝对不会被推翻。而前面2、3两个问题讨论的协议修改，就是违背了P2c，所以是不正确的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1687</wp:post_id>
		<wp:post_date><![CDATA[2018-07-28 15:16:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-28 07:16:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[paxos-revisit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="consensus"><![CDATA[consensus]]></category>
		<category domain="post_tag" nicename="paxos"><![CDATA[paxos]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[paper note]Consensus on Transaction Commit</title>
		<link>http://blog.kongfy.com/2018/07/paper-noteconsensus-on-transaction-commit/</link>
		<pubDate>Sat, 28 Jul 2018 09:53:25 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1703</guid>
		<description></description>
		<content:encoded><![CDATA[这篇论文的作者实在太吓人了，Jim Gray和Leslie Lamport，两个领域的扛把子。论文介绍的内容叫Paxos Commit，是用分布式共识算法解决分布式事务的原子提交问题，不愧是这两位大佬写出来的文章哈哈。

PS：这篇文章是我的paper note，主要是帮助自己理解和记忆，与其说是文章，其实更像是简单的笔记。

<h2>解决了什么问题</h2>

<hr />

事务的属性是ACID，A代表原子性，事务要么全部提交，要么全部失败，不能出现提交了一半的情况。单机事务的原子性通过日志系统来保证，而在分布式事务里，通常的做法是两阶段提交（Tow Phase Commit，2PC）。

两阶段提交的一个重要问题是协调者宕机问题，参与者执行完Prepare状态后，参与者处于“未决”状态，意味着参与者自己无法决定事务状态，而如果此时协调者宕机，事务的状态将无法推进下去。

Paxos Commit希望解决这个问题，即在事务提交过程中，能够容忍F个副本失败而不会导致事务无法推进。

另外，论文中还提到了其他尝试解决此问题的方法（三阶段提交），并表示不屑一顾……....（三阶段提交实际上并没有改善提交过程的容灾）

<!--more-->

<h2>Paxos Commit</h2>

<hr />

实际上，分布式事务问题的核心也是一个分布式共识问题，即多个事务参与者要就事务提交还是回滚这个决定上达成共识。Lamport老爷子自然想到了用自己大名鼎鼎的Paxos算法来解决这个问题。

算法的基本思路是<strong>用2F+1个acceptor来替代2PC中单一的协调者节点</strong>，并将原本记录在参与者本地的Prepare/Abort日志改为Paxos的一个instance，记录在acceptor上。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos-commit.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/07/paxos-commit.png" alt="" width="664" height="380" class="aligncenter size-full wp-image-1704" /></a>

Paxos Commit算法还是非常清楚的，但要特别注意一些理解上容易出现的问题：<strong>上图中的Leader并不是Paxos算法中的leader</strong>（Paxos本身不需要leader，用来避免live lock），而是专门负责推动事务状态的一个角色。

当事务提交发起时，Leader会向所有参与者（RM）发起事务的Prepare请求（区别于Paxos的prepare），参与者收到请求后，根据本地情况决定Prepare还是Abort，并将该决定通过Paxos的accept消息发送给acceptors。这一步中省略了Paxos算法的prepare步骤，而是<strong>直接使用proposal number 0发送accept消息</strong>，本质上执行完整的Paxos是没有任何问题的，这样做是为了让整体的事务提交时延和2PC保持一致。

acceptor将Paxos的acceptAck消息直接返回给事务的Leader（为了优化消息数，没有回复参与者），当Leader得知所有的参与者对应的Paxos instance都就Prepare达成一致后，向参与者发出Commit请求。

考虑异常情况，Paxos保证在2F+1个acceptors可以容忍F个acceptor宕机；而如果参与者在没有把状态“写”到对应的Paxos instance里之前宕机，则Leader在达到事务超时后会使用<strong>更大的proposal number</strong>在这些Paxos instance上执行标准Paxos算法，并以Abort作为value，达到事务回滚的目的；由于事务的状态完全存储在acceptor上，Leader并不保存任何状态，因此Leader宕机可以重新选一个即可。

<h2>和2PC比较</h2>

<hr />

Paxos算法在本质上和2PC的思想是一样的，只是有一些设计上的区别。

2PC的协调者在收到所有参与者的Prepare回复后要写Commit日志，而Paxos Commit没有。在2PC中，即使所有参与者都回复Prepare，协调者依然可以选择Abort，然而Paxos Commit中事务的状态只取决于参与者的状态。但是实际上，如果所有参与者都Prepare，协调者没有理由选择Abort，协调者写日志的主要原因还是出于容灾考虑（参与者宕机，请自行思考），而在Paxos Commit中，参与者的状态是由多个acceptors共同保存的，并不需要担心参与者宕机。

另外就是2PC的参与者将Prepare/Abort的决定写在本地，而Paxos Commit则是由多个acceptors共同保存的，实际上，如果F=0（没有acceptor，参与者日志仍然写在本地），则Paxos Commit算法就会退化成协调者不写日志的2PC：

<a href="http://blog.kongfy.com/wp-content/uploads/2018/07/2pc-paxos-commit.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/07/2pc-paxos-commit.png" alt="" width="522" height="184" class="aligncenter size-full wp-image-1705" /></a>

<h2>一点想法</h2>

<hr />

当前业界分布式事务所使用的方案，大多是使用Paxos来实现协调者的高可用副本，属于2PC+Paxos的组合方案，对比Paxos Commit，前者在逻辑分层上更为清晰，后者实际上打破了事务和日志的边界，做了很多前者无法做的优化。

在系统设计中常常会有这样的trade off，分层清晰的方案复杂度低，开发难度低，从设计上来说更为优雅，但融合的方案可以利用到很多分层结构无法使用的信息，难分高下。

<h2>参考文献</h2>

<hr />

[1] Gray J, Lamport L. Consensus on transaction commit[J]. ACM Transactions on Database Systems (TODS), 2006, 31(1): 133-160.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1703</wp:post_id>
		<wp:post_date><![CDATA[2018-07-28 17:53:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-28 09:53:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[paper-noteconsensus-on-transaction-commit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="paxos"><![CDATA[paxos]]></category>
		<category domain="category" nicename="%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[关系型数据库]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[paper note]Megastore &amp; PaxosStore</title>
		<link>http://blog.kongfy.com/2018/08/megastore-paxosstore/</link>
		<pubDate>Mon, 20 Aug 2018 11:17:02 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1713</guid>
		<description></description>
		<content:encoded><![CDATA[之前对分布式KV存储关注不多，最近抽时间看了一下Google的Megastore和Wechat的PaxosStore的论文，发现其中很多设计考量的角度都很有趣，值得仔细思考。

<h2>Megastore</h2>

<hr />

Megastore相对来说是一个比较老的系统了，是在Spanner大规模运用之前构建在Bigtable之上，支持跨行事务的一套过渡解决方案。

<h3>结构</h3>

整体上来看，Megastore把和root table中某个root entity相关的所有child table中的行组成一个entity group，并以此作为多副本同步的基本单元。在设计上通过切分entity group，将绝大部分访问限制在entity group内部获得了扩展性的提高，再通过Paxos对entity group做多副本，获得了可用性的提高。

[caption id="attachment_1714" align="aligncenter" width="467"]<a href="http://blog.kongfy.com/wp-content/uploads/2018/08/megastore.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/08/megastore.png" alt="" width="467" height="334" class="size-full wp-image-1714" /></a> Megastore的多副本结构[/caption]

<!--more-->

<h3>并发控制</h3>

在事务的并发控制方面，Megastore可以说是比较粗暴的，以entity group为粒度，整个entity group内的事务是完全串行执行的（当然，实现了Serializable隔离级别），读写事务之间是以写在root entity上的log position做为互斥的，同时开启的事务只有一个能够成功写日志到最新的log postition上，其余事务都会失败。这个最新的log position就可以理解为整个entity group的写锁。

对于跨entity group的事务，需要使用两阶段提交，但由于entity group的粒度还是太小了，很容易导致参与者数量过多，并且每个entity group内部使用的都是first-commiter-win的乐观并发控制机制，跨entity group的事务在冲突比较高的场景下极有可能回滚，因此也不推荐使用。

<h3>高可用</h3>

Megastore的多副本实现是我个人认为最有趣的部分。

首先，Megastore使用了一种可以认为是“简化”的Multi-Paxos实现。在Megastore中，每个log entry都是Basic Paxos，并且在value中额外写入了proposer的信息（比如ip），log entry N-1上决定的value中的proposer被允许在log entry N上跳过prepare阶段，直接使用0作为proposal number来执行accept请求。这个被称为“Fast Write”的优化在无冲突写入的情况下，可以让同一个proposer可以对一连串的log entry省略prepare阶段的开销。这个算法的前提是log必须连续确认，结合上面entity group的并发控制（完全串行）来看这并不是一个问题。

另外，Megastore特别强调使用了非"Master-Based"的方法，以避免当Master宕机后由于lease没有过期导致的服务中断。这一点我个人觉得是设计上的取舍不同，Paxos算法本身并不需要"Master"，也不需要lease，之所以引入lease其实是RSM（复制状态机）上读取请求的一致性需求，试想在RSM上如何确保读请求能够读到最新的数据？lease就是为了给leader提供了这样的保证，让leader可以在lease过期前直接服务读请求，或者像Raft一样为读请求写日志。Megastore的做法也并不神奇，为了不引入lease的问题，Megastore必须时刻知道哪些副本上的数据是最新可读的，因此要求写事务在正常情况下都要等到所有副本日志都同步成功才能提交，或者，将未完成同步的副本状态更新到“coordinator”上，来“赶走”读请求。

[caption id="attachment_1715" align="aligncenter" width="452"]<a href="http://blog.kongfy.com/wp-content/uploads/2018/08/megastore-write.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/08/megastore-write.png" alt="" width="452" height="325" class="size-full wp-image-1715" /></a> Megastore的写路径较长[/caption]

不难看出，这样的方法并不能说完美，在跨城市的部署情况下等待所有副本同步完成时延较高，并且还引入了coordinator节点的可用性问题。难怪Spanner论文中提到Megastore的写入性能较差。

<h3>和Percolator有什么不同？</h3>

Google还有另一篇介绍如何Bigtable上解决了多行事务的论文，叫做Percolator，不过，两者面对的场景不同，所以方案有很大不同。

Percolator并不解决可用性问题，提出了一种利用单行事务来实现多行事务的方法，其基本思路还是在多行上做两阶段提交。Megastore面对的是OLTP场景，行之间的两阶段提交显得太过昂贵了，因此首先将行partition到entity group粒度，减少两阶段提交的使用，然后再解决entity group的可用性问题。

<h2>PaxosStore</h2>

<hr />

PaxosStore是WeChat的分布式KV存储，论文中提到其设计受了Megastore设计比较大的影响，整体看下来也确实如此。

PaxosStore中的Paxos实现和Megastore如出一辙，同样使用了"Fast Write"的方法，日志格式如下图，每个Entry都是一个Basic-Paxos，决议中的Proposer ID可以跳过下一个PaxosLog的prepare阶段。

[caption id="attachment_1716" align="aligncenter" width="448"]<a href="http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-paxos.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-paxos.png" alt="" width="448" height="243" class="size-full wp-image-1716" /></a> PaxosLog[/caption]

并且PaxosStore也采用了非"Master-Based"的方法，和Megastore不同的是，为了避免coordinator的可用性问题，PaxosStore选择让读请求询问所有副本来确定本地数据是可读的（论文后面提到一些优化，但原理还是一样的）。

[caption id="attachment_1717" align="aligncenter" width="482"]<a href="http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-read.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-read.png" alt="" width="482" height="250" class="size-full wp-image-1717" /></a> 读操作需要读多个副本[/caption]

另外，因为是单纯的KV实现，没有多行事务的需求，实际上PaxosStore中并发控制的粒度更小，仅仅是一个value的修改，实际上这样的需求根本不需要记redo log（回顾数据库中为什么需要log来保证原子性，是因为多个page的修改没有办法保证原子的刷盘，Megastore中是因为Bigtable无法保证entity group中的多行修改是原子的），因此PaxosStore中的PaxosLog实际上是一种修改历史，既然是历史，那么回收策略也就更加简单了（相比于数据库的checkpoint），想保留几个版本都可以，论文中提到仅留了两个PaxosLog，一个是最新数据，一个是正在进行的修改。为了减少IO，数据存储干脆直接引用最新的PaxosLog中的value，也是一种特别的优化。

[caption id="attachment_1718" align="aligncenter" width="468"]<a href="http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-log.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/08/paxosstore-log.png" alt="" width="468" height="354" class="size-full wp-image-1718" /></a> 减少一次I/O[/caption]

<h2>参考资料</h2>

<hr />

[1] Baker J, Bond C, Corbett J C, et al. Megastore: Providing scalable, highly available storage for interactive services[C]//CIDR. 2011, 11: 223-234.

[2] Zheng J, Lin Q, Xu J, et al. PaxosStore: high-availability storage made practical in WeChat[J]. Proceedings of the VLDB Endowment, 2017, 10(12): 1730-1741.

[3] Peng D, Dabek F. Large-scale Incremental Processing Using Distributed Transactions and Notifications[C]//OSDI. 2010, 10: 1-15.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1713</wp:post_id>
		<wp:post_date><![CDATA[2018-08-20 19:17:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-20 11:17:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[megastore-paxosstore]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="paxos"><![CDATA[paxos]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paxos与“幽灵复现”</title>
		<link>http://blog.kongfy.com/2018/09/paxos_ghost_log/</link>
		<pubDate>Sun, 23 Sep 2018 03:39:15 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1724</guid>
		<description></description>
		<content:encoded><![CDATA[Paxos被公认是难度很高的分布式共识算法，一方面是体现在理解其算法正确性的难度上，而另一方，体现在工程实现的复杂度上。在将Paxos算法运用在工程实践的过程会遇到各种各样的问题，本文要探讨的“幽灵复现”问题，就是其中一例。

<h2>什么是“幽灵复现”</h2>

<hr />

据我所知，所谓的“幽灵复现”问题是Oceanbase团队在实现Multi-Paxos过程中自己提出的，并随着郁白的一篇知名博文的传播被大家所知晓。这里先简单介绍一下问题场景：

使用有Leader lease（避免活锁，leader读写提供线性一致性）的Multi-Paxos来实现复制状态机，刚开始A是Leader，客户端执行操作写1-10号日志，1-5号日志形成多数派，但是6-10号日志没有同步到其他副本，客户端超时。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/09/1.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/09/1.png" alt="" width="617" height="249" class="aligncenter size-full wp-image-1725" /></a>

之后A宕机，B成为新的Leader，由于联系不到A，B和C作为多数派从6号日志开始工作，此时查询不到先前客户端在A上写的结果（6-10号日志没有同步成功）。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/09/2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/09/2.png" alt="" width="595" height="178" class="aligncenter size-full wp-image-1726" /></a>

最后A再次成为Leader，并成功把之前的6-10号日志同步到多数派，此时再查询，就可以查询到之前客户端写入的结果了。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/09/3.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/09/3.png" alt="" width="614" height="245" class="aligncenter size-full wp-image-1727" /></a>

<!--more-->

<h2>问题出在哪？</h2>

<hr />

“幽灵复现”这个现象在工程实践中毫无疑问是一个需要注意的问题，但我认为这个问题并不是分布式共识（Consensus）本身的问题，而是上层逻辑导致的一致性（Consistency）问题。

让我们重温Paxos算法的正确性条件：

<ul>
<li>只有被提出（propose）的值才可能被最终选定（chosen）</li>
<li>只有<strong>一个</strong>值会被选定（chosen）</li>
<li>进程只会获知到已经确认被选定（chosen）的值</li>
</ul>

在前面描述的问题场景中，虽然存在“幽灵复现”的Paxos instance，但实际上这些instance在“复现”之前从来没有达成共识（chosen），也就是说，不论查询这些日志是“消失”还是“复现”，都没有违背分布式共识算法的safety属性。

那么是复制状态机的问题么？也不是。按照上例分析并发操作的一致性表现：刚开始客户端在A上写操作w1超时，但并没有返回客户端执行成功，之后在B上执行读操作r2看不到w1的执行结果，说明r2的生效时间排在了w1前面，最后在A上发起的读操作r3看到了w1的执行结果，说明r3的生效时间在w1之后，这并没有违背线性一致性的要求。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/09/5.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/09/5.png" alt="" width="383" height="230" class="aligncenter size-full wp-image-1728" /></a>

“幽灵复现”其实是在使用Multi-Paxos来同步数据库redo log的场景下产生的问题，郁白的文章中没有介绍全部的背景，所以让读者有些难以理解了。Oceanbase是一个关系型数据库系统，使用Multi-Paxos来同步数据库的redo log，使用的是WAL（Write Ahead Logging），即保证在持久化数据修改前，对应的redo log要先持久化完成。

基于关系数据库的场景，我们重新解释前面的例子。

刚开始A是Leader，客户端发起事务trx1，先显式对数据x加锁（for update）并收到数据库响应成功，再修改数据x为1，但在redo log同步到多数派之前宕机。之后B当选为Leader，客户端发起事务trx2查询x（for update），读出x为0（意味着没有读到行锁），因此客户端认为trx1的结果是失败回滚。最后A再次成为Leader并完成redo log的同步，此时再客户端发起事务trx3查询x，读出x为1，trx1的结果又变成了成功提交。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/09/6.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/09/6.png" alt="" width="497" height="142" class="aligncenter size-full wp-image-1729" /></a>

显然，这个执行结果违背了线性一致性的要求，并且这样的行为会导致数据库非常难以使用。

所以，问题的原因在于关系型数据库redo log的同步模式和复制状态机的日志同步模式是不同的，复制状态机在日志同步成功后才会应用日志修改状态机，这样保证了<strong>切主后状态机一定不会回退</strong>。但关系型数据库的WAL实际上是先修改“状态”后持久化redo log的，所以才导致切主后行锁丢失，引发了问题。

<h2>交错Leader</h2>

<hr />

文章开头的例子和郁白原文中例子略有不同，原文中在B成为新的Leader后重写了6号和20号日志，A再次成为Leader后同步了7-10号日志，这个实际上是被我们称为“交错Leader”的问题，即虽然每个Paxos instance都没有违背共识，但在数据库场景中使用redo log的上层逻辑来看，日志却变成了没有意义的：如果1-10号日志是同一个事务的日志，达成共识的日志序列中6号日志却被修改了。

<a href="http://blog.kongfy.com/wp-content/uploads/2018/09/4.png"><img src="http://blog.kongfy.com/wp-content/uploads/2018/09/4.png" alt="" width="616" height="336" class="aligncenter size-full wp-image-1730" /></a>

“交错Leader”和“幽灵复现”问题都可以通过提高EpochId，写StartWorking日志过滤的方法解决。

<h2>参考资料</h2>

<hr />

<ul>
<li>《架构师需要了解的Paxos原理、历程及实战》 李凯</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1724</wp:post_id>
		<wp:post_date><![CDATA[2018-09-23 11:39:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 03:39:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[paxos_ghost_log]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="oceanbase"><![CDATA[Oceanbase]]></category>
		<category domain="post_tag" nicename="paxos"><![CDATA[paxos]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[paxos_ghost_log__trashed]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>可串行化（Serializable）：理想和现实</title>
		<link>http://blog.kongfy.com/2019/03/serializable/</link>
		<pubDate>Mon, 11 Mar 2019 13:42:17 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1743</guid>
		<description></description>
		<content:encoded><![CDATA[[mathjax][/mathjax]

但凡是接触过数据库的同学一定不会对事务（transaction）的概念感到陌生，我第一次接触事务的概念还是在本科的数据库课本上，了解了事务并发控制概念，但在之后多年不严肃的前后台开发经历中，我几乎从来没有考虑过数据库的“隔离级别”，这让我产生了一种”数据库如此好用，世界如此美好“的幻觉...直到现在从事了数据库内核的开发工作，才对事务的并发控制有了一点点认真的理解。

这篇文章即是我对事务并发控制的一些粗浅的理解。

<h2>事务并发执行的正确性</h2>

<hr />

一般来说，教科书中都是类似的描述事务：”数据库并发控制的基本单元“，事务管理器和执行引擎需要和<strong>并发控制</strong>协作，来保证数据库中事务的执行是”正确“的。<strong>数据库中事务并发控制的正确性，也就是我们常说的Isolation</strong>。

PS：并发事务的正确性除了我们最常讨论的Isolation之外还有Consistency和Recoverable，限于篇幅，本文仅讨论Isolation。

<!--more-->

<h3>串行调度</h3>

最容易理解的正确性保证就是串行调度（serial schedule），即不允许事务并发，所有事务排队，一个接着一个串行执行，其正确性是显然的，同时，执行效率低也是显然的。

<h3>可串行化调度</h3>

为了提高数据库的执行效率，显然我们需要并发的执行各个事务，如果存在调度S，对于数据库的任何状态，其执行结果完全等价于另一个串行调度S'，称这样的调度S为可串行化调度（serializable schedule）。

对比串行调度，等价的可串行化调度可就多的多了，并发度大幅提升，但我们又该如何实现并发控制才能校验出一个调度是可串行化的？总不能先按串行调度执行，再对比结果吧？

我们需要一个更加易于验证的条件，并且保证满足这个条件的调度是一定是可串行化的。

<h3>冲突可串行化调度</h3>

冲突可串行化（conflict serializable）就是这样的条件，按照两个不同的事务对数据库中的同一元素（需要特别注意，这里的元素不等同于一行数据，可能为一个条件范围，也可能是一张表）的操作组合，定义出三种冲突（conflict）:

<ul>
<li>Read-Write conflict</li>
<li>Write-Read conflict</li>
<li>Write-Write conflict</li>
</ul>

所谓冲突，指的是调度中的一对动作，满足：<strong>如果它们的顺序交换，则涉及到的事务中至少有一个的行为会改变</strong>。如果调度S通过交换调度中的非冲突动作可以变换为串行调度，这样的调度S称为冲突可串行化调度（conflict serializable schedule）。

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/schedules.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/schedules.png" alt="" width="428" height="308" class="aligncenter size-full wp-image-1745" /></a>

冲突可串行化调度是可串行化调度的子集，它的意义在于相对于可串行化，冲突可串行化是一个更加容易验证的条件，因此更加适合作为事务并发控制的实现依据。事实上，现在隔离级别中常说的可串行化（serializable），其实是就是指冲突可串行化（conflict serializable）。

<h3>实现无关</h3>

按照一般教科书的套路，写到这里接着的，一定是优先图和Strict 2PL这些用来验证冲突可串行化的实现方案，这里我就偷懒不写了:-)

我想要强调的是一个非常非常非常容易被误解的点：<strong>调度中的冲突不是用来解决的，并不是说这三个操作是冲突的，我们就不能允许冲突的事务并发发生！</strong>我们要做到的，只是要求这些有冲突的并发事务按照冲突关系不组成环即可。

因为在数据库发展的早期阶段，大部分的数据库实现都依赖于锁，在锁的实现上，为了达到上述要求，会拒绝冲突的事务并发执行，这样的思维根深蒂固，导致我们非常容易陷入这样的陷阱。

举个简单的例子：

&#92;(H_{serializable}:\text{W1[A]W2[A]W3[A]W1[B]W2[B]W3[B]W1[C]W2[C]W3[C] c2 c1 c3}​&#92;)

上面的历史中，三个事务对三个数据元素的写操作都是并发发生的，但是显然这个历史是可串行化的，其结果等价于T1T2T3串行执行。可以看到，<strong>冲突可串行化的定义是完全实现无关的，是非常准确和理想的定义</strong>。

<h2>向性能低头</h2>

<hr />

可串行化固然会让用户感到安心，但是由于可串行化调度的验证方式往往伴随着大量的阻塞等待（比如2PL），难以达到很高的事务并发执行性能，为了提供更好的并发执行性能，数据库不得不放宽调度的验证，允许更多非可串行化的调度被执行。

显然，多个并发的事务执行结果可能会不再等价于任何一种串行执行的结果，也就是说，事务不再是“隔离”的，事务之间相互产生了影响，导致结果出现了错误。

没错，从隔离的角度来看，这样的事务并发执行结果就是错误的，但却是为了提高性能不得不付出的代价。为了规范用户使用，数据库需要给用户做出保证：什么样的错误会发生，而什么样的错误不会发生，这些不同的保证，就是数据库的隔离级别。

PS：隔离级别和分布式系统中的Consistency类似，都是一种向性能的妥协。Linearizability虽好，可性能代价太高，才产生了种种正确性保证更弱，但并发执行性能更好的Consistency定义。

<h2>隔离级别</h2>

<hr />

隔离级别的含义极其混乱，这得从隔离级别的发展讲起。

<h3>ANSI隔离级别</h3>

ANSI SQL-92标准中基于事务并发执行过程中可能出现的三种导致数据错误的现象（Phenomena）定义了一套隔离级别<sup id="fnref-1743-sql92"><a href="#fn-1743-sql92" class="jetpack-footnote">1</a></sup>：

<blockquote>
  1) P1 ("Dirty read"): SQL-transaction T1 modifies a row. SQL-
     transaction T2 then reads that row before T1 performs a COMMIT.
     If T1 then performs a ROLLBACK, T2 will have read a row that was
     never committed and that may thus be considered to have never
     existed.
  
  2) P2 ("Non-repeatable read"): SQL-transaction T1 reads a row. SQL-
     transaction T2 then modifies or deletes that row and performs
     a COMMIT. If T1 then attempts to reread the row, it may receive
     the modified value or discover that the row has been deleted.
  
  3) P3 ("Phantom"): SQL-transaction T1 reads the set of rows N
     that satisfy some <search condition>. SQL-transaction T2 then
     executes SQL-statements that generate one or more rows that
     satisfy the <search condition> used by SQL-transaction T1. If
     SQL-transaction T1 then repeats the initial read with the same
     <search condition>, it obtains a different collection of rows.
</blockquote>

标准中按照这三种现象的容忍程度不同，定义出了4个不同的隔离级别，其中P1、P2、P3都不能出现的隔离级别即为最高的隔离级别Serializable：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/ansi.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/ansi.png" alt="" width="1632" height="390" class="aligncenter size-full wp-image-1747" /></a>

ANSI隔离级别试图定义出一套实现无关的隔离级别，但这个尝试失败了，这一次失败的尝试，可以说是业界隔离级别实现的混乱之源...

<h3>A Critique of ANSI SQL Isolation Levels</h3>

95年的这篇论文<sup id="fnref-1743-berenson"><a href="#fn-1743-berenson" class="jetpack-footnote">2</a></sup>指出了ANSI隔离级别的问题，首先，是用英文文字描述隔离级别的不严谨，容易产生歧义，按照ANSI文档描述，将P1、P2、P3描述为异常（anomaly）：

<strong>A1</strong>: w1[x]...r2[x]...(a1 and c2 in either order)    <strong>(Dirty Read)</strong>
<strong>A2</strong>: r1[x]...w2[x]...c2...r1[x]...c1    <strong>(Fuzzy or Non-Repeatable Read)</strong>
<strong>A3</strong>: r1[P]...w2[y in P]...c2....r1[P]...c1    <strong>(Phantom)</strong>

接着指出这样的描述太过于狭义，不能表达ANSI隔离级别想要实现的本意，即使排除了全部三个现象（Phenomena），仍然有可能出现其他的数据错误，并不能达到Serializable。因此拓展出广义的定义：

<strong>P0</strong>: w1[x]...w2[x]...(c1 or a1)    <strong>(Dirty Write)</strong>
<strong>P1</strong>: w1[x]...r2[x]...(c1 or a1)    <strong>(Dirty Read)</strong>
<strong>P2</strong>: r1[x]...w2[x]...(c1 or a1)    <strong>(Fuzzy or Non-Repeatable Read)</strong>
<strong>P3</strong>: r1[P]...w2[y in P]...(c1 or a1)    <strong>(Phantom)</strong>

并且用广义的定义重新描述了ANSI隔离级别：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_ext.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_ext.png" alt="" width="1592" height="380" class="aligncenter size-full wp-image-1750" /></a>

然后指出了ANSI隔离级别最大的问题：<strong>基于这4个现象定义的隔离级别和锁实现的隔离级别完全等价！</strong>也就是说，<strong>ANSI隔离级别仅仅考虑了2PL实现中可能会出现的现象（Phenomena），因此定义出的隔离级别并不能做到实现无关</strong>。为了定义出更加全面的隔离级别，论文对ANSI隔离级别做出补充，分析并增加了两种锁实现中的可能异常（P4C和P4）和两种多版本并发控制实现中可能出现的异常（A5A和A5B），最后将所有这些异常组合在一起，定义出了新的隔离级别标准：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/berenson.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/berenson.png" alt="" width="2000" height="852" class="aligncenter size-full wp-image-1808" /></a>

这篇论文已经很好的指出了ANSI隔离级别存在的问题：<strong>没有做到实现无关</strong>，然而确没有很好的解决这个问题。虽然通过广义的定义消除了歧义，并且考虑了多版本实现的异常，<strong>但是排除掉这些依据特定实现定义的异常对于其他实现来说限制“过于严格”，会同时排除很多并发度更好的调度</strong>。

<h3>Generalized Isolation Level Definitions</h3>

到了2000年，Ayda终结了隔离级别的讨论，提出了完全实现无关的隔离级别定义<sup id="fnref-1743-adya"><a href="#fn-1743-adya" class="jetpack-footnote">3</a></sup>。

这篇论文“重新定义”了ANSI隔离级别，但是和上面提到的论文不同，Ayda没有继续走老路，去分析并发执行的事务产生的异常，而是回归到了事务的本质，通过事务之间的依赖关系，来定义完全实现无关的隔离级别。

论文的核心在于观察事务之间的依赖关系，将其归纳为三种：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/depend.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/depend.png" alt="" width="1574" height="434" class="aligncenter size-full wp-image-1752" /></a>

如果一个调度中事务间的依赖关系没有形成环，则为Serializable。论文据此重新揣度了ANSI隔离级别想要做到的目的，用事务间依赖的方法重新描述了ANSI隔离级别：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_adya.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/ansi_adya.png" alt="" width="1604" height="422" class="aligncenter size-full wp-image-1753" /></a>

新的定义相比于berenson广义的定义，在排除了不合法的调度的同时做到了实现无关。比如拿PL-1来举例，其对应于Dirty Write，在使用锁的实现中，事务的写操作要加写锁，则必然保证了事务之间的写写冲突是无环的，但是反之并不成立：写写冲突不成环并不要求事务修改元素后之后（提交前）不能允许其他事务再次修改元素。

&#92;(H_{serializable}:\text{W1[A]W2[A]W3[A]W1[B]W2[B]W3[B]W1[C]W2[C]W3[C] c2 c1 c3}&#92;)

再翻出上面提到过的例子，如果排除掉P0，则这样的调度是不允许的，但是PL-1则允许，可见PL-1的定义更加准确。

在Ayda的博士论文<sup id="fnref-1743-adya_ext"><a href="#fn-1743-adya_ext" class="jetpack-footnote">4</a></sup>中，更是用事务依赖关系的理论完整的描述了各类隔离级别：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/adya.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/adya.png" alt="" width="1384" height="1178" class="aligncenter size-full wp-image-1754" /></a>

<h2>事实标准</h2>

<hr />

正如上文看到的，从事务隔离到隔离级别，学术界经过了数十年的讨论，终于找到了一个如何描述事务隔离性的满意答案。但是，工业界真正实现的数据库，却是另外一幅景象...

由于真正实现无关的隔离级别标准常年缺席，ANSI隔离级别定义又模糊不清，各个数据库对隔离级别的实现真是五花八门，乱七八糟...

正如Peter Bailis<sup id="fnref-1743-peter"><a href="#fn-1743-peter" class="jetpack-footnote">5</a></sup>所说，现实中的数据库系统没有几个实现了真正的Serializable，即使他们做了这样的保证：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/03/peter_balis.png"><img src="http://blog.kongfy.com/wp-content/uploads/2019/03/peter_balis.png" alt="" width="1208" height="1362" class="aligncenter size-full wp-image-1755" /></a>

<h3>Oracle</h3>

就拿大厂Oracle来说，在隔离级别的实现上也并没有多讲究。Oracle 11g提供的两种隔离级别：Read Commited和Serializable。然而，最高的”Serializable“隔离级别并不是真正的可串行化调度（Serializable），而是Snapshot Isolation。

也就是说，即使用户设置到所谓的"Serializable"隔离级别，仍然可能发生Write skew异常。你可能会好奇，是什么给了Oracle勇气，把这样的实现称之为“Serializable”？答案就是SQL92标准制定的ANSI隔离级别，Snapshot Isolation排除了A1，A2，A3三种异常。

<h3>MySQL</h3>

再说说另一个我们比较熟悉的数据库MySQL（innodb引擎），实现的更是混乱…MySQL提供了4个隔离级别，由低到高依次是：Read Uncommited、Read Commited、Repeatable Read以及Serializable。

好的一点是MySQL的Serializable使用的是strict-2PL的实现，确实做到了名副其实的Serializable。但是Repeatable Read的行为就让人完全摸不到头脑了。

例如这个测试<sup id="fnref-1743-hermitage"><a href="#fn-1743-hermitage" class="jetpack-footnote">6</a></sup>中提到的，在初始状态如下的数据库中：

<pre class="lang:mysql decode:true " >create table test (id int primary key, value int) engine=innodb;
insert into test (id, value) values (1, 10), (2, 20);</pre>

会有Lost update：

<pre class="lang:mysql decode:true " >set session transaction isolation level repeatable read; begin; -- T1
set session transaction isolation level repeatable read; begin; -- T2
select * from test where id = 1; -- T1
select * from test where id = 1; -- T2
update test set value = 11 where id = 1; -- T1
update test set value = 11 where id = 1; -- T2, BLOCKS
commit; -- T1
commit; -- T2</pre>

会有Read skew：

<pre class="lang:mysql decode:true " >set session transaction isolation level repeatable read; begin; -- T1
set session transaction isolation level repeatable read; begin; -- T2
select * from test where id = 1; -- T1. Shows 1 =&gt; 10
select * from test; -- T2
update test set value = 12 where id = 1; -- T2
update test set value = 18 where id = 2; -- T2
commit; -- T2
delete from test where value = 20; -- T1. Doesn't delete anything
select * from test where id = 2;   -- T1. Shows 2 =&gt; 20
commit; -- T1</pre>

会有Write skew：

<pre class="lang:mysql decode:true " >set session transaction isolation level repeatable read; begin; -- T1
set session transaction isolation level repeatable read; begin; -- T2
select * from test where id in (1,2); -- T1
select * from test where id in (1,2); -- T2
update test set value = 11 where id = 1; -- T1
update test set value = 21 where id = 2; -- T2
commit; -- T1
commit; -- T2</pre>

这是哪门子的Repeatable Read？这还是SQL92标准中的ANSI隔离级别定义搞的鬼，虽然有上面种种异常，但是却排除了SQL-92标准中文字描述版的P1和P2（注意，这里连A1和A2都不是），所以说是Repeatable Read。倒也心安理得了。

要想理解MySQL的行为，就必须了解内部对事务操作的实现。MySQL中的并发控制混合使用了MVCC和锁的方式，在Repeatable Read隔离级别下，只在每个事务开始时获取一次快照，之后的读语句都使用这个快照来做读取，但是写语句和加锁的读语句又不使用这个快照，而是用锁的方式用最新的快照操作的，所以产生了各种奇葩行为。

<h3>如何生存？</h3>

现实中隔离级别的实现如此混乱，导致数据库的用户完全没有办法按照一个通用的标准来确定自己的事务行为是否安全，而必须按照底层数据库的实现行为作为判断依据。

从数据库行业来看，这实在让人心痛，但是从数据库厂商的角度来看，这又何尝不是一种壁垒？而且是一种非常好用的护城河，来防止用户的流失。

<h2>WTF，我只想存个数据</h2>

<hr />

如此复杂的隔离级别，足以让任何想要”简单写入一条记录“的程序员头大了，也难怪为什么NoSQL会大行其道。然而在现在的背景下再看，实际上抛弃Serializable的风险是巨大的，Google的研究方向（Percolator、Megastore以及Spanner）也证明了Infra的发展方向仍然是提供”正确“的基础设施，对数据库而言，Serializable就是”正确“的最高标准（有关外部一致性的话题留待之后再写）。

那性能该怎么办呢？

作为一个Infra的从业者，我很崇尚Spanner的做法：直接向上层应用提供最高的正确性保证，运用各种硬件、软件技术提高性能和横向拓展能力，达到上层应用的性能要求。但是用户需求毕竟是不同的，也不是所有用户都像Google一样，有用不完的机器资源，所以现阶段来看，上层应用仍然需要了解这些混乱的规则。

自动驾驶一定是未来，但现在我们还是一样要考驾照的。

<strong>Update:</strong>数据库是否一定要实现Serializable呢？Oracle为什么不实现真正的Serializable？一个可能的原因是用户的实际需求并不大。首先是出现异常的概率比较低，另一点是因为真正对数据异常敏感的用户也并不会完全依赖数据库的隔离性，上层会有多套的数据正确性验证。

<h2>参考资料</h2>

<div class="footnotes">
<hr />
<ol>

<li id="fn-1743-sql92">
SQL92&#160;<a href="#fnref-1743-sql92">&#8617;</a>
</li>

<li id="fn-1743-berenson">
Berenson H, Bernstein P, Gray J, et al. A critique of ANSI SQL isolation levels[C]//ACM SIGMOD Record. ACM, 1995, 24(2): 1-10.&#160;<a href="#fnref-1743-berenson">&#8617;</a>
</li>

<li id="fn-1743-adya">
Adya A, Liskov B, O'Neil P. Generalized isolation level definitions[C]//Proceedings of 16th International Conference on Data Engineering (Cat. No. 00CB37073). IEEE, 2000: 67-78.&#160;<a href="#fnref-1743-adya">&#8617;</a>
</li>

<li id="fn-1743-adya_ext">
Adya A. Weak consistency: a generalized theory and optimistic implementations for distributed transactions[J]. 1999.&#160;<a href="#fnref-1743-adya_ext">&#8617;</a>
</li>

<li id="fn-1743-peter">
<a href="http://www.bailis.org/blog/when-is-acid-acid-rarely/">When is "ACID" ACID? Rarely.</a>&#160;<a href="#fnref-1743-peter">&#8617;</a>
</li>

<li id="fn-1743-hermitage">
<a href="https://github.com/ept/hermitage/blob/master/mysql.md">Testing MySQL transaction isolation levels</a>&#160;<a href="#fnref-1743-hermitage">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1743</wp:post_id>
		<wp:post_date><![CDATA[2019-03-11 21:42:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-11 13:42:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[serializable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[关系型数据库]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[62]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>超越不可能</title>
		<link>http://blog.kongfy.com/2019/10/%e8%b6%85%e8%b6%8a%e4%b8%8d%e5%8f%af%e8%83%bd/</link>
		<pubDate>Sun, 13 Oct 2019 02:36:33 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1779</guid>
		<description></description>
		<content:encoded><![CDATA[[mathjax][/mathjax]

相信所有研究过分布式系统的同学都对大名鼎鼎的FLP不可能性有所耳闻，简单来说，FLP不可能性证明了“在可能有哪怕一个进程故障的异步系统模型中，共识问题无法被解决”。但矛盾的是，现在正当红的很多分布式系统，都依赖于底层的共识算法，比如Multi-Paxos、Raft等，难道是FLP错了么？共识问题已经被解决了？还是说我们用的分布式系统都是有问题的？

想要理解这个问题，其实是要搞清楚一件事情：FLP不可能性真正意味着什么？

注：如无特殊说明，本文中的进程故障模型均为crash-stop，通信链路模型为perfect link。

<!--more-->

<h2>Consensus</h2>

<hr />

首先回顾一下分布式系统中的共识（Consensus）问题是什么。共识问题指在分布式系统中，一个或多个进程提议了一个值应当是什么后，使系统中所有进程对这个值达成一致意见。

一个能够<strong>正确的解决</strong>共识问题的算法必须满足下面的三个性质：

<ul>
<li>终止性（Liveness）：所有正确进程最后都能完成决定。</li>
<li>协定性（Safety）：所有正确进程决定相同的值。</li>
<li>完整性（Integrity）：如果正确的进程都提议同一个值，那么所有正确进程最终决定该值。</li>
</ul>

<h2>同步/异步模型</h2>

<hr />

明确了问题，还要看解决问题所用的系统模型是什么样的。

在分布式系统中，最重要的两个系统模型无非就是同步模型和异步模型了。同步模型和异步模型的区别在于对时间的假设，同步模型中消息的传递、进程处理消息所需要的时间都有明确的上界和下界，并且每个进程的本地时间和实际时间的偏移也在一个已知的范围中。而异步模型中没有关于时间的任何假设，是一个没有“时间”概念的模型。

同步模型是理论研究中非常理想的模型，显然的，我们可以在同步模型中用非常简单的方法解决共识问题（各种材料中都会提到，略过），但是在实践中，同步模型是不切实际的，在真实的系统中依靠时间往往是不靠谱的。

这也是为什么我们要研究异步模型的原因：<strong>异步模型中的算法是移植性最好的。</strong>

在异步模型中正确的算法，在更强的模型中也一定正确，因此，在真实系统中也是正确的。与之相反的是，在同步模型中正确的算法，在更弱的模型中就不一定了，比如3PC算法，在同步模型中解决了2PC的阻塞问题，但是在实践中罕有应用，原因就在这里。

<h2>FLP不可能性</h2>

<hr />

在FLP提出之前，有很多研究工作试图在异步模型中解决共识问题，而FLP不可能性的提出，终结了这种尝试。

为了理解FLP不可能性，我们需要主要看一下论文中提出的两个引理：

<ul>
<li><strong>Initial Bivalency Lemma</strong> (Lemma 2): Any algorithm that solves the 1-crash consensus has an initial bivalent configuration</li>
<li><strong>Bivalency Preservation Lemma</strong> (Lemma 3): Given any bivalent config &#92;(\gamma&#92;) and any event &#92;(e&#92;) applicable, There exists a reachable config &#92;(\delta&#92;) where &#92;(e&#92;) is applicable, and &#92;(e(\delta)&#92;) is bivalent (&#92;(\delta=\gamma&#92;) possible)</li>
</ul>

简单解释一下引理中涉及的几点定义：FLP论文中把共识问题抽象为所有节点要对一个value最终是0还是1达成共识，config指所有节点的状态和网络中的所有消息；bivalent config指最终共识结果可能为0也可能为1的config；event指的是一个节点收到一条网络消息后执行的动作，只有节点收到网络消息后对应的event才是applicable的。

有了这两条引理再看FLP的证明：我们从bivalent config开始（Lemma 2），反复应用Lemma 3，则整体总是处在bivalent的状态，<strong>违背了Liveness的要求</strong>。

FLP不可能性提出后，人们不再尝试寻找异步模型中共识问题<strong>完全正确</strong>的解法，而是对于提出的共识算法，分析其在异步模型中能够解决的部分。

<h2>Failure Detectors</h2>

<hr />

从直观上理解，<strong>FLP的证明核心在于：在异步模型中，无法准确的区分一个进程究竟是故障了还是运行的非常非常慢。</strong>

那么如果我们能够一定程度的判断出进程故障，是不是就可以解决共识问题了呢？在《Unreliable Failure Detectors for Reliable Distributed Systems》这篇论文中就提出在异步模型中通过使用Failure Detector来解决共识问题。

论文首先给出了Failure Detector的两个属性：

<strong>Completeness:</strong>

<ul>
<li><strong>Strong</strong>: Eventually every process that crashes is permanently suspected by every correct process. </li>
<li><strong>Weak</strong>: Eventually every process that crashes is permanently suspected by some correct process.</li>
</ul>

<strong>Accuracy:</strong>

<ul>
<li><strong>Strong</strong>: No process is suspected before it crashes.</li>
<li><strong>Weak</strong>: Some correct process is never suspected.</li>
<li><strong>Eventual strong</strong>: There is a time after which correct processes are not suspected by any correct process.</li>
<li><strong>Eventual weak</strong>: There is a time after which some correct process is never suspected by any correct process.</li>
</ul>

然后按照这两个属性的不同，定义了8类属性不同的Failure Detector：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/10/faiure_detectors.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2019/10/faiure_detectors.jpg" alt="Eight classes of failure detectors defined in terms of accuracy and completeness" width="1420" height="404" class="aligncenter size-full wp-image-1781" /></a>

论文中最为重要的一点的是证明了<strong>在异步模型中，Eventuallly Weak Failure Detector是能够解决共识问题所需要的最弱的Failure Detector</strong>。

当然，FLP是不可突破的，所以Eventuallly Weak Failure Detector在异步模型中是不可实现的，那你可能要问了，研究这个些个模型还有什么用？毕竟互联网是异步模型啊！实际上，这是一个概率问题，在异步模型中<strong>共识达成之前的这段时间里</strong>，系统也不一定是那么的“异步”，某种实现的Failure Detector（比如论文中举例的实现方法）有极大概率是可以满足Eventuallly Weak Accuracy的要求的，同理，要依赖更强的Accuracy则意味着更低的成功概率。如果实现的Failure Detector在运行中运气不好没有满足算法需要的Accuracy属性，共识问题不可解，但只会影响到算法的Liveness。

在异步模型中，既然Eventuallly Weak Failure Detector足以解决共识问题，那么还有没有其他问题需要依赖更强属性的Failure Detector才能解呢？答案是有的，比如拜占庭将军问题，就必须要有Perfect Failure Detector的帮助才可以解决。

换言之，通过对这些不同强度的Failure Detector的分析，我们能够定义出一些比异步模型更强的模型：

<a href="http://blog.kongfy.com/wp-content/uploads/2019/10/20191011231900.jpg"><img src="http://blog.kongfy.com/wp-content/uploads/2019/10/20191011231900.jpg" alt="Problem solvability in different distributed computing models" width="1516" height="924" class="aligncenter size-full wp-image-1782" /></a>

如上图，在异步模型的基础上增加不同的Failure Detector，<strong>能够更加准确的定义特定问题可以被解决的模型</strong>，填补了同步模型到异步模型之间的灰色地带。除此之外，还有一些其他的研究工作也做了类似的模型定义，例如半同步模型，实际上和这篇论文背后的想法是相通的。

<h2>工程实践</h2>

<hr />

现在工程实现中常用的共识算法，都是Paxos及其变种，我们已经知道了FLP算法结论是不可突破的，回顾Paxos算法，在异步模型中，由于活锁的存在，Paxos算法并没有完全解决共识问题（Liveness不满足）。

但是这并不妨碍Paxos算法在各种分布式系统中大行其道，原因就在于上面提到的分析，即使在异步模型中，在达成共识之前，系统并没有那么“异步”，我们仍有极大的概率是可以达成共识的。

这体现了理论研究和工程实践之间的一个“鸿沟”，理论研究中的不可能结论，是在追求100%可解的基础上得出的，在工程实践中，我们可以用一个99.99%的概率可解的算法（剩下的0.01%的场景下由于Liveness不满足，需要更长的时间），也足够好了。

<h2>参考资料</h2>

<hr />

[1] Fischer M J, Lynch N A, Paterson M S. Impossibility of distributed consensus with one faulty process[R]. Massachusetts Inst of Tech Cambridge lab for Computer Science, 1982.

[2] Guerraoui R, Schiper A. Consensus: the big misunderstanding &#91;distributed fault tolerant systems&#93;[C]//Proceedings of the Sixth IEEE Computer Society Workshop on Future Trends of Distributed Computing Systems. IEEE, 1997: 183-188.

[3] Chandra T D, Toueg S. Unreliable failure detectors for reliable distributed systems[J]. Journal of the ACM (JACM), 1996, 43(2): 225-267.

[4] <a href="https://people.eecs.berkeley.edu/~alig/cs294-91/flp-impossibility.pptx">Impossibility of Consensus</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1779</wp:post_id>
		<wp:post_date><![CDATA[2019-10-13 10:36:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-13 02:36:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b6%85%e8%b6%8a%e4%b8%8d%e5%8f%af%e8%83%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="consensus"><![CDATA[consensus]]></category>
		<category domain="post_tag" nicename="failure-detector"><![CDATA[failure detector]]></category>
		<category domain="post_tag" nicename="flp"><![CDATA[FLP]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分布式数据库事务故障恢复的原理与实践</title>
		<link>http://blog.kongfy.com/2020/10/%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5/</link>
		<pubDate>Sun, 25 Oct 2020 04:59:59 +0000</pubDate>
		<dc:creator><![CDATA[kongfy]]></dc:creator>
		<guid isPermaLink="false">http://blog.kongfy.com/?p=1796</guid>
		<description></description>
		<content:encoded><![CDATA[关系数据库中的事务故障恢复并不是一个新问题，自70年代关系数据库诞生之后就一直伴随着数据库技术的发展，并且在分布式数据库的场景下又遇到了一些新的问题。<strong>本文将会就事务故障恢复这个问题，分别讲述单机数据库、分布式数据库中遇到的问题和几种典型的解决方案，以及 OceanBase 在事务故障恢复方面的相关实践。</strong>

<!--more-->

<h3>从单机数据库说起</h3>

<hr />

大家都知道，数据库中事务具有四大属性：ACID，其中和事务故障恢复相关的属性是 A 和 D：

<ul>
<li><strong>原子性（Atomicity）：</strong>事务内的修改要么都生效，要么都不生效；</li>
<li><strong>持久性（Durability）：</strong>如果数据库宕机，已经完成提交的事务结果不应该丢失；</li>
</ul>

例如在如下图所示的两个事务执行过程中：

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/atomic.jpeg"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/atomic.jpeg" alt="" width="1194" height="368" class="aligncenter size-full wp-image-1811" /></a>

在数据库出现宕机时，Trx1 还没有执行完成，而 Trx2 已经完成提交，原子性和持久性要求在宕机恢复后，Trx1 的所有修改都不生效，且 Trx2 的所有修改都必须被持久化。为了达到这个要求，数据库必须在宕机重启后执行两个动作：

<ul>
<li><strong>回滚：</strong>移除所有未完成以及回滚事务的修改；</li>
<li><strong>重做：</strong>重新执行已经完成提交的事务的修改，确保持久性；</li>
</ul>

<h4>Shadow Paging</h4>

一种比较简单的保证事务原子性和持久性的方法是 Shadow Paging。这个方法非常容易理解，数据库维护两个独立的数据“版本”，分别称为 master 和 shadow 版本，写事务的所有修改操作写入在 shadow 版本上（其他事务读取仅读取 master 版本，shadow 版本对读取不可见），当写事务提交时，需要在完成提交前将 shadow 版本切换为 master 版本。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/shadow_paging.jpeg"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/shadow_paging.jpeg" alt="" width="1192" height="502" class="aligncenter size-full wp-image-1812" /></a>

当数据库发生宕机重启时，并不需要做对应的回滚和重做操作（仅回收可能残留的 shadow 版本数据即可）。

LMDB（Lightning Memory-Mapped Database） 就是一个真正应用了 Shadow Paging 方法的数据库例子。LMDB 是一个基于内存文件映射的 KV 数据库，事务修改时采用 Copy-on-write 的方式对 B+tree 索引结构进行修改，当写事务在修改数据时，会对修改部分 Copy 出新的 B+tree，并在事务提交前，将新的根节点落盘，读取事务总是从当前生效的最新根节点开始执行。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/lmdb.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/lmdb.png" alt="" width="894" height="324" class="aligncenter size-full wp-image-1813" /></a>

<h4>数据落盘策略</h4>

回顾前文，在宕机重启时，必须要执行回滚和重做两个操作。回滚的目的是消除磁盘上存在的未提交事务的修改，但 Shadow Paging 方法在事务提交前并不会修改 master 版本，所以无需执行回滚操作；重做的目的是将已经提交但是没有完成落盘的事务修改恢复出来，但 Shadow Paging 方法在事务提交前一定已经将所有修改完成落盘并修改 master 版本，所以也无需执行重做操作。

由此可以看出，事务故障恢复所需要执行的操作和事务执行过程中数据落盘的策略是相关的。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/steal_force.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/steal_force.png" alt="" width="1284" height="717" class="aligncenter size-full wp-image-1814" /></a>

数据库领域中将事务执行过程中数据落盘的策略归纳描述为两点：

<ul>
<li><strong>Steal/No-Steal：</strong>指事务在执行过程中是否允许未提交的事务修改磁盘上的最新数据；</li>
<li><strong>Force/No-Force：</strong>指事务在提交前是否要求将所有修改落盘；</li>
</ul>

实现了 Steal 属性的数据库系统，需要在宕机重启后做回滚操作以消除未提交事务的修改；实现 No-Force 的数据库系统，需要宕机重启对已提交事务做重做操作来恢复出未落盘的修改。

Shadow Paging 属于 No-Steal &amp; Force 的系统，所以宕机恢复的过程非常简单。但是宕机恢复过程的简单是以运行时的复杂为代价的，No-Steal 要求事务在提交前都不能落盘，对大事务不友好；Force 在事务提交时增加了写盘压力和延时。通常来说，Steal &amp; No-Force 对注重运行时表现的系统是比较理想的。

<h4>Logging</h4>

那么如何实现一个满足 Steal &amp; No-Force 的数据库系统呢？接下来我们分析几种基于日志的实现方法。

<h5>Redo 日志</h5>

如果在事务修改过程中生成 Redo（记录修改后的新值）日志，则在宕机重启后，系统可以通过回放 Redo 日志进行已提交事务的重做过程，但是无法做到未提交事务的回滚，因此，采用 Redo 日志的系统规则如下：

<ol>
<li>对于每一次修改，产生 Redo 日志记录（包含修改后的新值）；</li>
<li>事务 Commit 前（Commit 日志落盘），事务的所有修改不能落盘（No-Steal）；</li>
<li>事务提交成功前，事务的所有日志记录（非数据）必须先落盘 （No-Force）；</li>
</ol>

RocksDB 是一个典型的使用 Redo 日志的例子（暂不讨论 WriteUnprepared），事务的写入在提交前不能落盘，缓存在内存中事务专属的 WriteBatch中，当事务确定提交时，首先生成所有修改的 Redo 日志并落盘，然后才能将 WriteBatch 中的数据写入到 memtable 中。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/rocksdb.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/rocksdb.png" alt="" width="904" height="808" class="aligncenter size-full wp-image-1815" /></a>

Redo 日志属于 No-Steal &amp; No-Force 的系统，如前文所述，No-Steal 意味着对大事务运行不友好。

<h5>Undo/Redo 日志</h5>

如果在事务修改过程中同时记录修改前的旧值作为 Undo 日志（实现中并不一定采用日志形式），在宕机重启后，系统就拥有了回滚未提交事务的能力，这种做法称为 Undo/Redo 日志：

<ol>
<li>对每一次修改，产生日志同时记录旧值和新值；</li>
<li>未提交事务允许落盘，在修改落盘之前，对应的日志记录必须先落盘（Steal）；</li>
<li>事务提交成功前，事务的所有日志记录（非数据）必须先落盘 （No-Force）；</li>
</ol>

大名鼎鼎的 Oracle 数据库就是采用这种模式，事务的每一次修改都会产生对应的 undo record（记录在 undo block 中）和 redo record，并且在刷脏页之前，保证脏页上对应的未落盘事务日志必须先落盘；在事务 commit 前，要保证事务的所有日志落盘完成。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/oracle.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/oracle.png" alt="" width="1284" height="490" class="aligncenter size-full wp-image-1816" /></a>

Undo/Redo 日志属于 Steal &amp; No-Force 系统，目前绝大多数流行的关系数据库系统都采用了这样的思路，例如 Oracle、MySQL、PostgreSQL 等。

<h5>日志回收</h5>

任何基于日志的系统都会遇到日志回收的问题。虽然我们可以保留所有日志来满足事务故障恢复的需求，但是日志空间不能无限的膨胀下去，并且如果在宕机重启时总是从整个数据库的第一条日志开始重做，宕机恢复的速度也无法满足系统要求。因此，我们需要一种手段来尽可能的减少宕机恢复依赖的日志数量，这个手段就是 Checkpoint。

一种最为简单的 Checkpoint 方法流程如下：

<ol>
<li>停止所有事务执行（暂停新开启事务并结束运行中的事务）；</li>
<li>将当前内存中所有未落盘的修改落盘；</li>
<li>记录当前点为一次生效的 checkpoint；</li>
<li>恢复事务执行；</li>
</ol>

这个方法的正确性也很容易理解，因为在第二步之后，磁盘上已经有了完整的数据，不再需要任何日志。但这个方法的问题也很明显，就是要停止所有事务执行，这几乎是无法接受的。

有很多不同的 Checkpoint 方法可以避免这个问题，我们以 Oracle 中的 Media recovery checkpoint 举例，其过程为：

<ol>
<li>取当前 SCN（Redo point）；</li>
<li>通知 dbwr 将当前所有脏页落盘；</li>
<li>完成后将 SCN 作为 checkpoint 点更新到元信息中；</li>
</ol>

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/checkpoint.jpeg"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/checkpoint.jpeg" alt="" width="1340" height="376" class="aligncenter size-full wp-image-1817" /></a>

整个过程中不影响正常事务的执行，其正确性的关键在于完成脏页落盘后，Redo point 前日志对应的修改都完全落盘了，不再需要依赖日志回放来进行故障恢复。

<h3>分布式数据库带来的问题</h3>

<hr />

在分布式数据库中，事务故障恢复的目的仍然是要保证事务的原子性和持久性。和单机数据库的不同在于，在分布式数据库中，数据的修改位于不同的节点。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/dis_atomic.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/dis_atomic.png" alt="" width="830" height="456" class="aligncenter size-full wp-image-1818" /></a>

比如在这个例子中，事务的修改涉及到3个不同的节点，当事务要提交时，必须保证3个节点上的数据同时提交，而不能部分提交、部分回滚。

<h4>Saga</h4>

Saga 是1887年提出的一种把长事务拆小并保证整体事务原子性的方法，也可以用来解决分布式事务的问题。其核心思路是对每个子事务产生对应的“补偿事务”，当分布式事务整体提交时，依次提交各个节点上的子事务，如果过程中遭遇失败，则对已经提交的节点上的子事务执行补偿事务回滚已提交的修改。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/saga.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/saga.png" alt="" width="707" height="307" class="aligncenter size-full wp-image-1819" /></a>

如上图例中，事务在3个节点上各自产生一个子事务，在分布式事务提交时提交各个子事务，在第3个节点上提交子事务失败，需要对另外两个成功提交的子事务执行补偿事务完成回滚操作。

这种方法的优点在于正常提交流程处理简单，而缺点在于补偿回滚过程逻辑处理复杂。

<h4>两阶段提交</h4>

两阶段提交可能是最为知名的分布式事务原子性解决方案了。两阶段提交，顾名思义，整个事务提交流程分为两阶段来执行：

<ul>
<li>Prepare：协调者通知参与者 Prepare，参与者写 Prepare 日志成功后回复协调者 Prepare ok；</li>
<li>Commit：协调者收到所有参与者 Prepare 成功应答后通知参与者 Commit；</li>
</ul>

每个节点都需要将每个阶段的结果记录在持久化的日志中，用以恢复自身状态。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/2pc.jpeg"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/2pc.jpeg" alt="" width="862" height="287" class="aligncenter size-full wp-image-1820" /></a>

协议流程本身很简单，两阶段提交协议的核心在于协议应对宕机时的处理：当参与者发生宕机时，如果参与者还没有回复过协调者 Prepare ok，则协调者假定参与者决定回滚；当协调者发生宕机时，参与者会按照自己的状态决定下一步动作。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/2pc_state.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/2pc_state.png" alt="" width="680" height="494" class="aligncenter size-full wp-image-1822" /></a>

上图是两阶段提交参与者的状态机，如果参与者已经回复过 Prepare ok（处于 Prepared 状态），则参与者必须依赖协调者的消息通知才能决定最终事务状态，我们称参与者的这个状态为“事务未决”。如果此时协调者发生宕机，则两阶段提交流程会阻塞。这也是所有应用两阶段提交协议的系统所必须要解决的问题。

应用两阶段提交协议的系统很多，我们以 PG-XC 为例，PG-XC 的数据存储在不同的 Data Node 上，在分布式事务提交时，通过 Coordinator 执行两阶段提交协议保证多个 Data Node 上事务修改的原子性。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/pgxc.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/pgxc.png" alt="" width="818" height="712" class="aligncenter size-full wp-image-1821" /></a>

另外，近几年比较流行的 Percolator 协议，可以看做是两阶段提交协议的变种（Percolator 包含了一套完整的分布式事务解决方案，本文聚焦在其中事务原子性的部分）。Percolator 是 Google 提出的，在仅支持行级事务的 Bigtable 基础上将单行事务“组合”成多行事务的方案。

当多行事务发起提交时：

<ol>
<li>选定其中一行作为"Primary record"，将该行写入到 Bigtable 中，Primary record 上会记录整个事务的状态，此时为未提交状态；</li>
<li>将其他行作为“Secondary record”分别写入到 Bigtable 中，其中都包含了 Primary record 的位置信息，通过查询 Primary record 上的事务状态来决定自身状态；</li>
<li>修改 Primary record 上的事务状态为已提交；</li>
<li>异步清理 Secondary record 上的状态；</li>
</ol>

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/percolator.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/percolator.png" alt="" width="757" height="212" class="aligncenter size-full wp-image-1823" /></a>

从两阶段提交协议的角度分析 Pecolator，其每行上的事务都是整个分布式事务的参与者，Primary record 相当于协调者，当所有参与者都持久化成功后，修改 Primary record 上事务状态的过程也就等价于协调者写的 commit 日志。

<h3>OceanBase 事务故障恢复</h3>

<hr />

OceanBase 采用 share-nothing 架构，数据按照分片规则分布在各个节点上，每个节点均有自己的存储引擎，各自管理不同的数据分区，每个分区通过  Paxos 同步日志实现高可用，当事务操作一个单独的数据分片时，执行的是单机事务，当事务操作不同数据分片时，执行的是分布式事务，会遇到分布式事务的原子性问题。

<h4>单机事务故障恢复</h4>

OceanBase 采用基于 MVCC 的事务并发控制，这意味着事务修改会保留多个数据版本，并且单个数据分片上的存储引擎基于 LSM-tree 结构，会定期进行转储（compaction）操作。

如下图所示，事务的修改会以新版本数据的形式写入到内存中最新的活跃 memtable 上，当 memtable 内存使用达到一定量时，memtable 冻结并生成新的活跃 memtable，被冻结的 memtable 会执行转储转变为磁盘上的 sstable。数据的读取通过读取所有的 sstable 和 memtable 上的多版本进行合并来得到所需要的版本数据。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_compaction.jpeg"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_compaction.jpeg" alt="" width="1418" height="518" class="aligncenter size-full wp-image-1824" /></a>

单机事务故障恢复采用了 Undo/Redo 日志的思路实现。事务在写入时会生成 Redo 日志，借助 MVCC 机制的旧版本数据作为 Undo 信息，实现了 Steal &amp; No-Force 的数据落盘策略。在事务宕机恢复过程中，通过 Redo日志进行重做恢复出已提交未落盘的事务，并通过恢复保存的旧版本数据来回滚已经落盘的未提交事务修改。

<h4>分布式事务故障恢复</h4>

当事务操作多个数据分片时，OceanBase 通过两阶段提交来保证分布式事务的原子性。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc.png" alt="" width="1342" height="550" class="aligncenter size-full wp-image-1825" /></a>

如上图所示，当分布式事务提交时，会选择其中的一个数据分片作为协调者在所有数据分片上执行两阶段提交协议。还记得前文提到过的协调者宕机问题么？在 OceanBase 中，由于所有数据分片都是通过 Paxos 复制日志实现多副本高可用的，当主副本发生宕机后，会由同一数据分片的备副本转换为新的主副本继续提供服务，所以可以认为在 OceanBase 中，参与者和协调者都是保证高可用不宕机的（多数派存活），绕开了协调者宕机的问题。

在参与者高可用的实现前提下，OceanBase 对协调者进行了“无状态”的优化。在标准的两阶段提交中，协调者要通过记录日志的方法持久化自己的状态，否则如果协调者和参与者同时宕机，协调者恢复后可能会导致事务提交状态不一致。但是如果我们认为参与者不会宕机，那么协调者并不需要写日志记录自己的状态。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc2.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc2.png" alt="" width="1290" height="512" class="aligncenter size-full wp-image-1826" /></a>

上图是两阶段提交协议协调者的状态机，在协调者不写日志的前提下，协调者如果发生切主或宕机恢复，它并不知道自己之前的状态是 Abort 还是 Commit。那么，协调者可以通过询问参与者来恢复自己的状态，因为参与者是高可用的，所以一定可以恢复出整个分布式事务的状态。

除此之外，OceanBase 还对两阶段提交协议的时延进行了优化，将事务提交回应客户端的时机提前到 Prepare 阶段完成后（标准两阶段提交协议中为 Commit 阶段完成后）。

<a href="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc3.png"><img src="http://blog.kongfy.com/wp-content/uploads/2020/10/ob_2pc3.png" alt="" width="1798" height="634" class="aligncenter size-full wp-image-1827" /></a>

在上图中（绿色部分表示写日志的动作），左侧为标准两阶段提交协议，用户感知到的提交时延是4次写日志耗时以及2次 RPC 的往返耗时；右侧图中 OceanBase 的两阶段提交实现，由于少了协调者的写日志耗时以及提前了应答客户端的时机，用户感知到的提交时延是1次写日志耗时以及1次 RPC 的往返耗时。

<h3>总结</h3>

<hr />

关系数据库领域虽然历史悠久，但是仍然充满了活力。这些年来，随着硬件的发展，新的技术和思路也不断的涌现出来，从本文描述的单机数据库到分布式数据库中事务故障恢复的的方案，相信大家也都能感受到这些年来数据库技术的发展是如何一步步适应着硬件的发展趋势。未来又会怎样？更大的内存、更快速的网络、更廉价的硬盘、甚至是非易失性内存的普及，这些变化会给数据库技术带来怎样的可能性？让我们一起拭目以待。（迫不及待的同学，<a href="https://mp.weixin.qq.com/s/ZP0bVtZPHzdcgHBdIueXWQ">欢迎加入 OceanBase 团队</a>，一起创造数据库技术的未来！）]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1796</wp:post_id>
		<wp:post_date><![CDATA[2020-10-25 12:59:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-10-25 04:59:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e5%b8%83%e5%bc%8f%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e5%8a%a1%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d%e7%9a%84%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[关系型数据库]]></category>
		<category domain="category" nicename="distributed-system"><![CDATA[分布式系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>

<!--
Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

Object Caching 61/1461 objects using disk
Page Caching using disk: enhanced{w3tc_pagecache_reject_reason}
Minified using disk (wp-admin)
Database Caching using disk (Request-wide modification query)

Served from: blog.kongfy.com @ 2025-10-01 12:30:36 by W3 Total Cache
-->